
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4826      	ldr	r0, [pc, #152]	; (80001fc <endfiniloop+0x6>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	4825      	ldr	r0, [pc, #148]	; (8000200 <endfiniloop+0xa>)
 800016a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800016e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000172:	6008      	str	r0, [r1, #0]
 8000174:	2002      	movs	r0, #2
 8000176:	f380 8814 	msr	CONTROL, r0
 800017a:	f3bf 8f6f 	isb	sy
 800017e:	f002 f957 	bl	8002430 <__core_init>
 8000182:	f001 fb65 	bl	8001850 <__early_init>
 8000186:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800018a:	491e      	ldr	r1, [pc, #120]	; (8000204 <endfiniloop+0xe>)
 800018c:	4a1e      	ldr	r2, [pc, #120]	; (8000208 <endfiniloop+0x12>)

0800018e <msloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <msloop>
 8000198:	491c      	ldr	r1, [pc, #112]	; (800020c <endfiniloop+0x16>)
 800019a:	4a18      	ldr	r2, [pc, #96]	; (80001fc <endfiniloop+0x6>)

0800019c <psloop>:
 800019c:	4291      	cmp	r1, r2
 800019e:	bf3c      	itt	cc
 80001a0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001a4:	e7fa      	bcc.n	800019c <psloop>
 80001a6:	491a      	ldr	r1, [pc, #104]	; (8000210 <endfiniloop+0x1a>)
 80001a8:	4a1a      	ldr	r2, [pc, #104]	; (8000214 <endfiniloop+0x1e>)
 80001aa:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <endfiniloop+0x22>)

080001ac <dloop>:
 80001ac:	429a      	cmp	r2, r3
 80001ae:	bf3e      	ittt	cc
 80001b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001b4:	f842 0b04 	strcc.w	r0, [r2], #4
 80001b8:	e7f8      	bcc.n	80001ac <dloop>
 80001ba:	2000      	movs	r0, #0
 80001bc:	4917      	ldr	r1, [pc, #92]	; (800021c <endfiniloop+0x26>)
 80001be:	4a18      	ldr	r2, [pc, #96]	; (8000220 <endfiniloop+0x2a>)

080001c0 <bloop>:
 80001c0:	4291      	cmp	r1, r2
 80001c2:	bf3c      	itt	cc
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c8:	e7fa      	bcc.n	80001c0 <bloop>
 80001ca:	f002 f8e9 	bl	80023a0 <__init_ram_areas>
 80001ce:	f002 f927 	bl	8002420 <__late_init>
 80001d2:	4c14      	ldr	r4, [pc, #80]	; (8000224 <endfiniloop+0x2e>)
 80001d4:	4d14      	ldr	r5, [pc, #80]	; (8000228 <endfiniloop+0x32>)

080001d6 <initloop>:
 80001d6:	42ac      	cmp	r4, r5
 80001d8:	da03      	bge.n	80001e2 <endinitloop>
 80001da:	f854 1b04 	ldr.w	r1, [r4], #4
 80001de:	4788      	blx	r1
 80001e0:	e7f9      	b.n	80001d6 <initloop>

080001e2 <endinitloop>:
 80001e2:	f000 fea5 	bl	8000f30 <main>
 80001e6:	4c11      	ldr	r4, [pc, #68]	; (800022c <endfiniloop+0x36>)
 80001e8:	4d11      	ldr	r5, [pc, #68]	; (8000230 <endfiniloop+0x3a>)

080001ea <finiloop>:
 80001ea:	42ac      	cmp	r4, r5
 80001ec:	da03      	bge.n	80001f6 <endfiniloop>
 80001ee:	f854 1b04 	ldr.w	r1, [r4], #4
 80001f2:	4788      	blx	r1
 80001f4:	e7f9      	b.n	80001ea <finiloop>

080001f6 <endfiniloop>:
 80001f6:	f002 b90b 	b.w	8002410 <__default_exit>
 80001fa:	0000      	.short	0x0000
 80001fc:	20000800 	.word	0x20000800
 8000200:	08000000 	.word	0x08000000
 8000204:	20000000 	.word	0x20000000
 8000208:	20000400 	.word	0x20000400
 800020c:	20000400 	.word	0x20000400
 8000210:	08002d88 	.word	0x08002d88
 8000214:	20000800 	.word	0x20000800
 8000218:	2000081c 	.word	0x2000081c
 800021c:	20000820 	.word	0x20000820
 8000220:	20000c64 	.word	0x20000c64
 8000224:	08000160 	.word	0x08000160
 8000228:	08000160 	.word	0x08000160
 800022c:	08000160 	.word	0x08000160
 8000230:	08000160 	.word	0x08000160

08000234 <_port_switch>:
 8000234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000238:	f8c1 d00c 	str.w	sp, [r1, #12]
 800023c:	68c3      	ldr	r3, [r0, #12]
 800023e:	469d      	mov	sp, r3
 8000240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000244 <_port_thread_start>:
 8000244:	2300      	movs	r3, #0
 8000246:	f383 8811 	msr	BASEPRI, r3
 800024a:	4628      	mov	r0, r5
 800024c:	47a0      	blx	r4
 800024e:	2000      	movs	r0, #0
 8000250:	f002 f876 	bl	8002340 <chThdExit>

08000254 <_port_switch_from_isr>:
 8000254:	f001 fd64 	bl	8001d20 <chSchDoReschedule>

08000258 <_port_exit_from_isr>:
 8000258:	df00      	svc	0
 800025a:	e7fe      	b.n	800025a <_port_exit_from_isr+0x2>

0800025c <__aeabi_drsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000260:	e002      	b.n	8000268 <__adddf3>
 8000262:	bf00      	nop

08000264 <__aeabi_dsub>:
 8000264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000268 <__adddf3>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000272:	ea94 0f05 	teq	r4, r5
 8000276:	bf08      	it	eq
 8000278:	ea90 0f02 	teqeq	r0, r2
 800027c:	bf1f      	itttt	ne
 800027e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000282:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028e:	f000 80e2 	beq.w	8000456 <__adddf3+0x1ee>
 8000292:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029a:	bfb8      	it	lt
 800029c:	426d      	neglt	r5, r5
 800029e:	dd0c      	ble.n	80002ba <__adddf3+0x52>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	ea82 0000 	eor.w	r0, r2, r0
 80002ae:	ea83 0101 	eor.w	r1, r3, r1
 80002b2:	ea80 0202 	eor.w	r2, r0, r2
 80002b6:	ea81 0303 	eor.w	r3, r1, r3
 80002ba:	2d36      	cmp	r5, #54	; 0x36
 80002bc:	bf88      	it	hi
 80002be:	bd30      	pophi	{r4, r5, pc}
 80002c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x70>
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x84>
 80002e6:	4252      	negs	r2, r2
 80002e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ec:	ea94 0f05 	teq	r4, r5
 80002f0:	f000 80a7 	beq.w	8000442 <__adddf3+0x1da>
 80002f4:	f1a4 0401 	sub.w	r4, r4, #1
 80002f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002fc:	db0d      	blt.n	800031a <__adddf3+0xb2>
 80002fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000302:	fa22 f205 	lsr.w	r2, r2, r5
 8000306:	1880      	adds	r0, r0, r2
 8000308:	f141 0100 	adc.w	r1, r1, #0
 800030c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000310:	1880      	adds	r0, r0, r2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	4159      	adcs	r1, r3
 8000318:	e00e      	b.n	8000338 <__adddf3+0xd0>
 800031a:	f1a5 0520 	sub.w	r5, r5, #32
 800031e:	f10e 0e20 	add.w	lr, lr, #32
 8000322:	2a01      	cmp	r2, #1
 8000324:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000328:	bf28      	it	cs
 800032a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	18c0      	adds	r0, r0, r3
 8000334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800033c:	d507      	bpl.n	800034e <__adddf3+0xe6>
 800033e:	f04f 0e00 	mov.w	lr, #0
 8000342:	f1dc 0c00 	rsbs	ip, ip, #0
 8000346:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034a:	eb6e 0101 	sbc.w	r1, lr, r1
 800034e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000352:	d31b      	bcc.n	800038c <__adddf3+0x124>
 8000354:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000358:	d30c      	bcc.n	8000374 <__adddf3+0x10c>
 800035a:	0849      	lsrs	r1, r1, #1
 800035c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000360:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000364:	f104 0401 	add.w	r4, r4, #1
 8000368:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800036c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000370:	f080 809a 	bcs.w	80004a8 <__adddf3+0x240>
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	ea41 0105 	orr.w	r1, r1, r5
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000390:	4140      	adcs	r0, r0
 8000392:	eb41 0101 	adc.w	r1, r1, r1
 8000396:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039a:	f1a4 0401 	sub.w	r4, r4, #1
 800039e:	d1e9      	bne.n	8000374 <__adddf3+0x10c>
 80003a0:	f091 0f00 	teq	r1, #0
 80003a4:	bf04      	itt	eq
 80003a6:	4601      	moveq	r1, r0
 80003a8:	2000      	moveq	r0, #0
 80003aa:	fab1 f381 	clz	r3, r1
 80003ae:	bf08      	it	eq
 80003b0:	3320      	addeq	r3, #32
 80003b2:	f1a3 030b 	sub.w	r3, r3, #11
 80003b6:	f1b3 0220 	subs.w	r2, r3, #32
 80003ba:	da0c      	bge.n	80003d6 <__adddf3+0x16e>
 80003bc:	320c      	adds	r2, #12
 80003be:	dd08      	ble.n	80003d2 <__adddf3+0x16a>
 80003c0:	f102 0c14 	add.w	ip, r2, #20
 80003c4:	f1c2 020c 	rsb	r2, r2, #12
 80003c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003cc:	fa21 f102 	lsr.w	r1, r1, r2
 80003d0:	e00c      	b.n	80003ec <__adddf3+0x184>
 80003d2:	f102 0214 	add.w	r2, r2, #20
 80003d6:	bfd8      	it	le
 80003d8:	f1c2 0c20 	rsble	ip, r2, #32
 80003dc:	fa01 f102 	lsl.w	r1, r1, r2
 80003e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e4:	bfdc      	itt	le
 80003e6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ea:	4090      	lslle	r0, r2
 80003ec:	1ae4      	subs	r4, r4, r3
 80003ee:	bfa2      	ittt	ge
 80003f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f4:	4329      	orrge	r1, r5
 80003f6:	bd30      	popge	{r4, r5, pc}
 80003f8:	ea6f 0404 	mvn.w	r4, r4
 80003fc:	3c1f      	subs	r4, #31
 80003fe:	da1c      	bge.n	800043a <__adddf3+0x1d2>
 8000400:	340c      	adds	r4, #12
 8000402:	dc0e      	bgt.n	8000422 <__adddf3+0x1ba>
 8000404:	f104 0414 	add.w	r4, r4, #20
 8000408:	f1c4 0220 	rsb	r2, r4, #32
 800040c:	fa20 f004 	lsr.w	r0, r0, r4
 8000410:	fa01 f302 	lsl.w	r3, r1, r2
 8000414:	ea40 0003 	orr.w	r0, r0, r3
 8000418:	fa21 f304 	lsr.w	r3, r1, r4
 800041c:	ea45 0103 	orr.w	r1, r5, r3
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f1c4 040c 	rsb	r4, r4, #12
 8000426:	f1c4 0220 	rsb	r2, r4, #32
 800042a:	fa20 f002 	lsr.w	r0, r0, r2
 800042e:	fa01 f304 	lsl.w	r3, r1, r4
 8000432:	ea40 0003 	orr.w	r0, r0, r3
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	fa21 f004 	lsr.w	r0, r1, r4
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f094 0f00 	teq	r4, #0
 8000446:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800044a:	bf06      	itte	eq
 800044c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000450:	3401      	addeq	r4, #1
 8000452:	3d01      	subne	r5, #1
 8000454:	e74e      	b.n	80002f4 <__adddf3+0x8c>
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf18      	it	ne
 800045c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000460:	d029      	beq.n	80004b6 <__adddf3+0x24e>
 8000462:	ea94 0f05 	teq	r4, r5
 8000466:	bf08      	it	eq
 8000468:	ea90 0f02 	teqeq	r0, r2
 800046c:	d005      	beq.n	800047a <__adddf3+0x212>
 800046e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000472:	bf04      	itt	eq
 8000474:	4619      	moveq	r1, r3
 8000476:	4610      	moveq	r0, r2
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea91 0f03 	teq	r1, r3
 800047e:	bf1e      	ittt	ne
 8000480:	2100      	movne	r1, #0
 8000482:	2000      	movne	r0, #0
 8000484:	bd30      	popne	{r4, r5, pc}
 8000486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048a:	d105      	bne.n	8000498 <__adddf3+0x230>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	4149      	adcs	r1, r1
 8000490:	bf28      	it	cs
 8000492:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000496:	bd30      	pop	{r4, r5, pc}
 8000498:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800049c:	bf3c      	itt	cc
 800049e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004a2:	bd30      	popcc	{r4, r5, pc}
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf1a      	itte	ne
 80004bc:	4619      	movne	r1, r3
 80004be:	4610      	movne	r0, r2
 80004c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c4:	bf1c      	itt	ne
 80004c6:	460b      	movne	r3, r1
 80004c8:	4602      	movne	r2, r0
 80004ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ce:	bf06      	itte	eq
 80004d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d4:	ea91 0f03 	teqeq	r1, r3
 80004d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_ui2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f04f 0500 	mov.w	r5, #0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e750      	b.n	80003a0 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000518:	bf48      	it	mi
 800051a:	4240      	negmi	r0, r0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e73e      	b.n	80003a0 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_f2d>:
 8000524:	0042      	lsls	r2, r0, #1
 8000526:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052a:	ea4f 0131 	mov.w	r1, r1, rrx
 800052e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000532:	bf1f      	itttt	ne
 8000534:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800053c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000540:	4770      	bxne	lr
 8000542:	f092 0f00 	teq	r2, #0
 8000546:	bf14      	ite	ne
 8000548:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e720      	b.n	80003a0 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aedc 	beq.w	800034e <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6c1      	b.n	800034e <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__aeabi_d2iz>:
 80009f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f8:	d215      	bcs.n	8000a26 <__aeabi_d2iz+0x36>
 80009fa:	d511      	bpl.n	8000a20 <__aeabi_d2iz+0x30>
 80009fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a04:	d912      	bls.n	8000a2c <__aeabi_d2iz+0x3c>
 8000a06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	4240      	negne	r0, r0
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_d2iz+0x48>
 8000a2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	bf08      	it	eq
 8000a32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a36:	4770      	bx	lr
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_d2uiz>:
 8000a40:	004a      	lsls	r2, r1, #1
 8000a42:	d211      	bcs.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a48:	d211      	bcs.n	8000a6e <__aeabi_d2uiz+0x2e>
 8000a4a:	d50d      	bpl.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a54:	d40e      	bmi.n	8000a74 <__aeabi_d2uiz+0x34>
 8000a56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d102      	bne.n	8000a7a <__aeabi_d2uiz+0x3a>
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	4770      	bx	lr
 8000a7a:	f04f 0000 	mov.w	r0, #0
 8000a7e:	4770      	bx	lr

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__gesf2>:
 8000b20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b24:	e006      	b.n	8000b34 <__cmpsf2+0x4>
 8000b26:	bf00      	nop

08000b28 <__lesf2>:
 8000b28:	f04f 0c01 	mov.w	ip, #1
 8000b2c:	e002      	b.n	8000b34 <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__cmpsf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b44:	bf18      	it	ne
 8000b46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4a:	d011      	beq.n	8000b70 <__cmpsf2+0x40>
 8000b4c:	b001      	add	sp, #4
 8000b4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b52:	bf18      	it	ne
 8000b54:	ea90 0f01 	teqne	r0, r1
 8000b58:	bf58      	it	pl
 8000b5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b5e:	bf88      	it	hi
 8000b60:	17c8      	asrhi	r0, r1, #31
 8000b62:	bf38      	it	cc
 8000b64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b68:	bf18      	it	ne
 8000b6a:	f040 0001 	orrne.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b74:	d102      	bne.n	8000b7c <__cmpsf2+0x4c>
 8000b76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b7a:	d105      	bne.n	8000b88 <__cmpsf2+0x58>
 8000b7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b80:	d1e4      	bne.n	8000b4c <__cmpsf2+0x1c>
 8000b82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b86:	d0e1      	beq.n	8000b4c <__cmpsf2+0x1c>
 8000b88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_cfrcmple>:
 8000b90:	4684      	mov	ip, r0
 8000b92:	4608      	mov	r0, r1
 8000b94:	4661      	mov	r1, ip
 8000b96:	e7ff      	b.n	8000b98 <__aeabi_cfcmpeq>

08000b98 <__aeabi_cfcmpeq>:
 8000b98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b9a:	f7ff ffc9 	bl	8000b30 <__cmpsf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ba8 <__aeabi_fcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cfcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_fcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cfcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cfcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffd2 	bl	8000b90 <__aeabi_cfrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc8 	bl	8000b90 <__aeabi_cfrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_f2iz>:
 8000c0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c14:	d30f      	bcc.n	8000c36 <__aeabi_f2iz+0x2a>
 8000c16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c1e:	d90d      	bls.n	8000c3c <__aeabi_f2iz+0x30>
 8000c20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c30:	bf18      	it	ne
 8000c32:	4240      	negne	r0, r0
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr
 8000c3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c40:	d101      	bne.n	8000c46 <__aeabi_f2iz+0x3a>
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	d105      	bne.n	8000c52 <__aeabi_f2iz+0x46>
 8000c46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c4a:	bf08      	it	eq
 8000c4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr
	...

08000c60 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8000c60:	4a02      	ldr	r2, [pc, #8]	; (8000c6c <notify3+0xc>)
 8000c62:	68d3      	ldr	r3, [r2, #12]
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	60d3      	str	r3, [r2, #12]
 8000c6a:	4770      	bx	lr
 8000c6c:	40004800 	.word	0x40004800

08000c70 <icuwidthcb>:

static icucnt_t widths [40];


static void icuwidthcb(ICUDriver *icup) {
  icucnt_t width = icuGetWidthX(icup);
 8000c70:	6903      	ldr	r3, [r0, #16]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
  if(width >= DHT_START_BIT_WIDTH){
 8000c76:	2b4f      	cmp	r3, #79	; 0x4f
 8000c78:	d82d      	bhi.n	8000cd6 <icuwidthcb+0x66>
static void icuwidthcb(ICUDriver *icup) {
 8000c7a:	b430      	push	{r4, r5}
    /* starting bit resetting the bit counter */
    bit_counter = 0;
  }
  else{
    /* Recording current width. Just for fun  */
    widths[bit_counter] = width;
 8000c7c:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <icuwidthcb+0x70>)
    if(width > DHT_LOW_BIT_WIDTH){
 8000c7e:	2b1c      	cmp	r3, #28
    widths[bit_counter] = width;
 8000c80:	780a      	ldrb	r2, [r1, #0]
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000c82:	ea6f 0002 	mvn.w	r0, r2
    if(width > DHT_LOW_BIT_WIDTH){
 8000c86:	d814      	bhi.n	8000cb2 <icuwidthcb+0x42>
    }
    else{
      tmp &= ~(1 << (7 - (bit_counter % 8)));
 8000c88:	2501      	movs	r5, #1
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <icuwidthcb+0x74>)
 8000c8c:	f000 0007 	and.w	r0, r0, #7
 8000c90:	781c      	ldrb	r4, [r3, #0]
 8000c92:	fa05 f000 	lsl.w	r0, r5, r0
 8000c96:	ea24 0000 	bic.w	r0, r4, r0
    }
    /* When bit_counter is 7, tmp contains the bit from 0 to 7 corresponding to
       The Humidity Rate integer part (Decimal part is 0 on DHT 11) */
    if(bit_counter == 7)
 8000c9a:	2a07      	cmp	r2, #7
      tmp &= ~(1 << (7 - (bit_counter % 8)));
 8000c9c:	7018      	strb	r0, [r3, #0]
    if(bit_counter == 7)
 8000c9e:	d013      	beq.n	8000cc8 <icuwidthcb+0x58>
      HR = tmp;
    /* When bit_counter is 23, tmp contains the bit from 16 to 23 corresponding to
       The Temperature integer part (Decimal part is 0 on DHT 11) */
    if(bit_counter == 23)
 8000ca0:	2a17      	cmp	r2, #23
 8000ca2:	d102      	bne.n	8000caa <icuwidthcb+0x3a>
      TEMP = tmp;
 8000ca4:	7818      	ldrb	r0, [r3, #0]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <icuwidthcb+0x78>)
 8000ca8:	7018      	strb	r0, [r3, #0]
    /* When bit_counter is 39, tmp contains the bit from 32 to 39 corresponding to
       The Check sum value */
    if(bit_counter == 39)
      CHECK_SUM = tmp;
    bit_counter++;
 8000caa:	3201      	adds	r2, #1
 8000cac:	700a      	strb	r2, [r1, #0]
  }
}
 8000cae:	bc30      	pop	{r4, r5}
 8000cb0:	4770      	bx	lr
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000cb2:	2401      	movs	r4, #1
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <icuwidthcb+0x74>)
 8000cb6:	f000 0007 	and.w	r0, r0, #7
 8000cba:	781d      	ldrb	r5, [r3, #0]
 8000cbc:	fa04 f000 	lsl.w	r0, r4, r0
 8000cc0:	4328      	orrs	r0, r5
    if(bit_counter == 7)
 8000cc2:	2a07      	cmp	r2, #7
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000cc4:	7018      	strb	r0, [r3, #0]
    if(bit_counter == 7)
 8000cc6:	d1eb      	bne.n	8000ca0 <icuwidthcb+0x30>
      HR = tmp;
 8000cc8:	7818      	ldrb	r0, [r3, #0]
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <icuwidthcb+0x7c>)
    bit_counter++;
 8000ccc:	3201      	adds	r2, #1
      HR = tmp;
 8000cce:	7018      	strb	r0, [r3, #0]
    bit_counter++;
 8000cd0:	700a      	strb	r2, [r1, #0]
}
 8000cd2:	bc30      	pop	{r4, r5}
 8000cd4:	4770      	bx	lr
    bit_counter = 0;
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4b01      	ldr	r3, [pc, #4]	; (8000ce0 <icuwidthcb+0x70>)
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200008a8 	.word	0x200008a8
 8000ce4:	20000b40 	.word	0x20000b40
 8000ce8:	2000086c 	.word	0x2000086c
 8000cec:	20000820 	.word	0x20000820

08000cf0 <VectorAC>:
 8000cf0:	f000 be96 	b.w	8001a20 <VectorA4>
	...

08000d00 <Thread1>:

  (void)arg;

  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, 2);
 8000d00:	f04f 0804 	mov.w	r8, #4
static THD_FUNCTION(Thread1, arg) {
 8000d04:	b580      	push	{r7, lr}
    palSetPad(GPIOD, 2);
 8000d06:	46c1      	mov	r9, r8
    chThdSleepMilliseconds(delay);
 8000d08:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <Thread1+0x50>)
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <Thread1+0x54>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4e11      	ldr	r6, [pc, #68]	; (8000d58 <Thread1+0x58>)
    palSetPad(GPIOD, 2);
 8000d14:	4d11      	ldr	r5, [pc, #68]	; (8000d5c <Thread1+0x5c>)
    chThdSleepMilliseconds(delay);
 8000d16:	4c12      	ldr	r4, [pc, #72]	; (8000d60 <Thread1+0x60>)
 8000d18:	619a      	str	r2, [r3, #24]
    palSetPad(GPIOD, 2);
 8000d1a:	f8c5 9010 	str.w	r9, [r5, #16]
    chThdSleepMilliseconds(delay);
 8000d1e:	7830      	ldrb	r0, [r6, #0]
 8000d20:	fb07 f000 	mul.w	r0, r7, r0
 8000d24:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 8000d28:	fba4 3000 	umull	r3, r0, r4, r0
 8000d2c:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8000d30:	f001 fa4e 	bl	80021d0 <chThdSleep>
    palClearPad(GPIOD, 2);
 8000d34:	f8c5 8014 	str.w	r8, [r5, #20]
    chThdSleepMilliseconds(delay);
 8000d38:	7830      	ldrb	r0, [r6, #0]
 8000d3a:	fb07 f000 	mul.w	r0, r7, r0
 8000d3e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 8000d42:	fba4 3000 	umull	r3, r0, r4, r0
 8000d46:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8000d4a:	f001 fa41 	bl	80021d0 <chThdSleep>
 8000d4e:	e7e4      	b.n	8000d1a <Thread1+0x1a>
 8000d50:	20000bf4 	.word	0x20000bf4
 8000d54:	08002bb8 	.word	0x08002bb8
 8000d58:	20000af8 	.word	0x20000af8
 8000d5c:	40011400 	.word	0x40011400
 8000d60:	10624dd3 	.word	0x10624dd3
	...

08000d70 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8000d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8000d74:	4d69      	ldr	r5, [pc, #420]	; (8000f1c <VectorDC+0x1ac>)
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8000d76:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
 8000d78:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000d7a:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8000d7e:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8000d80:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8000d82:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000d84:	f100 8082 	bmi.w	8000e8c <VectorDC+0x11c>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d88:	2320      	movs	r3, #32
 8000d8a:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000d8e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000d92:	d049      	beq.n	8000e28 <VectorDC+0xb8>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000d94:	f04f 0800 	mov.w	r8, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000d98:	4f61      	ldr	r7, [pc, #388]	; (8000f20 <VectorDC+0x1b0>)
 8000d9a:	e007      	b.n	8000dac <VectorDC+0x3c>
    if (sr & USART_SR_RXNE)
 8000d9c:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000d9e:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000da0:	d41c      	bmi.n	8000ddc <VectorDC+0x6c>
    sr = u->SR;
 8000da2:	6834      	ldr	r4, [r6, #0]
 8000da4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000da6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000daa:	d03d      	beq.n	8000e28 <VectorDC+0xb8>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000dac:	0723      	lsls	r3, r4, #28
 8000dae:	d0f5      	beq.n	8000d9c <VectorDC+0x2c>
    sts |= SD_OVERRUN_ERROR;
 8000db0:	f014 0f08 	tst.w	r4, #8
 8000db4:	bf0c      	ite	eq
 8000db6:	2000      	moveq	r0, #0
 8000db8:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8000dba:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 8000dbc:	bf48      	it	mi
 8000dbe:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8000dc2:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000dc4:	bf48      	it	mi
 8000dc6:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8000dca:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8000dcc:	bf48      	it	mi
 8000dce:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000dd2:	f001 fb65 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
    if (sr & USART_SR_RXNE)
 8000dd6:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8000dd8:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8000dda:	d5e2      	bpl.n	8000da2 <VectorDC+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000ddc:	696a      	ldr	r2, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8000dde:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d041      	beq.n	8000e6a <VectorDC+0xfa>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000de6:	6a2a      	ldr	r2, [r5, #32]
 8000de8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000dea:	428a      	cmp	r2, r1
 8000dec:	d046      	beq.n	8000e7c <VectorDC+0x10c>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000dee:	6969      	ldr	r1, [r5, #20]
 8000df0:	4023      	ands	r3, r4
  *iqp->q_wrptr++ = b;
 8000df2:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8000df4:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000df6:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8000df8:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000dfa:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000dfc:	6a2a      	ldr	r2, [r5, #32]
 8000dfe:	69eb      	ldr	r3, [r5, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d301      	bcc.n	8000e08 <VectorDC+0x98>
    iqp->q_wrptr = iqp->q_buffer;
 8000e04:	69ab      	ldr	r3, [r5, #24]
 8000e06:	622b      	str	r3, [r5, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000e08:	68eb      	ldr	r3, [r5, #12]
 8000e0a:	42bb      	cmp	r3, r7
 8000e0c:	d0c9      	beq.n	8000da2 <VectorDC+0x32>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000e0e:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8000e10:	4618      	mov	r0, r3
 8000e12:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000e14:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 8000e16:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000e1a:	f001 f9e9 	bl	80021f0 <chSchReadyI>
    sr = u->SR;
 8000e1e:	6834      	ldr	r4, [r6, #0]
 8000e20:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000e22:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000e26:	d1c1      	bne.n	8000dac <VectorDC+0x3c>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000e2e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000e32:	d001      	beq.n	8000e38 <VectorDC+0xc8>
 8000e34:	0622      	lsls	r2, r4, #24
 8000e36:	d437      	bmi.n	8000ea8 <VectorDC+0x138>
  if (sr & USART_SR_TC) {
 8000e38:	0663      	lsls	r3, r4, #25
 8000e3a:	d511      	bpl.n	8000e60 <VectorDC+0xf0>
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 8000e42:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e44:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d053      	beq.n	8000ef2 <VectorDC+0x182>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e4a:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8000e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000e52:	ea09 0303 	and.w	r3, r9, r3
 8000e56:	60f3      	str	r3, [r6, #12]
 8000e58:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000e5a:	6032      	str	r2, [r6, #0]
 8000e5c:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 8000e60:	b003      	add	sp, #12
 8000e62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000e66:	f000 bdab 	b.w	80019c0 <_port_irq_epilogue>
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	f001 fb17 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
  if (iqIsFullI(iqp)) {
 8000e72:	6a2a      	ldr	r2, [r5, #32]
 8000e74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d1b8      	bne.n	8000dee <VectorDC+0x7e>
 8000e7c:	6969      	ldr	r1, [r5, #20]
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d0b5      	beq.n	8000dee <VectorDC+0x7e>
 8000e82:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e86:	f001 fb0b 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
 8000e8a:	e78a      	b.n	8000da2 <VectorDC+0x32>
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e96:	f001 fb03 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
    u->SR = ~USART_SR_LBD;
 8000e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6032      	str	r2, [r6, #0]
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	e76f      	b.n	8000d88 <VectorDC+0x18>
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000eae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000eb0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d024      	beq.n	8000f00 <VectorDC+0x190>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000eb6:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000eb8:	6c28      	ldr	r0, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8000eba:	1c59      	adds	r1, r3, #1
  oqp->q_counter++;
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000ec0:	64a9      	str	r1, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8000ec2:	4281      	cmp	r1, r0
  b = *oqp->q_rdptr++;
 8000ec4:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000ec6:	d301      	bcc.n	8000ecc <VectorDC+0x15c>
    oqp->q_rdptr = oqp->q_buffer;
 8000ec8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000eca:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000ecc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <VectorDC+0x1b4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d009      	beq.n	8000ee8 <VectorDC+0x178>
  tp->u.rdymsg = msg;
 8000ed4:	f04f 0e00 	mov.w	lr, #0
  tqp->next             = tp->queue.next;
 8000ed8:	6819      	ldr	r1, [r3, #0]
  (void) chSchReadyI(tp);
 8000eda:	4618      	mov	r0, r3
 8000edc:	6329      	str	r1, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ede:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
 8000ee0:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000ee4:	f001 f984 	bl	80021f0 <chSchReadyI>
      u->DR = b;
 8000ee8:	6077      	str	r7, [r6, #4]
 8000eea:	2300      	movs	r3, #0
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	e7a2      	b.n	8000e38 <VectorDC+0xc8>
    if (oqIsEmptyI(&sdp->oqueue))
 8000ef2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0a8      	beq.n	8000e4a <VectorDC+0xda>
 8000ef8:	2010      	movs	r0, #16
 8000efa:	f001 fad1 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
 8000efe:	e7a4      	b.n	8000e4a <VectorDC+0xda>
  if (oqIsEmptyI(oqp)) {
 8000f00:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d0d7      	beq.n	8000eb6 <VectorDC+0x146>
 8000f06:	2008      	movs	r0, #8
 8000f08:	f001 faca 	bl	80024a0 <chEvtBroadcastFlagsI.constprop.36>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000f0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000f10:	ea09 0303 	and.w	r3, r9, r3
 8000f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f18:	60f3      	str	r3, [r6, #12]
 8000f1a:	e7e6      	b.n	8000eea <VectorDC+0x17a>
 8000f1c:	20000b78 	.word	0x20000b78
 8000f20:	20000b84 	.word	0x20000b84
 8000f24:	20000ba8 	.word	0x20000ba8
	...

08000f30 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000f36:	4601      	mov	r1, r0
    _stm32_dma_streams[i].channel->CCR = 0U;
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <main+0x58>)
	ADC_SQR1_NUM_CH(ADC_GRP1_NUM_CHANNELS),
	0,
	ADC_SQR3_SQ1_N(ADC_CHANNEL_IN0)
};

int main(void) {
 8000f3c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000f40:	691d      	ldr	r5, [r3, #16]
 8000f42:	611c      	str	r4, [r3, #16]
 8000f44:	6118      	str	r0, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000f46:	68dd      	ldr	r5, [r3, #12]
 8000f48:	60dc      	str	r4, [r3, #12]
 8000f4a:	60d8      	str	r0, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000f4c:	69dc      	ldr	r4, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8000f4e:	4e0f      	ldr	r6, [pc, #60]	; (8000f8c <main+0x5c>)
  rccEnablePWRInterface(FALSE);
 8000f50:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000f54:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8000f56:	69dc      	ldr	r4, [r3, #28]
 8000f58:	4d0d      	ldr	r5, [pc, #52]	; (8000f90 <main+0x60>)
 8000f5a:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8000f5e:	61dc      	str	r4, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8000f60:	6833      	ldr	r3, [r6, #0]
  dma_streams_mask = 0U;
 8000f62:	4c0c      	ldr	r4, [pc, #48]	; (8000f94 <main+0x64>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6033      	str	r3, [r6, #0]
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <main+0x68>)
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	6018      	str	r0, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <main+0x6c>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 8000f72:	6022      	str	r2, [r4, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8000f74:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000f78:	3101      	adds	r1, #1
 8000f7a:	2907      	cmp	r1, #7
 8000f7c:	f105 0514 	add.w	r5, r5, #20
 8000f80:	d00e      	beq.n	8000fa0 <main+0x70>
 8000f82:	f855 4c14 	ldr.w	r4, [r5, #-20]
 8000f86:	e7f3      	b.n	8000f70 <main+0x40>
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	08002bd8 	.word	0x08002bd8
 8000f94:	40020008 	.word	0x40020008
 8000f98:	20000afc 	.word	0x20000afc
 8000f9c:	20000870 	.word	0x20000870
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8000fa4:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
  GPIOC->ODR = config->PCData.odr;
 8000fa8:	f46f 7940 	mvn.w	r9, #768	; 0x300
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8000fac:	2601      	movs	r6, #1
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8000fae:	4bcf      	ldr	r3, [pc, #828]	; (80012ec <main+0x3bc>)
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8000fb0:	f242 5e8a 	movw	lr, #9610	; 0x258a
  rccEnableADC1(FALSE);
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8000fb4:	2709      	movs	r7, #9
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	f8df c38c 	ldr.w	ip, [pc, #908]	; 8001348 <main+0x418>
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000fbc:	4ccc      	ldr	r4, [pc, #816]	; (80012f0 <main+0x3c0>)
 8000fbe:	f8cc 0004 	str.w	r0, [ip, #4]
 8000fc2:	f8d4 8018 	ldr.w	r8, [r4, #24]
  GPIOA->ODR = config->PAData.odr;
 8000fc6:	f5ac 4c78 	sub.w	ip, ip, #63488	; 0xf800
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000fca:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 8000fce:	f8c4 8018 	str.w	r8, [r4, #24]
  GPIOA->CRH = config->PAData.crh;
 8000fd2:	f8df 8378 	ldr.w	r8, [pc, #888]	; 800134c <main+0x41c>
  GPIOA->ODR = config->PAData.odr;
 8000fd6:	f8cc 000c 	str.w	r0, [ip, #12]
  GPIOA->CRH = config->PAData.crh;
 8000fda:	f8cc 8004 	str.w	r8, [ip, #4]
  GPIOA->CRL = config->PAData.crl;
 8000fde:	f5a8 5864 	sub.w	r8, r8, #14592	; 0x3900
 8000fe2:	f1a8 0834 	sub.w	r8, r8, #52	; 0x34
 8000fe6:	f8cc 8000 	str.w	r8, [ip]
  GPIOB->CRH = config->PBData.crh;
 8000fea:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8001350 <main+0x420>
  GPIOB->ODR = config->PBData.odr;
 8000fee:	f8cc 040c 	str.w	r0, [ip, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 8000ff2:	f8cc 8404 	str.w	r8, [ip, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 8000ff6:	f8cc 1400 	str.w	r1, [ip, #1024]	; 0x400
  GPIOC->CRH = config->PCData.crh;
 8000ffa:	f10c 4c91 	add.w	ip, ip, #1216348160	; 0x48800000
  GPIOC->ODR = config->PCData.odr;
 8000ffe:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8001354 <main+0x424>
  GPIOC->CRH = config->PCData.crh;
 8001002:	f50c 2ce8 	add.w	ip, ip, #475136	; 0x74000
 8001006:	f20c 3c43 	addw	ip, ip, #835	; 0x343
  GPIOC->ODR = config->PCData.odr;
 800100a:	f8c8 900c 	str.w	r9, [r8, #12]
  GPIOC->CRH = config->PCData.crh;
 800100e:	f8c8 c004 	str.w	ip, [r8, #4]
  GPIOC->CRL = config->PCData.crl;
 8001012:	f8c8 1000 	str.w	r1, [r8]
  GPIOD->ODR = config->PDData.odr;
 8001016:	f8df c340 	ldr.w	ip, [pc, #832]	; 8001358 <main+0x428>
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800101a:	f8df 8340 	ldr.w	r8, [pc, #832]	; 800135c <main+0x42c>
  GPIOD->ODR = config->PDData.odr;
 800101e:	f8cc 000c 	str.w	r0, [ip, #12]
  GPIOD->CRH = config->PDData.crh;
 8001022:	f8cc 1004 	str.w	r1, [ip, #4]
  GPIOD->CRL = config->PDData.crl;
 8001026:	f8cc 8000 	str.w	r8, [ip]
 800102a:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8001360 <main+0x430>
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800102e:	f8cc 040c 	str.w	r0, [ip, #1036]	; 0x40c
  GPIOE->CRH = config->PEData.crh;
 8001032:	f8cc 1404 	str.w	r1, [ip, #1028]	; 0x404
  GPIOE->CRL = config->PEData.crl;
 8001036:	f8cc 1400 	str.w	r1, [ip, #1024]	; 0x400
 800103a:	f888 6000 	strb.w	r6, [r8]
  rccEnableADC1(FALSE);
 800103e:	69a1      	ldr	r1, [r4, #24]
  adcp->config   = NULL;
 8001040:	f8c8 2004 	str.w	r2, [r8, #4]
 8001044:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  adcp->samples  = NULL;
 8001048:	f8c8 2008 	str.w	r2, [r8, #8]
  adcp->depth    = 0;
 800104c:	f8c8 200c 	str.w	r2, [r8, #12]
  adcp->grpp     = NULL;
 8001050:	f8c8 2010 	str.w	r2, [r8, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001054:	f8c8 2014 	str.w	r2, [r8, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001058:	f8c8 2020 	str.w	r2, [r8, #32]
 800105c:	61a1      	str	r1, [r4, #24]
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 800105e:	49a5      	ldr	r1, [pc, #660]	; (80012f4 <main+0x3c4>)
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 8001060:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 8001064:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8001068:	f108 0118 	add.w	r1, r8, #24
 800106c:	f8c8 1018 	str.w	r1, [r8, #24]
  tqp->prev = (thread_t *)tqp;
 8001070:	f8c8 101c 	str.w	r1, [r8, #28]
  ADCD1.adc = ADC1;
 8001074:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  ADC1->CR1 = 0;
 8001078:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 800107a:	609e      	str	r6, [r3, #8]
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 800107c:	609f      	str	r7, [r3, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 800107e:	68ab      	ldr	r3, [r5, #8]
 8001080:	0718      	lsls	r0, r3, #28
 8001082:	d4fc      	bmi.n	800107e <main+0x14e>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8001084:	2205      	movs	r2, #5
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8001086:	4b99      	ldr	r3, [pc, #612]	; (80012ec <main+0x3bc>)
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8001088:	60aa      	str	r2, [r5, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 800108a:	689d      	ldr	r5, [r3, #8]
 800108c:	f015 0504 	ands.w	r5, r5, #4
 8001090:	d1fb      	bne.n	800108a <main+0x15a>
  sdp->vmt = &vmt;
 8001092:	4c99      	ldr	r4, [pc, #612]	; (80012f8 <main+0x3c8>)
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001094:	2201      	movs	r2, #1
 8001096:	4620      	mov	r0, r4
  oqp->q_counter = size;
 8001098:	f04f 0c10 	mov.w	ip, #16
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800109c:	f241 0a0a 	movw	sl, #4106	; 0x100a
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1(FALSE);
 80010a0:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80012f0 <main+0x3c0>
  ADC1->CR2 = 0;
 80010a4:	609d      	str	r5, [r3, #8]
  rccDisableADC1(FALSE);
 80010a6:	f8d9 7018 	ldr.w	r7, [r9, #24]
 80010aa:	4e94      	ldr	r6, [pc, #592]	; (80012fc <main+0x3cc>)
 80010ac:	f427 7700 	bic.w	r7, r7, #512	; 0x200
 80010b0:	f8c9 7018 	str.w	r7, [r9, #24]
 80010b4:	f840 6b04 	str.w	r6, [r0], #4
  oqp->q_top     = bp + size;
 80010b8:	f104 0774 	add.w	r7, r4, #116	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80010bc:	6060      	str	r0, [r4, #4]
  oqp->q_notify  = onfy;
 80010be:	4e90      	ldr	r6, [pc, #576]	; (8001300 <main+0x3d0>)
  tqp->next = (thread_t *)tqp;
 80010c0:	f104 000c 	add.w	r0, r4, #12
  oqp->q_top     = bp + size;
 80010c4:	6427      	str	r7, [r4, #64]	; 0x40
 80010c6:	60e0      	str	r0, [r4, #12]
  tqp->prev = (thread_t *)tqp;
 80010c8:	6120      	str	r0, [r4, #16]
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 80010ca:	4f8e      	ldr	r7, [pc, #568]	; (8001304 <main+0x3d4>)
  iqp->q_buffer  = bp;
 80010cc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80010d0:	4b8d      	ldr	r3, [pc, #564]	; (8001308 <main+0x3d8>)
  oqp->q_notify  = onfy;
 80010d2:	64e6      	str	r6, [r4, #76]	; 0x4c
  iqp->q_buffer  = bp;
 80010d4:	61a0      	str	r0, [r4, #24]
 80010d6:	4e8d      	ldr	r6, [pc, #564]	; (800130c <main+0x3dc>)
  iqp->q_rdptr   = bp;
 80010d8:	6260      	str	r0, [r4, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80010da:	6220      	str	r0, [r4, #32]
  iqp->q_top     = bp + size;
 80010dc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80010e0:	6767      	str	r7, [r4, #116]	; 0x74
 80010e2:	61e0      	str	r0, [r4, #28]
  oqp->q_buffer  = bp;
 80010e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80010e6:	64a0      	str	r0, [r4, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80010e8:	6460      	str	r0, [r4, #68]	; 0x44
void icu_lld_init(void) {

#if STM32_ICU_USE_TIM1
  /* Driver initialization.*/
  icuObjectInit(&ICUD1);
  ICUD1.tim = STM32_TIM1;
 80010ea:	f507 4764 	add.w	r7, r7, #58368	; 0xe400
  tqp->next = (thread_t *)tqp;
 80010ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80010f2:	6320      	str	r0, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 80010f4:	6360      	str	r0, [r4, #52]	; 0x34
 80010f6:	60f7      	str	r7, [r6, #12]
  tqp->next = (thread_t *)tqp;
 80010f8:	f103 000c 	add.w	r0, r3, #12
/*
 * Board-specific initialization code.
 */
void boardInit(void) {

	AFIO -> MAPR |= AFIO_MAPR_USART3_REMAP_PARTIALREMAP;
 80010fc:	f5a7 5730 	sub.w	r7, r7, #11264	; 0x2c00
  iqp->q_counter = 0;
 8001100:	6165      	str	r5, [r4, #20]
  spip->config = NULL;
 8001102:	605d      	str	r5, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001104:	609d      	str	r5, [r3, #8]
 8001106:	60d8      	str	r0, [r3, #12]
  spip->state = SPI_STOP;
 8001108:	701a      	strb	r2, [r3, #0]
  oqp->q_counter = size;
 800110a:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
  iqp->q_notify  = infy;
 800110e:	62a5      	str	r5, [r4, #40]	; 0x28
  iqp->q_link    = link;
 8001110:	62e4      	str	r4, [r4, #44]	; 0x2c
  oqp->q_link    = link;
 8001112:	6524      	str	r4, [r4, #80]	; 0x50
  sdp->state = SD_STOP;
 8001114:	7222      	strb	r2, [r4, #8]
 8001116:	7032      	strb	r2, [r6, #0]
  icup->config = NULL;
 8001118:	6075      	str	r5, [r6, #4]
  tqp->prev = (thread_t *)tqp;
 800111a:	6118      	str	r0, [r3, #16]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	615d      	str	r5, [r3, #20]
 8001120:	ea40 000c 	orr.w	r0, r0, ip
 8001124:	6078      	str	r0, [r7, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001126:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800112a:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
 800112e:	4310      	orrs	r0, r2
 8001130:	f8c9 001c 	str.w	r0, [r9, #28]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001134:	f241 0018 	movw	r0, #4120	; 0x1018
  SPID1.spi       = SPI1;
 8001138:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
 800113c:	61df      	str	r7, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800113e:	4f74      	ldr	r7, [pc, #464]	; (8001310 <main+0x3e0>)
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001140:	62d8      	str	r0, [r3, #44]	; 0x2c
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8001142:	621f      	str	r7, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001144:	3714      	adds	r7, #20
 8001146:	625f      	str	r7, [r3, #36]	; 0x24

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001148:	4b72      	ldr	r3, [pc, #456]	; (8001314 <main+0x3e4>)
 800114a:	4872      	ldr	r0, [pc, #456]	; (8001314 <main+0x3e4>)
 800114c:	685b      	ldr	r3, [r3, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800114e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 8001152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001156:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001158:	f64f 7eff 	movw	lr, #65535	; 0xffff
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800115c:	f645 53bf 	movw	r3, #23999	; 0x5dbf
  tqp->next = (thread_t *)tqp;
 8001160:	f8df a200 	ldr.w	sl, [pc, #512]	; 8001364 <main+0x434>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001164:	f04f 0b80 	mov.w	fp, #128	; 0x80
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 8001168:	f8aa e024 	strh.w	lr, [sl, #36]	; 0x24
 800116c:	628b      	str	r3, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800116e:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001172:	618d      	str	r5, [r1, #24]
  tqp->prev = (thread_t *)tqp;
 8001174:	f8ca a004 	str.w	sl, [sl, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8001178:	634d      	str	r5, [r1, #52]	; 0x34
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 800117a:	f8ca 5008 	str.w	r5, [sl, #8]
  STM32_ST_TIM->DIER   = 0;
 800117e:	60cd      	str	r5, [r1, #12]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8001180:	f8aa 5026 	strh.w	r5, [sl, #38]	; 0x26
  STM32_ST_TIM->CR2    = 0;
 8001184:	604d      	str	r5, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001186:	614a      	str	r2, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001188:	600a      	str	r2, [r1, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800118a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800118e:	4f62      	ldr	r7, [pc, #392]	; (8001318 <main+0x3e8>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001190:	4862      	ldr	r0, [pc, #392]	; (800131c <main+0x3ec>)
 8001192:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001368 <main+0x438>
  ch_memcore.endmem  = __heap_end__;
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <main+0x3f0>)
 8001198:	f887 b31c 	strb.w	fp, [r7, #796]	; 0x31c
 800119c:	6043      	str	r3, [r0, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800119e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80011a2:	6039      	str	r1, [r7, #0]
  ch_memcore.nextmem = __heap_base__;
 80011a4:	f8c0 e000 	str.w	lr, [r0]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a8:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80011ac:	f10a 011c 	add.w	r1, sl, #28
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80011b0:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <main+0x3f4>)
 80011b2:	f8ca 101c 	str.w	r1, [sl, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80011b6:	f8ca 1020 	str.w	r1, [sl, #32]
 80011ba:	485b      	ldr	r0, [pc, #364]	; (8001328 <main+0x3f8>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	495b      	ldr	r1, [pc, #364]	; (800132c <main+0x3fc>)
  tqp->next = (thread_t *)tqp;
 80011be:	f8ca a000 	str.w	sl, [sl]
 80011c2:	6018      	str	r0, [r3, #0]
 80011c4:	68c8      	ldr	r0, [r1, #12]
  H_NEXT(&default_heap.header) = NULL;
 80011c6:	609d      	str	r5, [r3, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c8:	ea00 0e0e 	and.w	lr, r0, lr
  reg_value  =  (reg_value                                   |
 80011cc:	4858      	ldr	r0, [pc, #352]	; (8001330 <main+0x400>)
  H_PAGES(&default_heap.header) = 0;
 80011ce:	60dd      	str	r5, [r3, #12]
 80011d0:	ea4e 0000 	orr.w	r0, lr, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011d4:	f8df e194 	ldr.w	lr, [pc, #404]	; 800136c <main+0x43c>
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80011d8:	60c8      	str	r0, [r1, #12]
 80011da:	f8de 000c 	ldr.w	r0, [lr, #12]
 80011de:	619d      	str	r5, [r3, #24]
 80011e0:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80011e4:	f8ce 000c 	str.w	r0, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011e8:	f8df e184 	ldr.w	lr, [pc, #388]	; 8001370 <main+0x440>
  tp->prio      = prio;
 80011ec:	f8ca b034 	str.w	fp, [sl, #52]	; 0x34
 80011f0:	f8de 0000 	ldr.w	r0, [lr]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80011f4:	f88a 504d 	strb.w	r5, [sl, #77]	; 0x4d
 80011f8:	4310      	orrs	r0, r2
  tp->realprio  = prio;
 80011fa:	f8ca b068 	str.w	fp, [sl, #104]	; 0x68
  tp->mtxlist   = NULL;
 80011fe:	f8ca 5064 	str.w	r5, [sl, #100]	; 0x64
  tp->epending  = (eventmask_t)0;
 8001202:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
  tp->refs      = (trefs_t)1;
 8001206:	f88a 204e 	strb.w	r2, [sl, #78]	; 0x4e
  REG_INSERT(tp);
 800120a:	f8ca a03c 	str.w	sl, [sl, #60]	; 0x3c
 800120e:	f8ca a040 	str.w	sl, [sl, #64]	; 0x40
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8001212:	f8ca 5048 	str.w	r5, [sl, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8001216:	f88a 204c 	strb.w	r2, [sl, #76]	; 0x4c
 800121a:	f8ce 0000 	str.w	r0, [lr]
  tlp->next = (thread_t *)tlp;
 800121e:	f10a 0e54 	add.w	lr, sl, #84	; 0x54
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	f881 c01f 	strb.w	ip, [r1, #31]
 8001226:	f8ca e054 	str.w	lr, [sl, #84]	; 0x54
 800122a:	f04f 0e20 	mov.w	lr, #32
  tp->name      = name;
 800122e:	4841      	ldr	r0, [pc, #260]	; (8001334 <main+0x404>)
  tqp->next = (thread_t *)tqp;
 8001230:	449c      	add	ip, r3
 8001232:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8001236:	f881 e022 	strb.w	lr, [r1, #34]	; 0x22
  REG_INSERT(tp);
 800123a:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
 800123e:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8001242:	f8c3 c014 	str.w	ip, [r3, #20]
  tqp->next = (thread_t *)tqp;
 8001246:	f10a 0358 	add.w	r3, sl, #88	; 0x58
 800124a:	f8ca 0010 	str.w	r0, [sl, #16]
 800124e:	f8ca 0014 	str.w	r0, [sl, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001252:	f8ca 0018 	str.w	r0, [sl, #24]
 8001256:	f8ca 3058 	str.w	r3, [sl, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 800125a:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
 800125e:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8001262:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001264:	2320      	movs	r3, #32
 8001266:	f383 8811 	msr	BASEPRI, r3
  tp->state     = CH_STATE_WTSTART;
 800126a:	2002      	movs	r0, #2
  tp->wabase = tdp->wbase;
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <main+0x408>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800126e:	4933      	ldr	r1, [pc, #204]	; (800133c <main+0x40c>)
  tp->prio      = prio;
 8001270:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tp->realprio  = prio;
 8001274:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tp->refs      = (trefs_t)1;
 8001278:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800127c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
  REG_INSERT(tp);
 8001280:	f8da c014 	ldr.w	ip, [sl, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001284:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  tp->name      = name;
 8001288:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8001374 <main+0x444>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800128c:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <main+0x410>)
 800128e:	66d9      	str	r1, [r3, #108]	; 0x6c
  REG_INSERT(tp);
 8001290:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001294:	f8c3 c0a4 	str.w	ip, [r3, #164]	; 0xa4
  tp->state     = CH_STATE_WTSTART;
 8001298:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
  tp->name      = name;
 800129c:	f8c3 e0a8 	str.w	lr, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012a0:	671d      	str	r5, [r3, #112]	; 0x70
  tqp->next = (thread_t *)tqp;
 80012a2:	f103 0ebc 	add.w	lr, r3, #188	; 0xbc
  tp->flags     = CH_FLAG_MODE_STATIC;
 80012a6:	f883 50b1 	strb.w	r5, [r3, #177]	; 0xb1
  tp->mtxlist   = NULL;
 80012aa:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 80012ae:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  REG_INSERT(tp);
 80012b2:	f8c3 a0a0 	str.w	sl, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 80012b6:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  REG_INSERT(tp);
 80012be:	f8cc 1010 	str.w	r1, [ip, #16]
  tlp->next = (thread_t *)tlp;
 80012c2:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  chSchWakeupS(tp, MSG_OK);
 80012c6:	4608      	mov	r0, r1
 80012c8:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
 80012cc:	f8c3 e0bc 	str.w	lr, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 80012d0:	f8c3 e0c0 	str.w	lr, [r3, #192]	; 0xc0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012d4:	9202      	str	r2, [sp, #8]
  REG_INSERT(tp);
 80012d6:	f8ca 1014 	str.w	r1, [sl, #20]
  chSchWakeupS(tp, MSG_OK);
 80012da:	f001 f8b1 	bl	8002440 <chSchWakeupS.constprop.43>
 80012de:	f385 8811 	msr	BASEPRI, r5

	halInit();
	chSysInit();
	
	delay =1000;
 80012e2:	23e8      	movs	r3, #232	; 0xe8
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <main+0x414>)
 80012e6:	7013      	strb	r3, [r2, #0]
 80012e8:	2320      	movs	r3, #32
 80012ea:	e045      	b.n	8001378 <main+0x448>
 80012ec:	40012400 	.word	0x40012400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08002bc0 	.word	0x08002bc0
 80012f8:	20000b78 	.word	0x20000b78
 80012fc:	08002ca8 	.word	0x08002ca8
 8001300:	08000c61 	.word	0x08000c61
 8001304:	40004800 	.word	0x40004800
 8001308:	2000083c 	.word	0x2000083c
 800130c:	20000824 	.word	0x20000824
 8001310:	08002bd4 	.word	0x08002bd4
 8001314:	e0042000 	.word	0xe0042000
 8001318:	e000e100 	.word	0xe000e100
 800131c:	20000ad0 	.word	0x20000ad0
 8001320:	20002000 	.word	0x20002000
 8001324:	20000ad8 	.word	0x20000ad8
 8001328:	080018f1 	.word	0x080018f1
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	05fa0300 	.word	0x05fa0300
 8001334:	08002c74 	.word	0x08002c74
 8001338:	200009f8 	.word	0x200009f8
 800133c:	080019b1 	.word	0x080019b1
 8001340:	08000245 	.word	0x08000245
 8001344:	20000af8 	.word	0x20000af8
 8001348:	40020000 	.word	0x40020000
 800134c:	888884b8 	.word	0x888884b8
 8001350:	b4b38888 	.word	0xb4b38888
 8001354:	40011000 	.word	0x40011000
 8001358:	40011400 	.word	0x40011400
 800135c:	88888844 	.word	0x88888844
 8001360:	20000b44 	.word	0x20000b44
 8001364:	20000bf4 	.word	0x20000bf4
 8001368:	20000c68 	.word	0x20000c68
 800136c:	e000edf0 	.word	0xe000edf0
 8001370:	e0001000 	.word	0xe0001000
 8001374:	08002c8c 	.word	0x08002c8c
 8001378:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800137c:	7a23      	ldrb	r3, [r4, #8]
 800137e:	9a02      	ldr	r2, [sp, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10c      	bne.n	800139e <main+0x46e>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001384:	21c0      	movs	r1, #192	; 0xc0
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 8001386:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	f8c9 301c 	str.w	r3, [r9, #28]
 8001392:	f887 1327 	strb.w	r1, [r7, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001396:	f8c7 b184 	str.w	fp, [r7, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800139a:	f8c7 b004 	str.w	fp, [r7, #4]
    u->BRR = STM32_PCLK2 / config->speed;
 800139e:	21d0      	movs	r1, #208	; 0xd0
  USART_TypeDef *u = sdp->usart;
 80013a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013a2:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013a6:	2701      	movs	r7, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80013a8:	f242 1e2c 	movw	lr, #8492	; 0x212c
  u->SR = 0;
 80013ac:	2500      	movs	r5, #0
    u->BRR = STM32_PCLK2 / config->speed;
 80013ae:	6099      	str	r1, [r3, #8]
  sdp->state = SD_READY;
 80013b0:	2002      	movs	r0, #2
    sdp->rxmask = 0xFF;
 80013b2:	21ff      	movs	r1, #255	; 0xff
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013b4:	f8c3 c010 	str.w	ip, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013b8:	615f      	str	r7, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80013ba:	f8c3 e00c 	str.w	lr, [r3, #12]
  u->SR = 0;
 80013be:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80013c0:	f8d3 e000 	ldr.w	lr, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 80013c4:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80013c6:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
 80013ca:	7220      	strb	r0, [r4, #8]
 80013cc:	f385 8811 	msr	BASEPRI, r5
 80013d0:	2420      	movs	r4, #32
 80013d2:	f384 8811 	msr	BASEPRI, r4
  tp->prio      = prio;
 80013d6:	2181      	movs	r1, #129	; 0x81
  tp->wabase = (stkalign_t *)wsp;
 80013d8:	4bc3      	ldr	r3, [pc, #780]	; (80016e8 <main+0x7b8>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80013da:	f8df e34c 	ldr.w	lr, [pc, #844]	; 8001728 <main+0x7f8>
 80013de:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80013e2:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 80013e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  tp->name      = name;
 80013ea:	f8df c340 	ldr.w	ip, [pc, #832]	; 800172c <main+0x7fc>
  REG_INSERT(tp);
 80013ee:	f8da 2014 	ldr.w	r2, [sl, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80013f2:	f8c3 e0dc 	str.w	lr, [r3, #220]	; 0xdc
  REG_INSERT(tp);
 80013f6:	f503 7e80 	add.w	lr, r3, #256	; 0x100
  tp->state     = CH_STATE_WTSTART;
 80013fa:	f883 0120 	strb.w	r0, [r3, #288]	; 0x120
  REG_INSERT(tp);
 80013fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  tp->prio      = prio;
 8001402:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
  tp->realprio  = prio;
 8001406:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800140a:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
 800140e:	f883 5121 	strb.w	r5, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
 8001412:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 8001416:	f8c3 5134 	str.w	r5, [r3, #308]	; 0x134
  tp->refs      = (trefs_t)1;
 800141a:	f883 7122 	strb.w	r7, [r3, #290]	; 0x122
  REG_INSERT(tp);
 800141e:	f8c3 a110 	str.w	sl, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 8001422:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  tp->name      = name;
 8001426:	f8c3 c118 	str.w	ip, [r3, #280]	; 0x118
  tlp->next = (thread_t *)tlp;
 800142a:	f503 7194 	add.w	r1, r3, #296	; 0x128
  REG_INSERT(tp);
 800142e:	f8c2 e010 	str.w	lr, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8001432:	f503 7296 	add.w	r2, r3, #300	; 0x12c
  chSchWakeupS(tp, MSG_OK);
 8001436:	4670      	mov	r0, lr
  tlp->next = (thread_t *)tlp;
 8001438:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 800143c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8001440:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  REG_INSERT(tp);
 8001444:	f8ca e014 	str.w	lr, [sl, #20]
  chSchWakeupS(tp, MSG_OK);
 8001448:	f000 fffa 	bl	8002440 <chSchWakeupS.constprop.43>
 800144c:	f385 8811 	msr	BASEPRI, r5
	sdStart(&SD3, NULL);
        chThdCreateStatic(blinker, sizeof(blinker), NORMALPRIO+1, Thread1, NULL);

	palSetGroupMode(GPIOA, PAL_PORT_BIT(0), 0, PAL_MODE_INPUT_ANALOG);
 8001450:	2105      	movs	r1, #5
 8001452:	4638      	mov	r0, r7
 8001454:	f001 f89c 	bl	8002590 <_pal_lld_setgroupmode.constprop.6>
 8001458:	f384 8811 	msr	BASEPRI, r4
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 800145c:	f898 2000 	ldrb.w	r2, [r8]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 8001460:	f8c8 5004 	str.w	r5, [r8, #4]
 8001464:	42ba      	cmp	r2, r7
 8001466:	f000 818f 	beq.w	8001788 <main+0x858>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 800146a:	2302      	movs	r3, #2
 800146c:	2500      	movs	r5, #0
 800146e:	f888 3000 	strb.w	r3, [r8]
 8001472:	f385 8811 	msr	BASEPRI, r5
 8001476:	2720      	movs	r7, #32
 8001478:	f387 8811 	msr	BASEPRI, r7
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 800147c:	f04f 0b03 	mov.w	fp, #3
  adcp->samples  = samples;
 8001480:	4b9a      	ldr	r3, [pc, #616]	; (80016ec <main+0x7bc>)
  adcp->depth    = depth;
 8001482:	f8c8 700c 	str.w	r7, [r8, #12]
  adcp->samples  = samples;
 8001486:	f8c8 3008 	str.w	r3, [r8, #8]
  adcp->grpp     = grpp;
 800148a:	4b99      	ldr	r3, [pc, #612]	; (80016f0 <main+0x7c0>)
  adcp->state    = ADC_ACTIVE;
 800148c:	f888 b000 	strb.w	fp, [r8]
  adcp->grpp     = grpp;
 8001490:	f8c8 3010 	str.w	r3, [r8, #16]
  adc_lld_start_conversion(adcp);
 8001494:	f001 f83c 	bl	8002510 <adc_lld_start_conversion.constprop.22>
  return ch.rlist.current;
 8001498:	f8da 3018 	ldr.w	r3, [sl, #24]
  tp->u.wttrp = trp;
 800149c:	4a95      	ldr	r2, [pc, #596]	; (80016f4 <main+0x7c4>)
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800149e:	4658      	mov	r0, fp
  tp->u.wttrp = trp;
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  *trp = tp;
 80014a2:	f8c8 3014 	str.w	r3, [r8, #20]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80014a6:	f000 fc5b 	bl	8001d60 <chSchGoSleepS>
 80014aa:	f385 8811 	msr	BASEPRI, r5

  	/*
   	* Linear conversion.
   	*/
  	adcConvert(&ADCD1, &adcgrpcfg,(adcsample_t*) samples1, ADC_GRP1_BUF_DEPTH);
  	chThdSleepMilliseconds(1000);
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	9702      	str	r7, [sp, #8]
 80014b4:	f000 fe8c 	bl	80021d0 <chThdSleep>
 80014b8:	4b8c      	ldr	r3, [pc, #560]	; (80016ec <main+0x7bc>)
 80014ba:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8001730 <main+0x800>
 80014be:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 80014c2:	9902      	ldr	r1, [sp, #8]
 80014c4:	f381 8811 	msr	BASEPRI, r1
  adcp->samples  = samples;
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <main+0x7bc>)
  adcp->depth    = depth;
 80014ca:	f8c8 100c 	str.w	r1, [r8, #12]
  adcp->samples  = samples;
 80014ce:	f8c8 3008 	str.w	r3, [r8, #8]
  adcp->grpp     = grpp;
 80014d2:	4b87      	ldr	r3, [pc, #540]	; (80016f0 <main+0x7c0>)
  adcp->state    = ADC_ACTIVE;
 80014d4:	f888 b000 	strb.w	fp, [r8]
  adcp->grpp     = grpp;
 80014d8:	f8c8 3010 	str.w	r3, [r8, #16]
  adc_lld_start_conversion(adcp);
 80014dc:	f001 f818 	bl	8002510 <adc_lld_start_conversion.constprop.22>
 80014e0:	f8da 3018 	ldr.w	r3, [sl, #24]
  tp->u.wttrp = trp;
 80014e4:	4a83      	ldr	r2, [pc, #524]	; (80016f4 <main+0x7c4>)
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80014e6:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  *trp = tp;
 80014ea:	f8c8 3014 	str.w	r3, [r8, #20]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80014ee:	f000 fc37 	bl	8001d60 <chSchGoSleepS>
 80014f2:	f385 8811 	msr	BASEPRI, r5
	{
 		/*
     		* Making a request
     		*/
		adcConvert(&ADCD1, &adcgrpcfg, samples1, ADC_GRP1_BUF_DEPTH);
		mean=0;		
 80014f6:	2000      	movs	r0, #0
 80014f8:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <main+0x7c8>)
		for(int j = 0 ; j < ADC_GRP1_BUF_DEPTH ; j++) {
			mean += samples1[j];
 80014fa:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80014fe:	4418      	add	r0, r3
		for(int j = 0 ; j < ADC_GRP1_BUF_DEPTH ; j++) {
 8001500:	42a2      	cmp	r2, r4
			mean += samples1[j];
 8001502:	b280      	uxth	r0, r0
		for(int j = 0 ; j < ADC_GRP1_BUF_DEPTH ; j++) {
 8001504:	d1f9      	bne.n	80014fa <main+0x5ca>
		}	
		mean /= ADC_GRP1_BUF_DEPTH;
		
		mean= ((mean*3*4.8)+30);
 8001506:	0940      	lsrs	r0, r0, #5
 8001508:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800150c:	f7fe fff8 	bl	8000500 <__aeabi_i2d>
 8001510:	a373      	add	r3, pc, #460	; (adr r3, 80016e0 <main+0x7b0>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f859 	bl	80005cc <__aeabi_dmul>
 800151a:	2200      	movs	r2, #0
 800151c:	4b77      	ldr	r3, [pc, #476]	; (80016fc <main+0x7cc>)
 800151e:	f7fe fea3 	bl	8000268 <__adddf3>
 8001522:	f7ff fa8d 	bl	8000a40 <__aeabi_d2uiz>
 8001526:	b283      	uxth	r3, r0
 8001528:	461f      	mov	r7, r3
		TEMP = HR = CHECK_SUM = tmp = bit_counter = 0;
 800152a:	4b75      	ldr	r3, [pc, #468]	; (8001700 <main+0x7d0>)
	    	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 800152c:	2106      	movs	r1, #6
		TEMP = HR = CHECK_SUM = tmp = bit_counter = 0;
 800152e:	701d      	strb	r5, [r3, #0]
 8001530:	4b74      	ldr	r3, [pc, #464]	; (8001704 <main+0x7d4>)
	    	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 8001532:	f44f 7080 	mov.w	r0, #256	; 0x100
		TEMP = HR = CHECK_SUM = tmp = bit_counter = 0;
 8001536:	701d      	strb	r5, [r3, #0]
 8001538:	4b73      	ldr	r3, [pc, #460]	; (8001708 <main+0x7d8>)
 800153a:	701d      	strb	r5, [r3, #0]
 800153c:	4b73      	ldr	r3, [pc, #460]	; (800170c <main+0x7dc>)
 800153e:	701d      	strb	r5, [r3, #0]
	    	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 8001540:	f001 f826 	bl	8002590 <_pal_lld_setgroupmode.constprop.6>
	    	palWritePad(GPIOA, 8, PAL_LOW);
 8001544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001548:	4b71      	ldr	r3, [pc, #452]	; (8001710 <main+0x7e0>)
	    	chThdSleepMicroseconds(18000);
 800154a:	2012      	movs	r0, #18
	    	palWritePad(GPIOA, 8, PAL_LOW);
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	9303      	str	r3, [sp, #12]
	    	chThdSleepMicroseconds(18000);
 8001550:	f000 fe3e 	bl	80021d0 <chThdSleep>
	    	palWritePad(GPIOA, 8, PAL_HIGH);
 8001554:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001558:	9b03      	ldr	r3, [sp, #12]
		palSetPadMode(GPIOA, 8, PAL_MODE_INPUT_PULLUP);
 800155a:	2103      	movs	r1, #3
	    	palWritePad(GPIOA, 8, PAL_HIGH);
 800155c:	6118      	str	r0, [r3, #16]
		palSetPadMode(GPIOA, 8, PAL_MODE_INPUT_PULLUP);
 800155e:	f001 f817 	bl	8002590 <_pal_lld_setgroupmode.constprop.6>
 8001562:	9b02      	ldr	r3, [sp, #8]
 8001564:	f383 8811 	msr	BASEPRI, r3

  osalDbgAssert((icup->config->channel == ICU_CHANNEL_1) ||
                (icup->config->channel == ICU_CHANNEL_2),
                "invalid input");

  if (icup->state == ICU_STOP) {
 8001568:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
 800156a:	f8c6 9004 	str.w	r9, [r6, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	f000 80e0 	beq.w	8001734 <main+0x804>
    }
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 8001574:	68f3      	ldr	r3, [r6, #12]
 8001576:	68b2      	ldr	r2, [r6, #8]
 8001578:	601d      	str	r5, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800157a:	635d      	str	r5, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 800157c:	639d      	str	r5, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 800157e:	625d      	str	r5, [r3, #36]	; 0x24

  /* Timer configuration.*/
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
                    ~STM32_TIM_DIER_IRQ_MASK;
  psc = (icup->clock / icup->config->frequency) - 1;
 8001580:	f8d9 1004 	ldr.w	r1, [r9, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * icup->config->frequency) == icup->clock,
                "invalid frequency");
  icup->tim->PSC  = psc;
  icup->tim->ARR  = 0xFFFF;
 8001584:	f64f 70ff 	movw	r0, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
 8001588:	fbb2 f2f1 	udiv	r2, r2, r1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 800158c:	f8d9 1018 	ldr.w	r1, [r9, #24]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8001590:	611d      	str	r5, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8001592:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001596:	60d9      	str	r1, [r3, #12]

  if (icup->config->channel == ICU_CHANNEL_1) {
 8001598:	f899 1014 	ldrb.w	r1, [r9, #20]
  psc = (icup->clock / icup->config->frequency) - 1;
 800159c:	3a01      	subs	r2, #1
  icup->tim->PSC  = psc;
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 80015a0:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 80015a2:	2900      	cmp	r1, #0
 80015a4:	f040 8083 	bne.w	80016ae <main+0x77e>
    /* Selected input 1.
       CCMR1_CC1S = 01 = CH1 Input on TI1.
       CCMR1_CC2S = 10 = CH2 Input on TI1.*/
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80015a8:	f240 2201 	movw	r2, #513	; 0x201

    /* SMCR_TS  = 101, input is TI1FP1.
       SMCR_SMS = 100, reset on rising edge.*/
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80015ac:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 80015ae:	619a      	str	r2, [r3, #24]

    /* The CCER settings depend on the selected trigger mode.
       ICU_INPUT_ACTIVE_HIGH: Active on rising edge, idle on falling edge.
       ICU_INPUT_ACTIVE_LOW:  Active on falling edge, idle on rising edge.*/
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80015b0:	f899 2000 	ldrb.w	r2, [r9]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 80015b4:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	f040 80dd 	bne.w	8001776 <main+0x846>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80015bc:	2231      	movs	r2, #49	; 0x31
 80015be:	621a      	str	r2, [r3, #32]
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
                        STM32_TIM_CCER_CC2E;

    /* Direct pointers to the capture registers in order to make reading
       data faster from within callbacks.*/
    icup->wccrp = &icup->tim->CCR[1];
 80015c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 80015c4:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 80015c6:	6132      	str	r2, [r6, #16]
    icup->pccrp = &icup->tim->CCR[0];
 80015c8:	6173      	str	r3, [r6, #20]
  icu_lld_start(icup);
  icup->state = ICU_READY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	7033      	strb	r3, [r6, #0]
 80015ce:	f385 8811 	msr	BASEPRI, r5
 80015d2:	9802      	ldr	r0, [sp, #8]
 80015d4:	f380 8811 	msr	BASEPRI, r0
  /* Triggering an UG and clearing the IRQ status.*/
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  icup->tim->SR = 0;

  /* Timer is started.*/
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80015d8:	2105      	movs	r1, #5
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80015da:	68f3      	ldr	r3, [r6, #12]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80015e4:	611d      	str	r5, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80015e6:	6019      	str	r1, [r3, #0]

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 80015e8:	f886 b000 	strb.w	fp, [r6]
 80015ec:	f385 8811 	msr	BASEPRI, r5
 80015f0:	f380 8811 	msr	BASEPRI, r0
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 80015f4:	68f2      	ldr	r2, [r6, #12]
 80015f6:	68d3      	ldr	r3, [r2, #12]

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 80015f8:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 80015fc:	d10f      	bne.n	800161e <main+0x6ee>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 80015fe:	6871      	ldr	r1, [r6, #4]
    icup->tim->SR = 0;
 8001600:	6110      	str	r0, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8001602:	7d08      	ldrb	r0, [r1, #20]
 8001604:	2800      	cmp	r0, #0
 8001606:	d163      	bne.n	80016d0 <main+0x7a0>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 8001608:	6888      	ldr	r0, [r1, #8]
 800160a:	2800      	cmp	r0, #0
 800160c:	f000 80b9 	beq.w	8001782 <main+0x852>
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC1IE;
 8001610:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 8001614:	6909      	ldr	r1, [r1, #16]
 8001616:	b109      	cbz	r1, 800161c <main+0x6ec>
      dier |= STM32_TIM_DIER_UIE;
 8001618:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 800161c:	60d3      	str	r3, [r2, #12]
 800161e:	f385 8811 	msr	BASEPRI, r5
	     	*/
	   	
	    	icuStart(&ICUD1, &icucfg);
	    	icuStartCapture(&ICUD1);
	    	icuEnableNotifications(&ICUD1);
	    	chThdSleepMilliseconds(700);
 8001622:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001626:	f000 fdd3 	bl	80021d0 <chThdSleep>
 800162a:	9802      	ldr	r0, [sp, #8]
 800162c:	f380 8811 	msr	BASEPRI, r0

  osalSysLock();
  osalDbgAssert((icup->state == ICU_READY) || (icup->state == ICU_WAITING) ||
                (icup->state == ICU_ACTIVE),
                "invalid state");
  icuStopCaptureI(icup);
 8001630:	2102      	movs	r1, #2
  icup->tim->CR1   = 0;
 8001632:	68f3      	ldr	r3, [r6, #12]
 8001634:	601d      	str	r5, [r3, #0]
  icup->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	7031      	strb	r1, [r6, #0]
 800163a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	f385 8811 	msr	BASEPRI, r5
 8001644:	f380 8811 	msr	BASEPRI, r0
  if (icup->state == ICU_READY) {
 8001648:	7833      	ldrb	r3, [r6, #0]
 800164a:	428b      	cmp	r3, r1
 800164c:	d115      	bne.n	800167a <main+0x74a>
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800164e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001652:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 8001656:	68f2      	ldr	r2, [r6, #12]
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <main+0x7e4>)
 800165a:	6015      	str	r5, [r2, #0]
    icup->tim->DIER = 0;                    /* All IRQs disabled.           */
 800165c:	60d5      	str	r5, [r2, #12]
    icup->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 800165e:	6115      	str	r5, [r2, #16]
      rccDisableTIM1(FALSE);
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <main+0x7e8>)
 8001662:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8001666:	f883 5319 	strb.w	r5, [r3, #793]	; 0x319
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800166a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->IP[n] = 0U;
 800166e:	f883 531b 	strb.w	r5, [r3, #795]	; 0x31b
 8001672:	6993      	ldr	r3, [r2, #24]
 8001674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001678:	6193      	str	r3, [r2, #24]
  icup->state  = ICU_STOP;
 800167a:	2301      	movs	r3, #1
  icup->config = NULL;
 800167c:	6075      	str	r5, [r6, #4]
  icup->state  = ICU_STOP;
 800167e:	7033      	strb	r3, [r6, #0]
 8001680:	f385 8811 	msr	BASEPRI, r5
		#if ANSI_ESCAPE_CODE_ALLOWED
    		//chprintf(chp3, "\033[2J\033[1;1H");
		#endif
    		icuStopCapture(&ICUD1);
    		icuStop(&ICUD1);
		delay= TEMP*(-10)+500;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <main+0x7dc>)

		chprintf(chp3, "%d,%d,%d\n", TEMP, HR, mean);
 8001686:	4925      	ldr	r1, [pc, #148]	; (800171c <main+0x7ec>)
		delay= TEMP*(-10)+500;
 8001688:	781a      	ldrb	r2, [r3, #0]
		chprintf(chp3, "%d,%d,%d\n", TEMP, HR, mean);
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <main+0x7d8>)
		delay= TEMP*(-10)+500;
 800168c:	ebc2 1e42 	rsb	lr, r2, r2, lsl #5
 8001690:	ebc2 0e8e 	rsb	lr, r2, lr, lsl #2
		chprintf(chp3, "%d,%d,%d\n", TEMP, HR, mean);
 8001694:	781b      	ldrb	r3, [r3, #0]
		delay= TEMP*(-10)+500;
 8001696:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		chprintf(chp3, "%d,%d,%d\n", TEMP, HR, mean);
 800169a:	9700      	str	r7, [sp, #0]
		delay= TEMP*(-10)+500;
 800169c:	4f20      	ldr	r7, [pc, #128]	; (8001720 <main+0x7f0>)
 800169e:	f1ae 0e0c 	sub.w	lr, lr, #12
 80016a2:	f887 e000 	strb.w	lr, [r7]
		chprintf(chp3, "%d,%d,%d\n", TEMP, HR, mean);
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <main+0x7f4>)
 80016a8:	f000 ffaa 	bl	8002600 <chprintf.constprop.0>
 80016ac:	e709      	b.n	80014c2 <main+0x592>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80016ae:	f44f 7281 	mov.w	r2, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80016b2:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 80016b4:	619a      	str	r2, [r3, #24]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80016b6:	f899 2000 	ldrb.w	r2, [r9]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 80016ba:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d15d      	bne.n	800177c <main+0x84c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 80016c0:	2213      	movs	r2, #19
 80016c2:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 80016c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 80016c8:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 80016ca:	6132      	str	r2, [r6, #16]
    icup->pccrp = &icup->tim->CCR[1];
 80016cc:	6173      	str	r3, [r6, #20]
 80016ce:	e77c      	b.n	80015ca <main+0x69a>
      if (icup->config->width_cb != NULL)
 80016d0:	6888      	ldr	r0, [r1, #8]
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d19c      	bne.n	8001610 <main+0x6e0>
      dier |= STM32_TIM_DIER_CC2IE;
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	e79b      	b.n	8001614 <main+0x6e4>
 80016dc:	f3af 8000 	nop.w
 80016e0:	33333333 	.word	0x33333333
 80016e4:	40133333 	.word	0x40133333
 80016e8:	200008b0 	.word	0x200008b0
 80016ec:	20000b00 	.word	0x20000b00
 80016f0:	08002c4c 	.word	0x08002c4c
 80016f4:	20000b58 	.word	0x20000b58
 80016f8:	20000afe 	.word	0x20000afe
 80016fc:	403e0000 	.word	0x403e0000
 8001700:	200008a8 	.word	0x200008a8
 8001704:	20000b40 	.word	0x20000b40
 8001708:	20000820 	.word	0x20000820
 800170c:	2000086c 	.word	0x2000086c
 8001710:	40010800 	.word	0x40010800
 8001714:	e000e100 	.word	0xe000e100
 8001718:	40021000 	.word	0x40021000
 800171c:	08002c9c 	.word	0x08002c9c
 8001720:	20000af8 	.word	0x20000af8
 8001724:	20000b78 	.word	0x20000b78
 8001728:	08000d01 	.word	0x08000d01
 800172c:	08002c94 	.word	0x08002c94
 8001730:	20000800 	.word	0x20000800
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001734:	2070      	movs	r0, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001736:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 800173a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
      rccEnableTIM1(FALSE);
 800173e:	4a3b      	ldr	r2, [pc, #236]	; (800182c <main+0x8fc>)
 8001740:	6993      	ldr	r3, [r2, #24]
 8001742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001746:	6193      	str	r3, [r2, #24]
      rccResetTIM1();
 8001748:	f8d2 c00c 	ldr.w	ip, [r2, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <main+0x900>)
 800174e:	f44c 6c00 	orr.w	ip, ip, #2048	; 0x800
 8001752:	f8c2 c00c 	str.w	ip, [r2, #12]
 8001756:	60d5      	str	r5, [r2, #12]
      icup->clock = STM32_TIMCLK2;
 8001758:	4a36      	ldr	r2, [pc, #216]	; (8001834 <main+0x904>)
 800175a:	f883 0319 	strb.w	r0, [r3, #793]	; 0x319
 800175e:	60b2      	str	r2, [r6, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001760:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001764:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001768:	f883 031b 	strb.w	r0, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800176c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001770:	6019      	str	r1, [r3, #0]
 8001772:	68f3      	ldr	r3, [r6, #12]
 8001774:	e704      	b.n	8001580 <main+0x650>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8001776:	2213      	movs	r2, #19
 8001778:	621a      	str	r2, [r3, #32]
 800177a:	e721      	b.n	80015c0 <main+0x690>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800177c:	2231      	movs	r2, #49	; 0x31
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	e7a0      	b.n	80016c4 <main+0x794>
      dier |= STM32_TIM_DIER_CC1IE;
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	e745      	b.n	8001614 <main+0x6e4>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001788:	492b      	ldr	r1, [pc, #172]	; (8001838 <main+0x908>)
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 800178a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800178e:	680c      	ldr	r4, [r1, #0]
 8001790:	7c59      	ldrb	r1, [r3, #17]
 8001792:	408a      	lsls	r2, r1
 8001794:	4222      	tst	r2, r4
 8001796:	d146      	bne.n	8001826 <main+0x8f6>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001798:	4d28      	ldr	r5, [pc, #160]	; (800183c <main+0x90c>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800179a:	4829      	ldr	r0, [pc, #164]	; (8001840 <main+0x910>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800179c:	4f28      	ldr	r7, [pc, #160]	; (8001840 <main+0x910>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800179e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80017a2:	f847 5031 	str.w	r5, [r7, r1, lsl #3]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80017a6:	0661      	lsls	r1, r4, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 80017a8:	f8c0 8004 	str.w	r8, [r0, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80017ac:	d104      	bne.n	80017b8 <main+0x888>
    rccEnableDMA1(false);
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <main+0x8fc>)
 80017b0:	6941      	ldr	r1, [r0, #20]
 80017b2:	f041 0101 	orr.w	r1, r1, #1
 80017b6:	6141      	str	r1, [r0, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80017b8:	250e      	movs	r5, #14
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80017ba:	2700      	movs	r7, #0
  dmaStreamDisable(dmastp);
 80017bc:	6858      	ldr	r0, [r3, #4]
 80017be:	6801      	ldr	r1, [r0, #0]
 80017c0:	f021 010f 	bic.w	r1, r1, #15
 80017c4:	6001      	str	r1, [r0, #0]
 80017c6:	f893 e010 	ldrb.w	lr, [r3, #16]
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	fa05 f50e 	lsl.w	r5, r5, lr
 80017d0:	604d      	str	r5, [r1, #4]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80017d2:	6899      	ldr	r1, [r3, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80017d4:	6007      	str	r7, [r0, #0]
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80017d6:	420c      	tst	r4, r1
 80017d8:	d115      	bne.n	8001806 <main+0x8d6>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80017da:	2501      	movs	r5, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80017dc:	2760      	movs	r7, #96	; 0x60
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 80017de:	7c99      	ldrb	r1, [r3, #18]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80017e0:	094b      	lsrs	r3, r1, #5
 80017e2:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80017e4:	f101 4e60 	add.w	lr, r1, #3758096384	; 0xe0000000
 80017e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80017ec:	f001 011f 	and.w	r1, r1, #31
 80017f0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80017f4:	fa05 f101 	lsl.w	r1, r5, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80017f8:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
 80017fc:	f88e 7300 	strb.w	r7, [lr, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001800:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001804:	6019      	str	r1, [r3, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <main+0x908>)
 8001808:	4322      	orrs	r2, r4
 800180a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 800180c:	2100      	movs	r1, #0
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <main+0x914>)
      rccEnableADC1(FALSE);
 8001810:	4c06      	ldr	r4, [pc, #24]	; (800182c <main+0x8fc>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8001812:	6083      	str	r3, [r0, #8]
      rccEnableADC1(FALSE);
 8001814:	69a3      	ldr	r3, [r4, #24]
    adcp->adc->CR1 = 0;
 8001816:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
      rccEnableADC1(FALSE);
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	61a3      	str	r3, [r4, #24]
    adcp->adc->CR1 = 0;
 8001820:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 8001822:	6091      	str	r1, [r2, #8]
 8001824:	e621      	b.n	800146a <main+0x53a>
 8001826:	6858      	ldr	r0, [r3, #4]
 8001828:	e7f0      	b.n	800180c <main+0x8dc>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	e000e100 	.word	0xe000e100
 8001834:	016e3600 	.word	0x016e3600
 8001838:	20000afc 	.word	0x20000afc
 800183c:	08002221 	.word	0x08002221
 8001840:	20000870 	.word	0x20000870
 8001844:	4001244c 	.word	0x4001244c
	...

08001850 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <__early_init+0x74>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001852:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	f041 0101 	orr.w	r1, r1, #1
 800185a:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	0798      	lsls	r0, r3, #30
 8001860:	d5fc      	bpl.n	800185c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001862:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001864:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001866:	4917      	ldr	r1, [pc, #92]	; (80018c4 <__early_init+0x74>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001868:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800186c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800186e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001870:	684b      	ldr	r3, [r1, #4]
 8001872:	f013 0f0c 	tst.w	r3, #12
 8001876:	d1fb      	bne.n	8001870 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001878:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <__early_init+0x74>)
  RCC->CR |= RCC_CR_HSEON;
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	0399      	lsls	r1, r3, #14
 8001886:	d5fc      	bpl.n	8001882 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001888:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <__early_init+0x74>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001898:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800189a:	680b      	ldr	r3, [r1, #0]
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	d5fc      	bpl.n	800189a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80018a0:	2210      	movs	r2, #16
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 80018a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  FLASH->ACR = STM32_FLASHBITS;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 80018a8:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 80018aa:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80018ac:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <__early_init+0x74>)
  RCC->CFGR |= STM32_SW;
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80018b6:	6853      	ldr	r3, [r2, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d1fa      	bne.n	80018b6 <__early_init+0x66>
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40022000 	.word	0x40022000
 80018cc:	00000000 	.word	0x00000000

080018d0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80018d4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80018d8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80018da:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80018de:	2300      	movs	r3, #0
 80018e0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	0000      	movs	r0, r0
	...

080018f0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80018f0:	b470      	push	{r4, r5, r6}
 80018f2:	2320      	movs	r3, #32
 80018f4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80018f8:	4c0d      	ldr	r4, [pc, #52]	; (8001930 <chCoreAllocAlignedWithOffset+0x40>)
 80018fa:	1e4d      	subs	r5, r1, #1
 80018fc:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80018fe:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001900:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 8001902:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001904:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 8001906:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001908:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800190a:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 800190c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800190e:	4293      	cmp	r3, r2
 8001910:	d807      	bhi.n	8001922 <chCoreAllocAlignedWithOffset+0x32>
 8001912:	429e      	cmp	r6, r3
 8001914:	d805      	bhi.n	8001922 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8001916:	6023      	str	r3, [r4, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800191e:	bc70      	pop	{r4, r5, r6}
 8001920:	4770      	bx	lr
    return NULL;
 8001922:	2000      	movs	r0, #0
 8001924:	2300      	movs	r3, #0
 8001926:	f383 8811 	msr	BASEPRI, r3
}
 800192a:	bc70      	pop	{r4, r5, r6}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000ad0 	.word	0x20000ad0
	...

08001940 <wakeup>:
 8001940:	2320      	movs	r3, #32
 8001942:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8001946:	f890 3020 	ldrb.w	r3, [r0, #32]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d80e      	bhi.n	800196c <wakeup+0x2c>
 800194e:	e8df f003 	tbb	[pc, r3]
 8001952:	0d28      	.short	0x0d28
 8001954:	0408240d 	.word	0x0408240d
 8001958:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800195a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800195c:	6893      	ldr	r3, [r2, #8]
 800195e:	3301      	adds	r3, #1
 8001960:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001962:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001966:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001968:	6802      	ldr	r2, [r0, #0]
 800196a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800196c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800196e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8001970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001974:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001978:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800197a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800197e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	428a      	cmp	r2, r1
 8001984:	d2fb      	bcs.n	800197e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	2100      	movs	r1, #0
  tp->queue.next             = cp;
 800198a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800198c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800198e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001990:	6058      	str	r0, [r3, #4]
 8001992:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001996:	bc10      	pop	{r4}
 8001998:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800199a:	2200      	movs	r2, #0
 800199c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e7e4      	b.n	800196c <wakeup+0x2c>
 80019a2:	2300      	movs	r3, #0
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000bf4 	.word	0x20000bf4

080019b0 <_idle_thread.lto_priv.45>:
static void _idle_thread(void *p) {
 80019b0:	e7fe      	b.n	80019b0 <_idle_thread.lto_priv.45>
 80019b2:	bf00      	nop
	...

080019c0 <_port_irq_epilogue>:
 80019c0:	2320      	movs	r3, #32
 80019c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_port_irq_epilogue+0x4c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80019ce:	d102      	bne.n	80019d6 <_port_irq_epilogue+0x16>
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80019da:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80019de:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 80019e2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 80019e6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80019ea:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <_port_irq_epilogue+0x50>)
 80019f0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80019f2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80019f4:	6889      	ldr	r1, [r1, #8]
 80019f6:	6892      	ldr	r2, [r2, #8]
 80019f8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80019fa:	bf8c      	ite	hi
 80019fc:	4a05      	ldrhi	r2, [pc, #20]	; (8001a14 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80019fe:	4a06      	ldrls	r2, [pc, #24]	; (8001a18 <_port_irq_epilogue+0x58>)
 8001a00:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	20000bf4 	.word	0x20000bf4
 8001a14:	08000255 	.word	0x08000255
 8001a18:	08000258 	.word	0x08000258
 8001a1c:	00000000 	.word	0x00000000

08001a20 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001a20:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8001a22:	4d24      	ldr	r5, [pc, #144]	; (8001ab4 <VectorA4+0x94>)
 8001a24:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001a26:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 8001a28:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4014      	ands	r4, r2
 8001a2e:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8001a30:	43d2      	mvns	r2, r2
 8001a32:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001a34:	7d0b      	ldrb	r3, [r1, #20]
 8001a36:	b993      	cbnz	r3, 8001a5e <VectorA4+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001a38:	0760      	lsls	r0, r4, #29
 8001a3a:	d52e      	bpl.n	8001a9a <VectorA4+0x7a>
      _icu_isr_invoke_width_cb(icup);
 8001a3c:	782b      	ldrb	r3, [r5, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d027      	beq.n	8001a92 <VectorA4+0x72>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001a42:	07a1      	lsls	r1, r4, #30
 8001a44:	d412      	bmi.n	8001a6c <VectorA4+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8001a46:	07e4      	lsls	r4, r4, #31
 8001a48:	d505      	bpl.n	8001a56 <VectorA4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 8001a4a:	686b      	ldr	r3, [r5, #4]
 8001a4c:	4819      	ldr	r0, [pc, #100]	; (8001ab4 <VectorA4+0x94>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4798      	blx	r3
 8001a52:	2303      	movs	r3, #3
 8001a54:	702b      	strb	r3, [r5, #0]
}
 8001a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8001a5a:	f7ff bfb1 	b.w	80019c0 <_port_irq_epilogue>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001a5e:	07a2      	lsls	r2, r4, #30
 8001a60:	d50b      	bpl.n	8001a7a <VectorA4+0x5a>
      _icu_isr_invoke_width_cb(icup);
 8001a62:	782b      	ldrb	r3, [r5, #0]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d004      	beq.n	8001a72 <VectorA4+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001a68:	0763      	lsls	r3, r4, #29
 8001a6a:	d5ec      	bpl.n	8001a46 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	702b      	strb	r3, [r5, #0]
 8001a70:	e7e9      	b.n	8001a46 <VectorA4+0x26>
      _icu_isr_invoke_width_cb(icup);
 8001a72:	688b      	ldr	r3, [r1, #8]
 8001a74:	b1d3      	cbz	r3, 8001aac <VectorA4+0x8c>
 8001a76:	4628      	mov	r0, r5
 8001a78:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001a7a:	0763      	lsls	r3, r4, #29
 8001a7c:	d5e3      	bpl.n	8001a46 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001a7e:	782b      	ldrb	r3, [r5, #0]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d1f3      	bne.n	8001a6c <VectorA4+0x4c>
 8001a84:	6869      	ldr	r1, [r5, #4]
 8001a86:	68cb      	ldr	r3, [r1, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <VectorA4+0x4c>
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <VectorA4+0x94>)
 8001a8e:	4798      	blx	r3
 8001a90:	e7ec      	b.n	8001a6c <VectorA4+0x4c>
      _icu_isr_invoke_width_cb(icup);
 8001a92:	688b      	ldr	r3, [r1, #8]
 8001a94:	b13b      	cbz	r3, 8001aa6 <VectorA4+0x86>
 8001a96:	4628      	mov	r0, r5
 8001a98:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001a9a:	07a1      	lsls	r1, r4, #30
 8001a9c:	d5d3      	bpl.n	8001a46 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001a9e:	782b      	ldrb	r3, [r5, #0]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d1e3      	bne.n	8001a6c <VectorA4+0x4c>
 8001aa4:	e7ee      	b.n	8001a84 <VectorA4+0x64>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001aa6:	07a0      	lsls	r0, r4, #30
 8001aa8:	d4ed      	bmi.n	8001a86 <VectorA4+0x66>
 8001aaa:	e7cc      	b.n	8001a46 <VectorA4+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001aac:	0762      	lsls	r2, r4, #29
 8001aae:	d4ea      	bmi.n	8001a86 <VectorA4+0x66>
 8001ab0:	e7c9      	b.n	8001a46 <VectorA4+0x26>
 8001ab2:	bf00      	nop
 8001ab4:	20000824 	.word	0x20000824
	...

08001ac0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001ac4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ac8:	6923      	ldr	r3, [r4, #16]
 8001aca:	079b      	lsls	r3, r3, #30
 8001acc:	d403      	bmi.n	8001ad6 <VectorB0+0x16>
}
 8001ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001ad2:	f7ff bf75 	b.w	80019c0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8001ad6:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ad8:	2520      	movs	r5, #32
 8001ada:	6127      	str	r7, [r4, #16]
 8001adc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8001ae0:	4e1e      	ldr	r6, [pc, #120]	; (8001b5c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001ae4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.next;
 8001ae8:	69f3      	ldr	r3, [r6, #28]
 8001aea:	b280      	uxth	r0, r0
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001aec:	eba0 010e 	sub.w	r1, r0, lr
 8001af0:	891a      	ldrh	r2, [r3, #8]
 8001af2:	b289      	uxth	r1, r1
 8001af4:	4291      	cmp	r1, r2
 8001af6:	f106 081c 	add.w	r8, r6, #28
 8001afa:	d31b      	bcc.n	8001b34 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001afc:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.lasttime += vtp->delta;
 8001afe:	4472      	add	r2, lr
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001b00:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
 8001b02:	84f2      	strh	r2, [r6, #38]	; 0x26
    fn = vtp->func;
 8001b04:	68da      	ldr	r2, [r3, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001b06:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
 8001b0a:	61f1      	str	r1, [r6, #28]
    vtp->func = NULL;
 8001b0c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001b0e:	bf08      	it	eq
 8001b10:	60e7      	streq	r7, [r4, #12]
 8001b12:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8001b16:	6918      	ldr	r0, [r3, #16]
 8001b18:	4790      	blx	r2
 8001b1a:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 8001b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001b20:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8001b24:	69f3      	ldr	r3, [r6, #28]
 8001b26:	b280      	uxth	r0, r0
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8001b28:	eba0 010e 	sub.w	r1, r0, lr
 8001b2c:	891a      	ldrh	r2, [r3, #8]
 8001b2e:	b289      	uxth	r1, r1
 8001b30:	428a      	cmp	r2, r1
 8001b32:	d9e3      	bls.n	8001afc <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001b34:	4543      	cmp	r3, r8
 8001b36:	d00a      	beq.n	8001b4e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8001b38:	4472      	add	r2, lr
 8001b3a:	1a12      	subs	r2, r2, r0
 8001b3c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8001b3e:	2a02      	cmp	r2, #2
 8001b40:	bf2c      	ite	cs
 8001b42:	1882      	addcs	r2, r0, r2
 8001b44:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f383 8811 	msr	BASEPRI, r3
}
 8001b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8001b58:	f7ff bf32 	b.w	80019c0 <_port_irq_epilogue>
 8001b5c:	20000bf4 	.word	0x20000bf4

08001b60 <Vector84>:
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <Vector84+0x30>)
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <Vector84+0x34>)
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	0e09      	lsrs	r1, r1, #24
 8001b6a:	f001 010e 	and.w	r1, r1, #14
 8001b6e:	4211      	tst	r1, r2
 8001b70:	d00b      	beq.n	8001b8a <Vector84+0x2a>
 8001b72:	4809      	ldr	r0, [pc, #36]	; (8001b98 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001b74:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001b76:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b78:	060a      	lsls	r2, r1, #24
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	b10c      	cbz	r4, 8001b82 <Vector84+0x22>
 8001b7e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001b80:	47a0      	blx	r4
}
 8001b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b86:	f7ff bf1b 	b.w	80019c0 <_port_irq_epilogue>
 8001b8a:	f7ff bf19 	b.w	80019c0 <_port_irq_epilogue>
 8001b8e:	bf00      	nop
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020080 	.word	0x40020080
 8001b98:	20000870 	.word	0x20000870
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <Vector80>:
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <Vector80+0x30>)
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <Vector80+0x34>)
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	0d09      	lsrs	r1, r1, #20
 8001baa:	f001 010e 	and.w	r1, r1, #14
 8001bae:	4211      	tst	r1, r2
 8001bb0:	d00b      	beq.n	8001bca <Vector80+0x2a>
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001bb4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001bb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bb8:	050a      	lsls	r2, r1, #20
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	b10c      	cbz	r4, 8001bc2 <Vector80+0x22>
 8001bbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001bc0:	47a0      	blx	r4
}
 8001bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001bc6:	f7ff befb 	b.w	80019c0 <_port_irq_epilogue>
 8001bca:	f7ff bef9 	b.w	80019c0 <_port_irq_epilogue>
 8001bce:	bf00      	nop
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	4002006c 	.word	0x4002006c
 8001bd8:	20000870 	.word	0x20000870
 8001bdc:	00000000 	.word	0x00000000

08001be0 <Vector7C>:
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <Vector7C+0x30>)
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <Vector7C+0x34>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	0c09      	lsrs	r1, r1, #16
 8001bea:	f001 010e 	and.w	r1, r1, #14
 8001bee:	4211      	tst	r1, r2
 8001bf0:	d00b      	beq.n	8001c0a <Vector7C+0x2a>
 8001bf2:	4809      	ldr	r0, [pc, #36]	; (8001c18 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001bf4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001bf6:	6a04      	ldr	r4, [r0, #32]
 8001bf8:	040a      	lsls	r2, r1, #16
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	b10c      	cbz	r4, 8001c02 <Vector7C+0x22>
 8001bfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001c00:	47a0      	blx	r4
}
 8001c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c06:	f7ff bedb 	b.w	80019c0 <_port_irq_epilogue>
 8001c0a:	f7ff bed9 	b.w	80019c0 <_port_irq_epilogue>
 8001c0e:	bf00      	nop
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020058 	.word	0x40020058
 8001c18:	20000870 	.word	0x20000870
 8001c1c:	00000000 	.word	0x00000000

08001c20 <Vector78>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <Vector78+0x30>)
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <Vector78+0x34>)
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	0b09      	lsrs	r1, r1, #12
 8001c2a:	f001 010e 	and.w	r1, r1, #14
 8001c2e:	4211      	tst	r1, r2
 8001c30:	d00b      	beq.n	8001c4a <Vector78+0x2a>
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001c34:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001c36:	6984      	ldr	r4, [r0, #24]
 8001c38:	030a      	lsls	r2, r1, #12
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	b10c      	cbz	r4, 8001c42 <Vector78+0x22>
 8001c3e:	69c0      	ldr	r0, [r0, #28]
 8001c40:	47a0      	blx	r4
}
 8001c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c46:	f7ff bebb 	b.w	80019c0 <_port_irq_epilogue>
 8001c4a:	f7ff beb9 	b.w	80019c0 <_port_irq_epilogue>
 8001c4e:	bf00      	nop
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020044 	.word	0x40020044
 8001c58:	20000870 	.word	0x20000870
 8001c5c:	00000000 	.word	0x00000000

08001c60 <Vector74>:
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <Vector74+0x30>)
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <Vector74+0x34>)
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	0a09      	lsrs	r1, r1, #8
 8001c6a:	f001 010e 	and.w	r1, r1, #14
 8001c6e:	4211      	tst	r1, r2
 8001c70:	d00b      	beq.n	8001c8a <Vector74+0x2a>
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001c74:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001c76:	6904      	ldr	r4, [r0, #16]
 8001c78:	020a      	lsls	r2, r1, #8
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	b10c      	cbz	r4, 8001c82 <Vector74+0x22>
 8001c7e:	6940      	ldr	r0, [r0, #20]
 8001c80:	47a0      	blx	r4
}
 8001c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001c86:	f7ff be9b 	b.w	80019c0 <_port_irq_epilogue>
 8001c8a:	f7ff be99 	b.w	80019c0 <_port_irq_epilogue>
 8001c8e:	bf00      	nop
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020030 	.word	0x40020030
 8001c98:	20000870 	.word	0x20000870
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <Vector70>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <Vector70+0x30>)
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <Vector70+0x34>)
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	0909      	lsrs	r1, r1, #4
 8001caa:	f001 010e 	and.w	r1, r1, #14
 8001cae:	4211      	tst	r1, r2
 8001cb0:	d00b      	beq.n	8001cca <Vector70+0x2a>
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001cb4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001cb6:	6884      	ldr	r4, [r0, #8]
 8001cb8:	010a      	lsls	r2, r1, #4
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	b10c      	cbz	r4, 8001cc2 <Vector70+0x22>
 8001cbe:	68c0      	ldr	r0, [r0, #12]
 8001cc0:	47a0      	blx	r4
}
 8001cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001cc6:	f7ff be7b 	b.w	80019c0 <_port_irq_epilogue>
 8001cca:	f7ff be79 	b.w	80019c0 <_port_irq_epilogue>
 8001cce:	bf00      	nop
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	4002001c 	.word	0x4002001c
 8001cd8:	20000870 	.word	0x20000870
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001ce0:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <Vector6C+0x28>)
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <Vector6C+0x2c>)
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	f001 010e 	and.w	r1, r1, #14
 8001cee:	4211      	tst	r1, r2
 8001cf0:	d005      	beq.n	8001cfe <Vector6C+0x1e>
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <Vector6C+0x30>)
 8001cf4:	6059      	str	r1, [r3, #4]
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	b10b      	cbz	r3, 8001cfe <Vector6C+0x1e>
 8001cfa:	6850      	ldr	r0, [r2, #4]
 8001cfc:	4798      	blx	r3
}
 8001cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001d02:	f7ff be5d 	b.w	80019c0 <_port_irq_epilogue>
 8001d06:	bf00      	nop
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020008 	.word	0x40020008
 8001d10:	20000870 	.word	0x20000870
	...

08001d20 <chSchDoReschedule>:
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001d20:	2101      	movs	r1, #1
void chSchDoReschedule(void) {
 8001d22:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8001d24:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8001d28:	6810      	ldr	r0, [r2, #0]
 8001d2a:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 8001d2c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d2e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001d30:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8001d34:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8001d36:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001d38:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8001d3a:	f884 5020 	strb.w	r5, [r4, #32]
 8001d3e:	e000      	b.n	8001d42 <chSchDoReschedule+0x22>
 8001d40:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	4291      	cmp	r1, r2
 8001d46:	d3fb      	bcc.n	8001d40 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8001d48:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001d4a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
 8001d4c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001d4e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001d50:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001d52:	605c      	str	r4, [r3, #4]
}
 8001d54:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8001d56:	f7fe ba6d 	b.w	8000234 <_port_switch>
 8001d5a:	bf00      	nop
 8001d5c:	20000bf4 	.word	0x20000bf4

08001d60 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001d60:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8001d62:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <chSchGoSleepS+0x24>)
 8001d66:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8001d68:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 8001d6a:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8001d6e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8001d70:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d72:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8001d74:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8001d78:	601c      	str	r4, [r3, #0]
}
 8001d7a:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001d7c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8001d7e:	f7fe ba59 	b.w	8000234 <_port_switch>
 8001d82:	bf00      	nop
 8001d84:	20000bf4 	.word	0x20000bf4
	...

08001d90 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
 8001d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8001d96:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001d98:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8001d9a:	d055      	beq.n	8001e48 <chSchGoSleepTimeoutS+0xb8>
    chVTDoSetI(&vt, time, wakeup, currp);
 8001d9c:	4c4c      	ldr	r4, [pc, #304]	; (8001ed0 <chSchGoSleepTimeoutS+0x140>)
  return (systime_t)STM32_ST_TIM->CNT;
 8001d9e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001da2:	4625      	mov	r5, r4
 8001da4:	4607      	mov	r7, r0
 8001da6:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 8001daa:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
  vtp->par = par;
 8001dae:	69a6      	ldr	r6, [r4, #24]
 8001db0:	2902      	cmp	r1, #2
  vtp->func = vtfunc;
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <chSchGoSleepTimeoutS+0x144>)
 8001db4:	bf38      	it	cc
 8001db6:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001db8:	42a8      	cmp	r0, r5
  vtp->par = par;
 8001dba:	9605      	str	r6, [sp, #20]
  vtp->func = vtfunc;
 8001dbc:	9304      	str	r3, [sp, #16]
 8001dbe:	b296      	uxth	r6, r2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001dc0:	d06e      	beq.n	8001ea0 <chSchGoSleepTimeoutS+0x110>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8001dc2:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26

    if (delta < now - ch.vtlist.lasttime) {
 8001dc6:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.lasttime + delay;
 8001dc8:	eba6 060c 	sub.w	r6, r6, ip
 8001dcc:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.lasttime) {
 8001dce:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.lasttime + delay;
 8001dd2:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.lasttime) {
 8001dd4:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8001dd6:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.lasttime) {
 8001dd8:	db31      	blt.n	8001e3e <chSchGoSleepTimeoutS+0xae>
      p = p->next;
    }
    else if (delta < p->delta) {
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d33b      	bcc.n	8001e56 <chSchGoSleepTimeoutS+0xc6>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d905      	bls.n	8001dee <chSchGoSleepTimeoutS+0x5e>
    delta -= p->delta;
    p = p->next;
 8001de2:	6800      	ldr	r0, [r0, #0]
    delta -= p->delta;
 8001de4:	1a9b      	subs	r3, r3, r2
  while (p->delta < delta) {
 8001de6:	8902      	ldrh	r2, [r0, #8]
    delta -= p->delta;
 8001de8:	b29b      	uxth	r3, r3
  while (p->delta < delta) {
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3f9      	bcc.n	8001de2 <chSchGoSleepTimeoutS+0x52>
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
 8001dee:	f64f 71ff 	movw	r1, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
 8001df2:	6842      	ldr	r2, [r0, #4]
  vtp->prev->next = vtp;
 8001df4:	ae01      	add	r6, sp, #4
  vtp->prev = vtp->next->prev;
 8001df6:	9202      	str	r2, [sp, #8]
  vtp->next = p;
 8001df8:	9001      	str	r0, [sp, #4]
  vtp->prev->next = vtp;
 8001dfa:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
 8001dfc:	6046      	str	r6, [r0, #4]
  vtp->delta = delta
 8001dfe:	f8ad 300c 	strh.w	r3, [sp, #12]
  p->delta -= delta;
 8001e02:	8902      	ldrh	r2, [r0, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	8103      	strh	r3, [r0, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001e08:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	f7ff ffa8 	bl	8001d60 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001e10:	9b04      	ldr	r3, [sp, #16]
 8001e12:	b183      	cbz	r3, 8001e36 <chSchGoSleepTimeoutS+0xa6>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001e14:	69e3      	ldr	r3, [r4, #28]
 8001e16:	42b3      	cmp	r3, r6
 8001e18:	d023      	beq.n	8001e62 <chSchGoSleepTimeoutS+0xd2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 8001e1a:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
 8001e1c:	9a02      	ldr	r2, [sp, #8]
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001e22:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e24:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 8001e26:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001e28:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e2a:	d004      	beq.n	8001e36 <chSchGoSleepTimeoutS+0xa6>
      vtp->next->delta += vtp->delta;
 8001e2c:	891a      	ldrh	r2, [r3, #8]
 8001e2e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001e32:	440a      	add	r2, r1
 8001e34:	811a      	strh	r2, [r3, #8]
  return currp->u.rdymsg;
 8001e36:	69a3      	ldr	r3, [r4, #24]
}
 8001e38:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001e3a:	b007      	add	sp, #28
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
 8001e3e:	6800      	ldr	r0, [r0, #0]
      delta -= p->delta;
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	8902      	ldrh	r2, [r0, #8]
 8001e46:	e7ca      	b.n	8001dde <chSchGoSleepTimeoutS+0x4e>
    chSchGoSleepS(newstate);
 8001e48:	f7ff ff8a 	bl	8001d60 <chSchGoSleepS>
 8001e4c:	4c20      	ldr	r4, [pc, #128]	; (8001ed0 <chSchGoSleepTimeoutS+0x140>)
  return currp->u.rdymsg;
 8001e4e:	69a3      	ldr	r3, [r4, #24]
}
 8001e50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001e52:	b007      	add	sp, #28
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8001e56:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e5a:	b289      	uxth	r1, r1
 8001e5c:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8001e60:	e7bd      	b.n	8001dde <chSchGoSleepTimeoutS+0x4e>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001e62:	2300      	movs	r3, #0
  ch.vtlist.next = vtp->next;
 8001e64:	9e01      	ldr	r6, [sp, #4]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e66:	42ae      	cmp	r6, r5
  ch.vtlist.next = vtp->next;
 8001e68:	61e6      	str	r6, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001e6a:	6075      	str	r5, [r6, #4]
  vtp->func = NULL;
 8001e6c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e6e:	d02a      	beq.n	8001ec6 <chSchGoSleepTimeoutS+0x136>
  return (systime_t)STM32_ST_TIM->CNT;
 8001e70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e74:	6a42      	ldr	r2, [r0, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001e76:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
  ch.vtlist.next->delta += vtp->delta;
 8001e78:	8933      	ldrh	r3, [r6, #8]
 8001e7a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8001e7e:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001e80:	1a51      	subs	r1, r2, r1
  ch.vtlist.next->delta += vtp->delta;
 8001e82:	442b      	add	r3, r5
 8001e84:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001e86:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001e88:	428b      	cmp	r3, r1
  ch.vtlist.next->delta += vtp->delta;
 8001e8a:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.next->delta) {
 8001e8c:	d9d3      	bls.n	8001e36 <chSchGoSleepTimeoutS+0xa6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	bf2c      	ite	cs
 8001e96:	18d3      	addcs	r3, r2, r3
 8001e98:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	6343      	str	r3, [r0, #52]	; 0x34
 8001e9e:	e7ca      	b.n	8001e36 <chSchGoSleepTimeoutS+0xa6>
  STM32_ST_TIM->SR     = 0;
 8001ea0:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001ea2:	2202      	movs	r2, #2
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8001ea4:	198b      	adds	r3, r1, r6
      ch.vtlist.lasttime = now;
 8001ea6:	84e6      	strh	r6, [r4, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001ea8:	b29b      	uxth	r3, r3
      ch.vtlist.next = vtp;
 8001eaa:	ae01      	add	r6, sp, #4
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8001eac:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001eae:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 8001eb0:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.next = vtp;
 8001eb4:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 8001eb6:	6226      	str	r6, [r4, #32]
 8001eb8:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001ebc:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001ec0:	f8ce 200c 	str.w	r2, [lr, #12]
 8001ec4:	e7a1      	b.n	8001e0a <chSchGoSleepTimeoutS+0x7a>
  STM32_ST_TIM->DIER = 0;
 8001ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eca:	60d3      	str	r3, [r2, #12]
 8001ecc:	e7b3      	b.n	8001e36 <chSchGoSleepTimeoutS+0xa6>
 8001ece:	bf00      	nop
 8001ed0:	20000bf4 	.word	0x20000bf4
 8001ed4:	08001941 	.word	0x08001941
	...

08001ee0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001ee0:	b161      	cbz	r1, 8001efc <chThdEnqueueTimeoutS+0x1c>
 8001ee2:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001ee6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8001ee8:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 8001eea:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001eec:	2004      	movs	r0, #4
 8001eee:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8001ef2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001ef4:	6053      	str	r3, [r2, #4]
}
 8001ef6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001ef8:	f7ff bf4a 	b.w	8001d90 <chSchGoSleepTimeoutS>
}
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000bf4 	.word	0x20000bf4
	...

08001f10 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	469a      	mov	sl, r3
 8001f16:	b083      	sub	sp, #12
 8001f18:	4604      	mov	r4, r0
 8001f1a:	460d      	mov	r5, r1
 8001f1c:	4616      	mov	r6, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8001f1e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001f22:	2320      	movs	r3, #32
 8001f24:	f383 8811 	msr	BASEPRI, r3
  size_t w = 0;
 8001f28:	2700      	movs	r7, #0
  return (systime_t)STM32_ST_TIM->CNT;
 8001f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2e:	46bb      	mov	fp, r7
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001f32:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8001f36:	4453      	add	r3, sl
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001f3c:	fa1f f989 	uxth.w	r9, r9
    while (oqIsFullI(oqp)) {
 8001f40:	68a3      	ldr	r3, [r4, #8]
 8001f42:	b1fb      	cbz	r3, 8001f84 <oqWriteTimeout+0x74>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001f44:	6962      	ldr	r2, [r4, #20]
    oqp->q_counter--;
 8001f46:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001f48:	1c51      	adds	r1, r2, #1
    oqp->q_counter--;
 8001f4a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001f4c:	6161      	str	r1, [r4, #20]
    oqp->q_counter--;
 8001f4e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001f50:	782b      	ldrb	r3, [r5, #0]
 8001f52:	3501      	adds	r5, #1
 8001f54:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	6962      	ldr	r2, [r4, #20]
 8001f5a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001f5c:	bf24      	itt	cs
 8001f5e:	68e3      	ldrcs	r3, [r4, #12]
 8001f60:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001f62:	f1b8 0f00 	cmp.w	r8, #0
 8001f66:	d001      	beq.n	8001f6c <oqWriteTimeout+0x5c>
      nfy(oqp);
 8001f68:	4620      	mov	r0, r4
 8001f6a:	47c0      	blx	r8
 8001f6c:	f38b 8811 	msr	BASEPRI, fp

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8001f70:	3e01      	subs	r6, #1
    w++;
 8001f72:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001f76:	d019      	beq.n	8001fac <oqWriteTimeout+0x9c>
 8001f78:	2320      	movs	r3, #32
 8001f7a:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
 8001f7e:	68a3      	ldr	r3, [r4, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1df      	bne.n	8001f44 <oqWriteTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001f84:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001f88:	4591      	cmp	r9, r2
 8001f8a:	d813      	bhi.n	8001fb4 <oqWriteTimeout+0xa4>
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001f92:	9a01      	ldr	r2, [sp, #4]
 8001f94:	1a51      	subs	r1, r2, r1
 8001f96:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 8001f98:	458a      	cmp	sl, r1
 8001f9a:	d305      	bcc.n	8001fa8 <oqWriteTimeout+0x98>
  return chThdEnqueueTimeoutS(tqp, time);
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7ff ff9f 	bl	8001ee0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d0cc      	beq.n	8001f40 <oqWriteTimeout+0x30>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8001fac:	4638      	mov	r0, r7
 8001fae:	b003      	add	sp, #12
 8001fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fb4:	4651      	mov	r1, sl
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff ff92 	bl	8001ee0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d0bf      	beq.n	8001f40 <oqWriteTimeout+0x30>
 8001fc0:	e7f1      	b.n	8001fa6 <oqWriteTimeout+0x96>
 8001fc2:	bf00      	nop
	...

08001fd0 <_writet.lto_priv.52>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001fd0:	3030      	adds	r0, #48	; 0x30
 8001fd2:	f7ff bf9d 	b.w	8001f10 <oqWriteTimeout>
 8001fd6:	bf00      	nop
	...

08001fe0 <_write.lto_priv.46>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001fe0:	3030      	adds	r0, #48	; 0x30
 8001fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe6:	f7ff bf93 	b.w	8001f10 <oqWriteTimeout>
 8001fea:	bf00      	nop
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	460f      	mov	r7, r1
 8001ff6:	4616      	mov	r6, r2
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	e005      	b.n	800200c <oqPutTimeout+0x1c>
 8002000:	4631      	mov	r1, r6
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff ff6c 	bl	8001ee0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002008:	2800      	cmp	r0, #0
 800200a:	db17      	blt.n	800203c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 800200c:	68a5      	ldr	r5, [r4, #8]
 800200e:	2d00      	cmp	r5, #0
 8002010:	d0f6      	beq.n	8002000 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002012:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002014:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002016:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002018:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800201a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800201c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800201e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002020:	6923      	ldr	r3, [r4, #16]
 8002022:	6962      	ldr	r2, [r4, #20]
 8002024:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002026:	bf24      	itt	cs
 8002028:	68e3      	ldrcs	r3, [r4, #12]
 800202a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800202c:	69e3      	ldr	r3, [r4, #28]
 800202e:	b10b      	cbz	r3, 8002034 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8002030:	4620      	mov	r0, r4
 8002032:	4798      	blx	r3
 8002034:	2000      	movs	r0, #0
 8002036:	f380 8811 	msr	BASEPRI, r0
}
 800203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203c:	f385 8811 	msr	BASEPRI, r5
 8002040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002042:	bf00      	nop
	...

08002050 <_putt.lto_priv.50>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002050:	3030      	adds	r0, #48	; 0x30
 8002052:	f7ff bfcd 	b.w	8001ff0 <oqPutTimeout>
 8002056:	bf00      	nop
	...

08002060 <_put.lto_priv.48>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002060:	3030      	adds	r0, #48	; 0x30
 8002062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002066:	f7ff bfc3 	b.w	8001ff0 <oqPutTimeout>
 800206a:	bf00      	nop
 800206c:	0000      	movs	r0, r0
	...

08002070 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002074:	469a      	mov	sl, r3
 8002076:	b083      	sub	sp, #12
 8002078:	4604      	mov	r4, r0
 800207a:	460e      	mov	r6, r1
 800207c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
 800207e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002082:	2320      	movs	r3, #32
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 800208c:	2700      	movs	r7, #0
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8002090:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8002094:	4453      	add	r3, sl
 8002096:	b29b      	uxth	r3, r3
 8002098:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800209a:	fa1f f989 	uxth.w	r9, r9
    while (iqIsEmptyI(iqp)) {
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	b313      	cbz	r3, 80020e8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
 80020a2:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 80020a4:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020a6:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 80020a8:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80020aa:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 80020ac:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020ae:	7813      	ldrb	r3, [r2, #0]
 80020b0:	f106 0b01 	add.w	fp, r6, #1
 80020b4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 80020b6:	6923      	ldr	r3, [r4, #16]
 80020b8:	69a2      	ldr	r2, [r4, #24]
 80020ba:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80020bc:	bf24      	itt	cs
 80020be:	68e3      	ldrcs	r3, [r4, #12]
 80020c0:	61a3      	strcs	r3, [r4, #24]
    if (nfy != NULL) {
 80020c2:	f1b8 0f00 	cmp.w	r8, #0
 80020c6:	d001      	beq.n	80020cc <iqReadTimeout+0x5c>
      nfy(iqp);
 80020c8:	4620      	mov	r0, r4
 80020ca:	47c0      	blx	r8
 80020cc:	2300      	movs	r3, #0
 80020ce:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
 80020d2:	3d01      	subs	r5, #1
    r++;
 80020d4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80020d8:	d01a      	beq.n	8002110 <iqReadTimeout+0xa0>
 80020da:	2320      	movs	r3, #32
 80020dc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
 80020e0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020e2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1dc      	bne.n	80020a2 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80020e8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80020ec:	4591      	cmp	r9, r2
 80020ee:	d813      	bhi.n	8002118 <iqReadTimeout+0xa8>
 80020f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f4:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80020f6:	9a01      	ldr	r2, [sp, #4]
 80020f8:	1a51      	subs	r1, r2, r1
 80020fa:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 80020fc:	458a      	cmp	sl, r1
 80020fe:	d305      	bcc.n	800210c <iqReadTimeout+0x9c>
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff feed 	bl	8001ee0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002106:	2800      	cmp	r0, #0
 8002108:	d0c9      	beq.n	800209e <iqReadTimeout+0x2e>
 800210a:	2300      	movs	r3, #0
 800210c:	f383 8811 	msr	BASEPRI, r3
}
 8002110:	4638      	mov	r0, r7
 8002112:	b003      	add	sp, #12
 8002114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002118:	4651      	mov	r1, sl
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fee0 	bl	8001ee0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002120:	2800      	cmp	r0, #0
 8002122:	d0bc      	beq.n	800209e <iqReadTimeout+0x2e>
 8002124:	e7f1      	b.n	800210a <iqReadTimeout+0x9a>
 8002126:	bf00      	nop
	...

08002130 <_readt.lto_priv.53>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002130:	300c      	adds	r0, #12
 8002132:	f7ff bf9d 	b.w	8002070 <iqReadTimeout>
 8002136:	bf00      	nop
	...

08002140 <_read.lto_priv.47>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002140:	300c      	adds	r0, #12
 8002142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002146:	f7ff bf93 	b.w	8002070 <iqReadTimeout>
 800214a:	bf00      	nop
 800214c:	0000      	movs	r0, r0
	...

08002150 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	2320      	movs	r3, #32
 8002154:	4604      	mov	r4, r0
 8002156:	460e      	mov	r6, r1
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	e005      	b.n	800216a <iqGetTimeout+0x1a>
 800215e:	4631      	mov	r1, r6
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff febd 	bl	8001ee0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002166:	2800      	cmp	r0, #0
 8002168:	db18      	blt.n	800219c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800216a:	68a5      	ldr	r5, [r4, #8]
 800216c:	2d00      	cmp	r5, #0
 800216e:	d0f6      	beq.n	800215e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8002170:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8002172:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002174:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8002176:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8002178:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800217a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800217c:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800217e:	bf28      	it	cs
 8002180:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8002182:	61a2      	str	r2, [r4, #24]
 8002184:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002186:	bf28      	it	cs
 8002188:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800218a:	69e3      	ldr	r3, [r4, #28]
 800218c:	b10b      	cbz	r3, 8002192 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800218e:	4620      	mov	r0, r4
 8002190:	4798      	blx	r3
 8002192:	2300      	movs	r3, #0
 8002194:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002198:	4628      	mov	r0, r5
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	f385 8811 	msr	BASEPRI, r5
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	bf00      	nop
	...

080021b0 <_gett.lto_priv.51>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80021b0:	300c      	adds	r0, #12
 80021b2:	f7ff bfcd 	b.w	8002150 <iqGetTimeout>
 80021b6:	bf00      	nop
	...

080021c0 <_get.lto_priv.49>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80021c0:	300c      	adds	r0, #12
 80021c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021c6:	f7ff bfc3 	b.w	8002150 <iqGetTimeout>
 80021ca:	bf00      	nop
 80021cc:	0000      	movs	r0, r0
	...

080021d0 <chThdSleep>:
void chThdSleep(systime_t time) {
 80021d0:	b508      	push	{r3, lr}
 80021d2:	4601      	mov	r1, r0
 80021d4:	2320      	movs	r3, #32
 80021d6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80021da:	2008      	movs	r0, #8
 80021dc:	f7ff fdd8 	bl	8001d90 <chSchGoSleepTimeoutS>
 80021e0:	2300      	movs	r3, #0
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	bd08      	pop	{r3, pc}
	...

080021f0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80021f0:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
 80021f2:	b410      	push	{r4}
 80021f4:	4604      	mov	r4, r0
 80021f6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <chSchReadyI+0x28>)
  tp->state = CH_STATE_READY;
 80021fa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80021fe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	428a      	cmp	r2, r1
 8002204:	d2fb      	bcs.n	80021fe <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
 8002206:	685a      	ldr	r2, [r3, #4]
}
 8002208:	4620      	mov	r0, r4
  tp->queue.next             = cp;
 800220a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800220c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 800220e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002210:	605c      	str	r4, [r3, #4]
}
 8002212:	bc10      	pop	{r4}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000bf4 	.word	0x20000bf4
 800221c:	00000000 	.word	0x00000000

08002220 <adc_lld_serve_rx_interrupt.lto_priv.44>:
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8002224:	070d      	lsls	r5, r1, #28
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002226:	4604      	mov	r4, r0
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8002228:	d52d      	bpl.n	8002286 <adc_lld_serve_rx_interrupt.lto_priv.44+0x66>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800222a:	230e      	movs	r3, #14
  adcp->adc->CR2 = 0;
 800222c:	2100      	movs	r1, #0
  dmaStreamDisable(adcp->dmastp);
 800222e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002230:	6905      	ldr	r5, [r0, #16]
  dmaStreamDisable(adcp->dmastp);
 8002232:	6856      	ldr	r6, [r2, #4]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002234:	68af      	ldr	r7, [r5, #8]
  dmaStreamDisable(adcp->dmastp);
 8002236:	6835      	ldr	r5, [r6, #0]
 8002238:	f025 050f 	bic.w	r5, r5, #15
 800223c:	6035      	str	r5, [r6, #0]
 800223e:	7c16      	ldrb	r6, [r2, #16]
 8002240:	6815      	ldr	r5, [r2, #0]
  adcp->adc->CR2 = 0;
 8002242:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 8002244:	40b3      	lsls	r3, r6
 8002246:	606b      	str	r3, [r5, #4]
  adcp->adc->CR2 = 0;
 8002248:	6091      	str	r1, [r2, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800224a:	2f00      	cmp	r7, #0
 800224c:	d054      	beq.n	80022f8 <adc_lld_serve_rx_interrupt.lto_priv.44+0xd8>
 800224e:	2305      	movs	r3, #5
 8002250:	7003      	strb	r3, [r0, #0]
 8002252:	47b8      	blx	r7
 8002254:	7823      	ldrb	r3, [r4, #0]
 8002256:	2b05      	cmp	r3, #5
 8002258:	bf04      	itt	eq
 800225a:	2302      	moveq	r3, #2
 800225c:	7023      	strbeq	r3, [r4, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	6123      	str	r3, [r4, #16]
 8002262:	2320      	movs	r3, #32
 8002264:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8002268:	6963      	ldr	r3, [r4, #20]
 800226a:	b13b      	cbz	r3, 800227c <adc_lld_serve_rx_interrupt.lto_priv.44+0x5c>
    *trp = NULL;
 800226c:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 800226e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    *trp = NULL;
 8002272:	6161      	str	r1, [r4, #20]
    (void) chSchReadyI(tp);
 8002274:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002278:	f7ff ffba 	bl	80021f0 <chSchReadyI>
 800227c:	2300      	movs	r3, #0
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8002286:	078a      	lsls	r2, r1, #30
 8002288:	d529      	bpl.n	80022de <adc_lld_serve_rx_interrupt.lto_priv.44+0xbe>
      _adc_isr_full_code(adcp);
 800228a:	6903      	ldr	r3, [r0, #16]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	2a00      	cmp	r2, #0
 8002290:	d136      	bne.n	8002300 <adc_lld_serve_rx_interrupt.lto_priv.44+0xe0>
  dmaStreamDisable(adcp->dmastp);
 8002292:	210e      	movs	r1, #14
 8002294:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
      _adc_isr_full_code(adcp);
 8002296:	685f      	ldr	r7, [r3, #4]
  dmaStreamDisable(adcp->dmastp);
 8002298:	686e      	ldr	r6, [r5, #4]
 800229a:	6833      	ldr	r3, [r6, #0]
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	6033      	str	r3, [r6, #0]
 80022a2:	7c2b      	ldrb	r3, [r5, #16]
 80022a4:	682e      	ldr	r6, [r5, #0]
  adcp->adc->CR2 = 0;
 80022a6:	6a85      	ldr	r5, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	6073      	str	r3, [r6, #4]
  adcp->adc->CR2 = 0;
 80022ae:	60aa      	str	r2, [r5, #8]
      _adc_isr_full_code(adcp);
 80022b0:	2f00      	cmp	r7, #0
 80022b2:	d035      	beq.n	8002320 <adc_lld_serve_rx_interrupt.lto_priv.44+0x100>
 80022b4:	2304      	movs	r3, #4
 80022b6:	68c2      	ldr	r2, [r0, #12]
 80022b8:	7003      	strb	r3, [r0, #0]
 80022ba:	6881      	ldr	r1, [r0, #8]
 80022bc:	47b8      	blx	r7
 80022be:	7823      	ldrb	r3, [r4, #0]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d02d      	beq.n	8002320 <adc_lld_serve_rx_interrupt.lto_priv.44+0x100>
 80022c4:	2320      	movs	r3, #32
 80022c6:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 80022ca:	6963      	ldr	r3, [r4, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0d5      	beq.n	800227c <adc_lld_serve_rx_interrupt.lto_priv.44+0x5c>
    *trp = NULL;
 80022d0:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
 80022d2:	4618      	mov	r0, r3
    *trp = NULL;
 80022d4:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80022d8:	f7ff ff8a 	bl	80021f0 <chSchReadyI>
 80022dc:	e7ce      	b.n	800227c <adc_lld_serve_rx_interrupt.lto_priv.44+0x5c>
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80022de:	074b      	lsls	r3, r1, #29
 80022e0:	d508      	bpl.n	80022f4 <adc_lld_serve_rx_interrupt.lto_priv.44+0xd4>
      _adc_isr_half_code(adcp);
 80022e2:	6903      	ldr	r3, [r0, #16]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	b12b      	cbz	r3, 80022f4 <adc_lld_serve_rx_interrupt.lto_priv.44+0xd4>
}
 80022e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _adc_isr_half_code(adcp);
 80022ec:	68c2      	ldr	r2, [r0, #12]
 80022ee:	6881      	ldr	r1, [r0, #8]
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	4718      	bx	r3
 80022f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80022f8:	2302      	movs	r3, #2
 80022fa:	6107      	str	r7, [r0, #16]
 80022fc:	7003      	strb	r3, [r0, #0]
 80022fe:	e7b0      	b.n	8002262 <adc_lld_serve_rx_interrupt.lto_priv.44+0x42>
      _adc_isr_full_code(adcp);
 8002300:	685d      	ldr	r5, [r3, #4]
 8002302:	2d00      	cmp	r5, #0
 8002304:	d0f6      	beq.n	80022f4 <adc_lld_serve_rx_interrupt.lto_priv.44+0xd4>
 8002306:	68c2      	ldr	r2, [r0, #12]
 8002308:	2a01      	cmp	r2, #1
 800230a:	d90e      	bls.n	800232a <adc_lld_serve_rx_interrupt.lto_priv.44+0x10a>
 800230c:	885e      	ldrh	r6, [r3, #2]
 800230e:	0852      	lsrs	r2, r2, #1
 8002310:	6883      	ldr	r3, [r0, #8]
 8002312:	0051      	lsls	r1, r2, #1
 8002314:	fb06 3101 	mla	r1, r6, r1, r3
 8002318:	462b      	mov	r3, r5
}
 800231a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _adc_isr_full_code(adcp);
 800231e:	4718      	bx	r3
 8002320:	2202      	movs	r2, #2
 8002322:	2300      	movs	r3, #0
 8002324:	7022      	strb	r2, [r4, #0]
 8002326:	6123      	str	r3, [r4, #16]
 8002328:	e7cc      	b.n	80022c4 <adc_lld_serve_rx_interrupt.lto_priv.44+0xa4>
 800232a:	462b      	mov	r3, r5
}
 800232c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _adc_isr_full_code(adcp);
 8002330:	6881      	ldr	r1, [r0, #8]
 8002332:	4718      	bx	r3
	...

08002340 <chThdExit>:
void chThdExit(msg_t msg) {
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	2220      	movs	r2, #32
 8002344:	4603      	mov	r3, r0
 8002346:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <chThdExit+0x4c>)
 800234c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800234e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002350:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002354:	4285      	cmp	r5, r0
  tp->u.exitcode = msg;
 8002356:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002358:	d006      	beq.n	8002368 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800235a:	6803      	ldr	r3, [r0, #0]
 800235c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800235e:	f7ff ff47 	bl	80021f0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8002362:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002364:	42a8      	cmp	r0, r5
 8002366:	d1f8      	bne.n	800235a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8002368:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800236c:	b943      	cbnz	r3, 8002380 <chThdExit+0x40>
 800236e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002372:	079b      	lsls	r3, r3, #30
 8002374:	d104      	bne.n	8002380 <chThdExit+0x40>
    REG_REMOVE(tp);
 8002376:	6922      	ldr	r2, [r4, #16]
 8002378:	6963      	ldr	r3, [r4, #20]
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	6922      	ldr	r2, [r4, #16]
 800237e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8002380:	200f      	movs	r0, #15
}
 8002382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002386:	f7ff bceb 	b.w	8001d60 <chSchGoSleepS>
 800238a:	bf00      	nop
 800238c:	20000bf4 	.word	0x20000bf4

08002390 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8002390:	e7fe      	b.n	8002390 <BusFault_Handler>
 8002392:	bf00      	nop
	...

080023a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80023a2:	2600      	movs	r6, #0
 80023a4:	4f12      	ldr	r7, [pc, #72]	; (80023f0 <__init_ram_areas+0x50>)
void __init_ram_areas(void) {
 80023a6:	4d13      	ldr	r5, [pc, #76]	; (80023f4 <__init_ram_areas+0x54>)
 80023a8:	4c13      	ldr	r4, [pc, #76]	; (80023f8 <__init_ram_areas+0x58>)
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <__init_ram_areas+0x5c>)
 80023ac:	4914      	ldr	r1, [pc, #80]	; (8002400 <__init_ram_areas+0x60>)
 80023ae:	f107 0e70 	add.w	lr, r7, #112	; 0x70
    while (p < rap->clear_area) {
 80023b2:	429c      	cmp	r4, r3
 80023b4:	d911      	bls.n	80023da <__init_ram_areas+0x3a>
 80023b6:	461a      	mov	r2, r3
 80023b8:	3904      	subs	r1, #4
      *p = *tp;
 80023ba:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80023be:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80023c2:	4294      	cmp	r4, r2
 80023c4:	d8f9      	bhi.n	80023ba <__init_ram_areas+0x1a>
 80023c6:	43da      	mvns	r2, r3
 80023c8:	4414      	add	r4, r2
 80023ca:	f024 0403 	bic.w	r4, r4, #3
 80023ce:	3404      	adds	r4, #4
 80023d0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80023d2:	429d      	cmp	r5, r3
 80023d4:	d903      	bls.n	80023de <__init_ram_areas+0x3e>
      *p = 0;
 80023d6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80023da:	429d      	cmp	r5, r3
 80023dc:	d8fb      	bhi.n	80023d6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80023de:	4577      	cmp	r7, lr
 80023e0:	d004      	beq.n	80023ec <__init_ram_areas+0x4c>
 80023e2:	f107 0110 	add.w	r1, r7, #16
 80023e6:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 80023e8:	3710      	adds	r7, #16
 80023ea:	e7e2      	b.n	80023b2 <__init_ram_areas+0x12>
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08002cc8 	.word	0x08002cc8
 80023f4:	20000c64 	.word	0x20000c64
 80023f8:	20000c64 	.word	0x20000c64
 80023fc:	20000c64 	.word	0x20000c64
 8002400:	08002da4 	.word	0x08002da4
	...

08002410 <__default_exit>:
void __default_exit(void) {
 8002410:	e7fe      	b.n	8002410 <__default_exit>
 8002412:	bf00      	nop
	...

08002420 <__late_init>:
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
	...

08002430 <__core_init>:
void __core_init(void) {
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
	...

08002440 <chSchWakeupS.constprop.43>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002440:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 8002442:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <chSchWakeupS.constprop.43+0x58>)
  ntp->u.rdymsg = msg;
 8002446:	6246      	str	r6, [r0, #36]	; 0x24
  thread_t *otp = currp;
 8002448:	699d      	ldr	r5, [r3, #24]
  if (ntp->prio <= otp->prio) {
 800244a:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800244c:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 800244e:	68a8      	ldr	r0, [r5, #8]
 8002450:	4281      	cmp	r1, r0
 8002452:	d80c      	bhi.n	800246e <chSchWakeupS.constprop.43+0x2e>
  tp->state = CH_STATE_READY;
 8002454:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
 8002458:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	4291      	cmp	r1, r2
 800245e:	d9fb      	bls.n	8002458 <chSchWakeupS.constprop.43+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002460:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8002462:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8002464:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8002466:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002468:	605c      	str	r4, [r3, #4]
}
 800246a:	bc70      	pop	{r4, r5, r6}
 800246c:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
 800246e:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8002470:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
 8002474:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002476:	6891      	ldr	r1, [r2, #8]
 8002478:	4288      	cmp	r0, r1
 800247a:	d9fb      	bls.n	8002474 <chSchWakeupS.constprop.43+0x34>
    ntp->state = CH_STATE_CURRENT;
 800247c:	2601      	movs	r6, #1
  tp->queue.prev             = cp->queue.prev;
 800247e:	6850      	ldr	r0, [r2, #4]
  tp->queue.next             = cp;
 8002480:	602a      	str	r2, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8002482:	6068      	str	r0, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8002484:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8002486:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002488:	f884 6020 	strb.w	r6, [r4, #32]
    chSysSwitch(ntp, otp);
 800248c:	4629      	mov	r1, r5
 800248e:	4620      	mov	r0, r4
    currp = ntp;
 8002490:	619c      	str	r4, [r3, #24]
}
 8002492:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8002494:	f7fd bece 	b.w	8000234 <_port_switch>
 8002498:	20000bf4 	.word	0x20000bf4
 800249c:	00000000 	.word	0x00000000

080024a0 <chEvtBroadcastFlagsI.constprop.36>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80024a2:	4f17      	ldr	r7, [pc, #92]	; (8002500 <chEvtBroadcastFlagsI.constprop.36+0x60>)
 80024a4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80024a8:	42bc      	cmp	r4, r7
 80024aa:	d021      	beq.n	80024f0 <chEvtBroadcastFlagsI.constprop.36+0x50>
 80024ac:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80024ae:	2600      	movs	r6, #0
 80024b0:	e002      	b.n	80024b8 <chEvtBroadcastFlagsI.constprop.36+0x18>
    elp = elp->next;
 80024b2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80024b4:	42bc      	cmp	r4, r7
 80024b6:	d01b      	beq.n	80024f0 <chEvtBroadcastFlagsI.constprop.36+0x50>
    elp->flags |= flags;
 80024b8:	68e3      	ldr	r3, [r4, #12]
 80024ba:	432b      	orrs	r3, r5
 80024bc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80024be:	b115      	cbz	r5, 80024c6 <chEvtBroadcastFlagsI.constprop.36+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80024c0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80024c2:	4213      	tst	r3, r2
 80024c4:	d0f5      	beq.n	80024b2 <chEvtBroadcastFlagsI.constprop.36+0x12>
      chEvtSignalI(elp->listener, elp->events);
 80024c6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 80024c8:	68a3      	ldr	r3, [r4, #8]
 80024ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80024cc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80024d0:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80024d2:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80024d4:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80024d6:	d00c      	beq.n	80024f2 <chEvtBroadcastFlagsI.constprop.36+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80024d8:	2a0b      	cmp	r2, #11
 80024da:	d1ea      	bne.n	80024b2 <chEvtBroadcastFlagsI.constprop.36+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80024dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80024de:	ea32 0303 	bics.w	r3, r2, r3
 80024e2:	d1e6      	bne.n	80024b2 <chEvtBroadcastFlagsI.constprop.36+0x12>
    tp->u.rdymsg = MSG_OK;
 80024e4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80024e6:	f7ff fe83 	bl	80021f0 <chSchReadyI>
    elp = elp->next;
 80024ea:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80024ec:	42bc      	cmp	r4, r7
 80024ee:	d1e3      	bne.n	80024b8 <chEvtBroadcastFlagsI.constprop.36+0x18>
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80024f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80024f4:	4213      	tst	r3, r2
 80024f6:	d0dc      	beq.n	80024b2 <chEvtBroadcastFlagsI.constprop.36+0x12>
    tp->u.rdymsg = MSG_OK;
 80024f8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80024fa:	f7ff fe79 	bl	80021f0 <chSchReadyI>
 80024fe:	e7f4      	b.n	80024ea <chEvtBroadcastFlagsI.constprop.36+0x4a>
 8002500:	20000b78 	.word	0x20000b78
	...

08002510 <adc_lld_start_conversion.constprop.22>:
  const ADCConversionGroup *grpp = adcp->grpp;
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <adc_lld_start_conversion.constprop.22+0x78>)
void adc_lld_start_conversion(ADCDriver *adcp) {
 8002512:	b4f0      	push	{r4, r5, r6, r7}
  const ADCConversionGroup *grpp = adcp->grpp;
 8002514:	6913      	ldr	r3, [r2, #16]
  mode = adcp->dmamode;
 8002516:	6b15      	ldr	r5, [r2, #48]	; 0x30
  if (grpp->circular) {
 8002518:	7819      	ldrb	r1, [r3, #0]
 800251a:	2900      	cmp	r1, #0
 800251c:	d12b      	bne.n	8002576 <adc_lld_start_conversion.constprop.22+0x66>
 800251e:	68d1      	ldr	r1, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002520:	885c      	ldrh	r4, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002522:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002524:	fb01 f104 	mul.w	r1, r1, r4
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002528:	6840      	ldr	r0, [r0, #4]
 800252a:	6896      	ldr	r6, [r2, #8]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 800252c:	68dc      	ldr	r4, [r3, #12]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800252e:	60c6      	str	r6, [r0, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002530:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 8002532:	6005      	str	r5, [r0, #0]
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
 8002534:	6919      	ldr	r1, [r3, #16]
  dmaStreamEnable(adcp->dmastp);
 8002536:	6805      	ldr	r5, [r0, #0]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002538:	6a92      	ldr	r2, [r2, #40]	; 0x28
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
 800253a:	f411 1f84 	tst.w	r1, #1081344	; 0x108000
  dmaStreamEnable(adcp->dmastp);
 800253e:	f045 0501 	orr.w	r5, r5, #1
 8002542:	6005      	str	r5, [r0, #0]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002544:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
 8002548:	bf14      	ite	ne
 800254a:	f441 7080 	orrne.w	r0, r1, #256	; 0x100
    cr2 |= ADC_CR2_CONT;
 800254e:	f441 7081 	orreq.w	r0, r1, #258	; 0x102
  adcp->adc->SMPR1 = grpp->smpr1;
 8002552:	695f      	ldr	r7, [r3, #20]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002554:	699e      	ldr	r6, [r3, #24]
  adcp->adc->SQR1  = grpp->sqr1;
 8002556:	69dd      	ldr	r5, [r3, #28]
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002558:	6054      	str	r4, [r2, #4]
    cr2 |= ADC_CR2_CONT;
 800255a:	f040 0001 	orr.w	r0, r0, #1
  adcp->adc->SQR2  = grpp->sqr2;
 800255e:	6a1c      	ldr	r4, [r3, #32]
  adcp->adc->SQR3  = grpp->sqr3;
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  adcp->adc->CR2   = grpp->cr2 | cr2;
 8002562:	4301      	orrs	r1, r0
 8002564:	6091      	str	r1, [r2, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 8002566:	60d7      	str	r7, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8002568:	6116      	str	r6, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 800256a:	62d5      	str	r5, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 800256c:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 800256e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002570:	bcf0      	pop	{r4, r5, r6, r7}
  adcp->adc->CR2   = cr2;
 8002572:	6090      	str	r0, [r2, #8]
}
 8002574:	4770      	bx	lr
    if (adcp->depth > 1) {
 8002576:	68d1      	ldr	r1, [r2, #12]
 8002578:	2901      	cmp	r1, #1
    mode |= STM32_DMA_CR_CIRC;
 800257a:	bf94      	ite	ls
 800257c:	f045 0520 	orrls.w	r5, r5, #32
      mode |= STM32_DMA_CR_HTIE;
 8002580:	f045 0524 	orrhi.w	r5, r5, #36	; 0x24
 8002584:	e7cc      	b.n	8002520 <adc_lld_start_conversion.constprop.22+0x10>
 8002586:	bf00      	nop
 8002588:	20000b44 	.word	0x20000b44
 800258c:	00000000 	.word	0x00000000

08002590 <_pal_lld_setgroupmode.constprop.6>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8002590:	2903      	cmp	r1, #3
void _pal_lld_setgroupmode(ioportid_t port,
 8002592:	b4f0      	push	{r4, r5, r6, r7}
  if (mode == PAL_MODE_INPUT_PULLUP)
 8002594:	d02b      	beq.n	80025ee <_pal_lld_setgroupmode.constprop.6+0x5e>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8002596:	2904      	cmp	r1, #4
    port->BRR = mask;
 8002598:	bf04      	itt	eq
 800259a:	4b16      	ldreq	r3, [pc, #88]	; (80025f4 <_pal_lld_setgroupmode.constprop.6+0x64>)
 800259c:	6158      	streq	r0, [r3, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 800259e:	2300      	movs	r3, #0
  cfg = cfgtab[mode];
 80025a0:	2608      	movs	r6, #8
  mh = ml = crh = crl = 0;
 80025a2:	461a      	mov	r2, r3
 80025a4:	461d      	mov	r5, r3
 80025a6:	461c      	mov	r4, r3
  cfg = cfgtab[mode];
 80025a8:	4f13      	ldr	r7, [pc, #76]	; (80025f8 <_pal_lld_setgroupmode.constprop.6+0x68>)
 80025aa:	5c79      	ldrb	r1, [r7, r1]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 80025ac:	0607      	lsls	r7, r0, #24
    ml <<= 4;
 80025ae:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 80025b2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    mh <<= 4;
 80025b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    crh <<= 4;
 80025ba:	ea4f 1303 	mov.w	r3, r3, lsl #4
      ml |= 0xf;
 80025be:	bf54      	ite	pl
 80025c0:	f044 040f 	orrpl.w	r4, r4, #15
    else
      crl |= cfg;
 80025c4:	430a      	orrmi	r2, r1
    if ((mask & 0x8000) == 0)
 80025c6:	0407      	lsls	r7, r0, #16
      mh |= 0xf;
 80025c8:	bf54      	ite	pl
 80025ca:	f045 050f 	orrpl.w	r5, r5, #15
    else
      crh |= cfg;
 80025ce:	430b      	orrmi	r3, r1
  for (i = 0; i < 8; i++) {
 80025d0:	3e01      	subs	r6, #1
    mask <<= 1;
 80025d2:	ea4f 0040 	mov.w	r0, r0, lsl #1
  for (i = 0; i < 8; i++) {
 80025d6:	d1e9      	bne.n	80025ac <_pal_lld_setgroupmode.constprop.6+0x1c>
  }
  port->CRH = (port->CRH & mh) | crh;
 80025d8:	4806      	ldr	r0, [pc, #24]	; (80025f4 <_pal_lld_setgroupmode.constprop.6+0x64>)
 80025da:	6841      	ldr	r1, [r0, #4]
 80025dc:	400d      	ands	r5, r1
 80025de:	432b      	orrs	r3, r5
 80025e0:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	401c      	ands	r4, r3
 80025e6:	4322      	orrs	r2, r4
 80025e8:	6002      	str	r2, [r0, #0]
}
 80025ea:	bcf0      	pop	{r4, r5, r6, r7}
 80025ec:	4770      	bx	lr
    port->BSRR = mask;
 80025ee:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <_pal_lld_setgroupmode.constprop.6+0x64>)
 80025f0:	6118      	str	r0, [r3, #16]
 80025f2:	e7d4      	b.n	800259e <_pal_lld_setgroupmode.constprop.6+0xe>
 80025f4:	40010800 	.word	0x40010800
 80025f8:	08002d48 	.word	0x08002d48
 80025fc:	00000000 	.word	0x00000000

08002600 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002600:	b40e      	push	{r1, r2, r3}
 8002602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002606:	b092      	sub	sp, #72	; 0x48
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002608:	ab1c      	add	r3, sp, #112	; 0x70
 800260a:	930b      	str	r3, [sp, #44]	; 0x2c
 800260c:	4698      	mov	r8, r3
  int n = 0;
 800260e:	2300      	movs	r3, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002610:	4683      	mov	fp, r0
    c = *fmt++;
 8002612:	4e79      	ldr	r6, [pc, #484]	; (80027f8 <chprintf.constprop.0+0x1f8>)
  int n = 0;
 8002614:	9301      	str	r3, [sp, #4]
  va_start(ap, fmt);
 8002616:	1e75      	subs	r5, r6, #1
    if (*fmt == '-') {
 8002618:	786b      	ldrb	r3, [r5, #1]
    width = 0;
 800261a:	2400      	movs	r4, #0
    if (*fmt == '-') {
 800261c:	2b2d      	cmp	r3, #45	; 0x2d
      left_align = TRUE;
 800261e:	bf0a      	itet	eq
 8002620:	2301      	moveq	r3, #1
    left_align = FALSE;
 8002622:	2300      	movne	r3, #0
      fmt++;
 8002624:	1cae      	addeq	r6, r5, #2
    if (*fmt == '0') {
 8002626:	7832      	ldrb	r2, [r6, #0]
    left_align = FALSE;
 8002628:	9303      	str	r3, [sp, #12]
    if (*fmt == '0') {
 800262a:	2a30      	cmp	r2, #48	; 0x30
 800262c:	bf03      	ittte	eq
 800262e:	7872      	ldrbeq	r2, [r6, #1]
      fmt++;
 8002630:	3601      	addeq	r6, #1
      filler = '0';
 8002632:	2730      	moveq	r7, #48	; 0x30
    filler = ' ';
 8002634:	2720      	movne	r7, #32
 8002636:	1c71      	adds	r1, r6, #1
 8002638:	e007      	b.n	800264a <chprintf.constprop.0+0x4a>
        c = va_arg(ap, int);
 800263a:	f898 3000 	ldrb.w	r3, [r8]
 800263e:	f108 0804 	add.w	r8, r8, #4
 8002642:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8002646:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 800264a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b09      	cmp	r3, #9
      c = *fmt++;
 8002652:	460d      	mov	r5, r1
      width = width * 10 + c;
 8002654:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8002658:	d9f3      	bls.n	8002642 <chprintf.constprop.0+0x42>
      else if (c == '*')
 800265a:	2a2a      	cmp	r2, #42	; 0x2a
 800265c:	d0ed      	beq.n	800263a <chprintf.constprop.0+0x3a>
    if (c == '.') {
 800265e:	2a2e      	cmp	r2, #46	; 0x2e
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	d045      	beq.n	80026f2 <chprintf.constprop.0+0xf2>
    if (c == 'l' || c == 'L') {
 8002666:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 800266a:	294c      	cmp	r1, #76	; 0x4c
 800266c:	d050      	beq.n	8002710 <chprintf.constprop.0+0x110>
    switch (c) {
 800266e:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8002672:	2834      	cmp	r0, #52	; 0x34
 8002674:	f200 8203 	bhi.w	8002a7e <chprintf.constprop.0+0x47e>
 8002678:	e8df f010 	tbh	[pc, r0, lsl #1]
 800267c:	020101d1 	.word	0x020101d1
 8002680:	02010201 	.word	0x02010201
 8002684:	01d10201 	.word	0x01d10201
 8002688:	02010201 	.word	0x02010201
 800268c:	02010201 	.word	0x02010201
 8002690:	02420201 	.word	0x02420201
 8002694:	02010201 	.word	0x02010201
 8002698:	02010201 	.word	0x02010201
 800269c:	02120201 	.word	0x02120201
 80026a0:	02010201 	.word	0x02010201
 80026a4:	02010245 	.word	0x02010245
 80026a8:	02010201 	.word	0x02010201
 80026ac:	02010201 	.word	0x02010201
 80026b0:	02010201 	.word	0x02010201
 80026b4:	02010201 	.word	0x02010201
 80026b8:	01670201 	.word	0x01670201
 80026bc:	020101d1 	.word	0x020101d1
 80026c0:	020100c0 	.word	0x020100c0
 80026c4:	01d10201 	.word	0x01d10201
 80026c8:	02010201 	.word	0x02010201
 80026cc:	02010201 	.word	0x02010201
 80026d0:	02420201 	.word	0x02420201
 80026d4:	02010201 	.word	0x02010201
 80026d8:	008f0201 	.word	0x008f0201
 80026dc:	02120201 	.word	0x02120201
 80026e0:	02010201 	.word	0x02010201
 80026e4:	0245      	.short	0x0245
          c = va_arg(ap, int);
 80026e6:	f898 1000 	ldrb.w	r1, [r8]
 80026ea:	f108 0804 	add.w	r8, r8, #4
        precision += c;
 80026ee:	eb01 0340 	add.w	r3, r1, r0, lsl #1
        c = *fmt++;
 80026f2:	f815 2b01 	ldrb.w	r2, [r5], #1
        precision *= 10;
 80026f6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
        if (c >= '0' && c <= '9')
 80026fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80026fe:	b2c9      	uxtb	r1, r1
 8002700:	2909      	cmp	r1, #9
 8002702:	d9f4      	bls.n	80026ee <chprintf.constprop.0+0xee>
        else if (c == '*')
 8002704:	2a2a      	cmp	r2, #42	; 0x2a
 8002706:	d0ee      	beq.n	80026e6 <chprintf.constprop.0+0xe6>
    if (c == 'l' || c == 'L') {
 8002708:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 800270c:	294c      	cmp	r1, #76	; 0x4c
 800270e:	d1ae      	bne.n	800266e <chprintf.constprop.0+0x6e>
      if (*fmt)
 8002710:	f895 9000 	ldrb.w	r9, [r5]
 8002714:	f1b9 0f00 	cmp.w	r9, #0
 8002718:	d003      	beq.n	8002722 <chprintf.constprop.0+0x122>
        c = *fmt++;
 800271a:	464a      	mov	r2, r9
 800271c:	3501      	adds	r5, #1
 800271e:	f895 9000 	ldrb.w	r9, [r5]
    switch (c) {
 8002722:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8002726:	2934      	cmp	r1, #52	; 0x34
 8002728:	f200 81ab 	bhi.w	8002a82 <chprintf.constprop.0+0x482>
 800272c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002730:	01a90179 	.word	0x01a90179
 8002734:	01a901a9 	.word	0x01a901a9
 8002738:	017901a9 	.word	0x017901a9
 800273c:	01a901a9 	.word	0x01a901a9
 8002740:	01a901a9 	.word	0x01a901a9
 8002744:	01ee01a9 	.word	0x01ee01a9
 8002748:	01a901a9 	.word	0x01a901a9
 800274c:	01a901a9 	.word	0x01a901a9
 8002750:	01f101a9 	.word	0x01f101a9
 8002754:	01a901a9 	.word	0x01a901a9
 8002758:	01a901f4 	.word	0x01a901f4
 800275c:	01a901a9 	.word	0x01a901a9
 8002760:	01a901a9 	.word	0x01a901a9
 8002764:	01a901a9 	.word	0x01a901a9
 8002768:	01a901a9 	.word	0x01a901a9
 800276c:	010f01a9 	.word	0x010f01a9
 8002770:	01a90179 	.word	0x01a90179
 8002774:	01a90068 	.word	0x01a90068
 8002778:	017901a9 	.word	0x017901a9
 800277c:	01a901a9 	.word	0x01a901a9
 8002780:	01a901a9 	.word	0x01a901a9
 8002784:	01ee01a9 	.word	0x01ee01a9
 8002788:	01a901a9 	.word	0x01a901a9
 800278c:	003701a9 	.word	0x003701a9
 8002790:	01f101a9 	.word	0x01f101a9
 8002794:	01a901a9 	.word	0x01a901a9
 8002798:	01f4      	.short	0x01f4
 800279a:	f895 9000 	ldrb.w	r9, [r5]
      if ((s = va_arg(ap, char *)) == 0)
 800279e:	f8d8 6000 	ldr.w	r6, [r8]
 80027a2:	f108 0804 	add.w	r8, r8, #4
 80027a6:	2e00      	cmp	r6, #0
 80027a8:	f000 81f6 	beq.w	8002b98 <chprintf.constprop.0+0x598>
      if (precision == 0)
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 81b6 	beq.w	8002b1e <chprintf.constprop.0+0x51e>
      for (p = s; *p && (--precision >= 0); p++)
 80027b2:	7832      	ldrb	r2, [r6, #0]
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	f000 81b8 	beq.w	8002b2a <chprintf.constprop.0+0x52a>
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 81b4 	beq.w	8002b2a <chprintf.constprop.0+0x52a>
 80027c2:	4632      	mov	r2, r6
 80027c4:	e001      	b.n	80027ca <chprintf.constprop.0+0x1ca>
 80027c6:	3901      	subs	r1, #1
 80027c8:	d403      	bmi.n	80027d2 <chprintf.constprop.0+0x1d2>
 80027ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f9      	bne.n	80027c6 <chprintf.constprop.0+0x1c6>
 80027d2:	eba2 0c06 	sub.w	ip, r2, r6
 80027d6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    if ((width -= i) < 0)
 80027da:	ebb4 040c 	subs.w	r4, r4, ip
 80027de:	9302      	str	r3, [sp, #8]
      filler = ' ';
 80027e0:	f04f 0720 	mov.w	r7, #32
    if ((width -= i) < 0)
 80027e4:	f140 80c3 	bpl.w	800296e <chprintf.constprop.0+0x36e>
    while (--i >= 0) {
 80027e8:	9b02      	ldr	r3, [sp, #8]
 80027ea:	2b00      	cmp	r3, #0
      width = 0;
 80027ec:	bfa8      	it	ge
 80027ee:	2400      	movge	r4, #0
    while (--i >= 0) {
 80027f0:	f280 80dc 	bge.w	80029ac <chprintf.constprop.0+0x3ac>
    while (width) {
 80027f4:	9c01      	ldr	r4, [sp, #4]
 80027f6:	e0fa      	b.n	80029ee <chprintf.constprop.0+0x3ee>
 80027f8:	08002c9d 	.word	0x08002c9d
 80027fc:	f895 9000 	ldrb.w	r9, [r5]
      f = (float) va_arg(ap, double);
 8002800:	f108 0807 	add.w	r8, r8, #7
 8002804:	f028 0807 	bic.w	r8, r8, #7
 8002808:	e9d8 0100 	ldrd	r0, r1, [r8]
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	f7fe f937 	bl	8000a80 <__aeabi_d2f>
      if (f < 0) {
 8002812:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8002814:	9008      	str	r0, [sp, #32]
      if (f < 0) {
 8002816:	f7fe f9d1 	bl	8000bbc <__aeabi_fcmplt>
      f = (float) va_arg(ap, double);
 800281a:	f108 0808 	add.w	r8, r8, #8
      if (f < 0) {
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	2800      	cmp	r0, #0
 8002822:	f040 81ac 	bne.w	8002b7e <chprintf.constprop.0+0x57e>
    p = tmpbuf;
 8002826:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800282a:	f8cd a008 	str.w	sl, [sp, #8]
      p = ftoa(p, f, precision);
 800282e:	9808      	ldr	r0, [sp, #32]
 8002830:	9306      	str	r3, [sp, #24]
 8002832:	f7fd fe77 	bl	8000524 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002836:	9b06      	ldr	r3, [sp, #24]
      p = ftoa(p, f, precision);
 8002838:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800283c:	3b01      	subs	r3, #1
 800283e:	2b08      	cmp	r3, #8
 8002840:	f200 818c 	bhi.w	8002b5c <chprintf.constprop.0+0x55c>
 8002844:	4ac3      	ldr	r2, [pc, #780]	; (8002b54 <chprintf.constprop.0+0x554>)
 8002846:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800284a:	4630      	mov	r0, r6
 800284c:	f7fd fe48 	bl	80004e0 <__aeabi_ui2d>
 8002850:	4bc1      	ldr	r3, [pc, #772]	; (8002b58 <chprintf.constprop.0+0x558>)
 8002852:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002856:	fba3 3606 	umull	r3, r6, r3, r6
 800285a:	08f3      	lsrs	r3, r6, #3
 800285c:	461e      	mov	r6, r3
 800285e:	9309      	str	r3, [sp, #36]	; 0x24
  l = (long)num;
 8002860:	9808      	ldr	r0, [sp, #32]
 8002862:	f7fe f9d3 	bl	8000c0c <__aeabi_f2iz>
  q = p + MAX_FILLER;
 8002866:	9b02      	ldr	r3, [sp, #8]
  l = num;
 8002868:	4602      	mov	r2, r0
  q = p + MAX_FILLER;
 800286a:	f103 0c0b 	add.w	ip, r3, #11
 800286e:	46e6      	mov	lr, ip
    i = (int)(l % radix);
 8002870:	4bb9      	ldr	r3, [pc, #740]	; (8002b58 <chprintf.constprop.0+0x558>)
 8002872:	fba3 1302 	umull	r1, r3, r3, r2
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	4619      	mov	r1, r3
 800287a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800287e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    i += '0';
 8002882:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f80e 3d01 	strb.w	r3, [lr, #-1]!
  } while ((ll /= radix) != 0);
 800288a:	460a      	mov	r2, r1
 800288c:	2900      	cmp	r1, #0
 800288e:	d1ef      	bne.n	8002870 <chprintf.constprop.0+0x270>
 8002890:	9308      	str	r3, [sp, #32]
  i = (int)(p + MAX_FILLER - q);
 8002892:	9b02      	ldr	r3, [sp, #8]
 8002894:	ebac 0c0e 	sub.w	ip, ip, lr
 8002898:	4671      	mov	r1, lr
 800289a:	461a      	mov	r2, r3
 800289c:	eb03 0e0c 	add.w	lr, r3, ip
 80028a0:	9b08      	ldr	r3, [sp, #32]
 80028a2:	e001      	b.n	80028a8 <chprintf.constprop.0+0x2a8>
 80028a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 80028a8:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80028ac:	4572      	cmp	r2, lr
 80028ae:	d1f9      	bne.n	80028a4 <chprintf.constprop.0+0x2a4>
  *p++ = '.';
 80028b0:	232e      	movs	r3, #46	; 0x2e
 80028b2:	9902      	ldr	r1, [sp, #8]
 80028b4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80028b8:	4461      	add	r1, ip
 80028ba:	7013      	strb	r3, [r2, #0]
 80028bc:	9102      	str	r1, [sp, #8]
  l = (long)((num - l) * precision);
 80028be:	f7fd fe1f 	bl	8000500 <__aeabi_i2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028ca:	f7fd fccb 	bl	8000264 <__aeabi_dsub>
 80028ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80028d2:	f7fd fe7b 	bl	80005cc <__aeabi_dmul>
 80028d6:	f7fe f88b 	bl	80009f0 <__aeabi_d2iz>
    ll = num;
 80028da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  q = p + MAX_FILLER;
 80028dc:	9902      	ldr	r1, [sp, #8]
    ll = num;
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf08      	it	eq
 80028e2:	4606      	moveq	r6, r0
 80028e4:	4633      	mov	r3, r6
  q = p + MAX_FILLER;
 80028e6:	f101 0e0d 	add.w	lr, r1, #13
 80028ea:	462e      	mov	r6, r5
  *p++ = '.';
 80028ec:	f101 0c02 	add.w	ip, r1, #2
  q = p + MAX_FILLER;
 80028f0:	4672      	mov	r2, lr
 80028f2:	461d      	mov	r5, r3
 80028f4:	e000      	b.n	80028f8 <chprintf.constprop.0+0x2f8>
  } while ((ll /= radix) != 0);
 80028f6:	460a      	mov	r2, r1
    i = (int)(l % radix);
 80028f8:	4b97      	ldr	r3, [pc, #604]	; (8002b58 <chprintf.constprop.0+0x558>)
 80028fa:	fba3 1300 	umull	r1, r3, r3, r0
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	4619      	mov	r1, r3
  } while ((ll /= radix) != 0);
 8002902:	4b95      	ldr	r3, [pc, #596]	; (8002b58 <chprintf.constprop.0+0x558>)
 8002904:	fba3 3505 	umull	r3, r5, r3, r5
    i = (int)(l % radix);
 8002908:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800290c:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    i += '0';
 8002910:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002912:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002914:	08ed      	lsrs	r5, r5, #3
    l /= radix;
 8002916:	4608      	mov	r0, r1
    *--q = i;
 8002918:	f802 3c01 	strb.w	r3, [r2, #-1]
 800291c:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
  } while ((ll /= radix) != 0);
 8002920:	d1e9      	bne.n	80028f6 <chprintf.constprop.0+0x2f6>
  i = (int)(p + MAX_FILLER - q);
 8002922:	ebae 0e01 	sub.w	lr, lr, r1
 8002926:	4635      	mov	r5, r6
 8002928:	4660      	mov	r0, ip
 800292a:	4471      	add	r1, lr
 800292c:	e001      	b.n	8002932 <chprintf.constprop.0+0x332>
 800292e:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
 8002932:	4291      	cmp	r1, r2
    *p++ = *q++;
 8002934:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002938:	d1f9      	bne.n	800292e <chprintf.constprop.0+0x32e>
 800293a:	44e6      	add	lr, ip
 800293c:	ebae 0c0a 	sub.w	ip, lr, sl
 8002940:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    s = tmpbuf;
 8002944:	4656      	mov	r6, sl
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	e00d      	b.n	8002966 <chprintf.constprop.0+0x366>
 800294a:	f895 9000 	ldrb.w	r9, [r5]
      *p++ = va_arg(ap, int);
 800294e:	2200      	movs	r2, #0
 8002950:	f04f 0c01 	mov.w	ip, #1
      filler = ' ';
 8002954:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
 8002956:	f8d8 3000 	ldr.w	r3, [r8]
 800295a:	ae12      	add	r6, sp, #72	; 0x48
 800295c:	9202      	str	r2, [sp, #8]
 800295e:	f806 3d18 	strb.w	r3, [r6, #-24]!
 8002962:	f108 0804 	add.w	r8, r8, #4
    if ((width -= i) < 0)
 8002966:	ebb4 040c 	subs.w	r4, r4, ip
 800296a:	f53f af3d 	bmi.w	80027e8 <chprintf.constprop.0+0x1e8>
    if (left_align == FALSE)
 800296e:	9b03      	ldr	r3, [sp, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 8091 	bne.w	8002a98 <chprintf.constprop.0+0x498>
 8002976:	f1c4 0a00 	rsb	sl, r4, #0
    if (width < 0) {
 800297a:	2c00      	cmp	r4, #0
 800297c:	f000 808b 	beq.w	8002a96 <chprintf.constprop.0+0x496>
      if (*s == '-' && filler == '0') {
 8002980:	7831      	ldrb	r1, [r6, #0]
 8002982:	292d      	cmp	r1, #45	; 0x2d
 8002984:	f000 80d6 	beq.w	8002b34 <chprintf.constprop.0+0x534>
        streamPut(chp, (uint8_t)filler);
 8002988:	f8db 3000 	ldr.w	r3, [fp]
 800298c:	4639      	mov	r1, r7
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4658      	mov	r0, fp
 8002992:	4798      	blx	r3
      } while (++width != 0);
 8002994:	f11a 0a01 	adds.w	sl, sl, #1
 8002998:	d1f6      	bne.n	8002988 <chprintf.constprop.0+0x388>
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	4423      	add	r3, r4
 800299e:	9301      	str	r3, [sp, #4]
    while (--i >= 0) {
 80029a0:	9b02      	ldr	r3, [sp, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bfa8      	it	ge
 80029a6:	4654      	movge	r4, sl
 80029a8:	f6ff af24 	blt.w	80027f4 <chprintf.constprop.0+0x1f4>
 80029ac:	f8dd a008 	ldr.w	sl, [sp, #8]
      streamPut(chp, (uint8_t)*s++);
 80029b0:	f8db 3000 	ldr.w	r3, [fp]
    while (--i >= 0) {
 80029b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f816 1b01 	ldrb.w	r1, [r6], #1
 80029be:	4658      	mov	r0, fp
 80029c0:	4798      	blx	r3
    while (--i >= 0) {
 80029c2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80029c6:	d1f3      	bne.n	80029b0 <chprintf.constprop.0+0x3b0>
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	9a02      	ldr	r2, [sp, #8]
 80029cc:	3301      	adds	r3, #1
 80029ce:	441a      	add	r2, r3
 80029d0:	9201      	str	r2, [sp, #4]
    while (width) {
 80029d2:	2c00      	cmp	r4, #0
 80029d4:	f43f af0e 	beq.w	80027f4 <chprintf.constprop.0+0x1f4>
 80029d8:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)filler);
 80029da:	f8db 3000 	ldr.w	r3, [fp]
 80029de:	4639      	mov	r1, r7
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4658      	mov	r0, fp
 80029e4:	4798      	blx	r3
    while (width) {
 80029e6:	3e01      	subs	r6, #1
 80029e8:	d1f7      	bne.n	80029da <chprintf.constprop.0+0x3da>
 80029ea:	9b01      	ldr	r3, [sp, #4]
 80029ec:	441c      	add	r4, r3
 80029ee:	4649      	mov	r1, r9
 80029f0:	1b64      	subs	r4, r4, r5
 80029f2:	192b      	adds	r3, r5, r4
    c = *fmt++;
 80029f4:	1c6e      	adds	r6, r5, #1
    if (c == 0)
 80029f6:	b161      	cbz	r1, 8002a12 <chprintf.constprop.0+0x412>
    if (c != '%') {
 80029f8:	2925      	cmp	r1, #37	; 0x25
 80029fa:	d04a      	beq.n	8002a92 <chprintf.constprop.0+0x492>
 80029fc:	4635      	mov	r5, r6
      streamPut(chp, (uint8_t)c);
 80029fe:	f8db 3000 	ldr.w	r3, [fp]
 8002a02:	4658      	mov	r0, fp
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4798      	blx	r3
 8002a08:	7831      	ldrb	r1, [r6, #0]
 8002a0a:	192b      	adds	r3, r5, r4
    c = *fmt++;
 8002a0c:	1c6e      	adds	r6, r5, #1
    if (c == 0)
 8002a0e:	2900      	cmp	r1, #0
 8002a10:	d1f2      	bne.n	80029f8 <chprintf.constprop.0+0x3f8>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	b012      	add	sp, #72	; 0x48
 8002a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	b003      	add	sp, #12
 8002a1c:	4770      	bx	lr
 8002a1e:	f895 9000 	ldrb.w	r9, [r5]
        l = va_arg(ap, int);
 8002a22:	f8d8 1000 	ldr.w	r1, [r8]
 8002a26:	f108 0804 	add.w	r8, r8, #4
      if (l < 0) {
 8002a2a:	2900      	cmp	r1, #0
 8002a2c:	f2c0 809e 	blt.w	8002b6c <chprintf.constprop.0+0x56c>
    p = tmpbuf;
 8002a30:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8002a34:	4652      	mov	r2, sl
  q = p + MAX_FILLER;
 8002a36:	f102 0e0b 	add.w	lr, r2, #11
 8002a3a:	4670      	mov	r0, lr
    i = (int)(l % radix);
 8002a3c:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <chprintf.constprop.0+0x558>)
 8002a3e:	fba3 6301 	umull	r6, r3, r3, r1
 8002a42:	08db      	lsrs	r3, r3, #3
 8002a44:	461e      	mov	r6, r3
 8002a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a4a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    i += '0';
 8002a4e:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8002a56:	4631      	mov	r1, r6
 8002a58:	2e00      	cmp	r6, #0
 8002a5a:	d1ef      	bne.n	8002a3c <chprintf.constprop.0+0x43c>
  i = (int)(p + MAX_FILLER - q);
 8002a5c:	ebae 0100 	sub.w	r1, lr, r0
 8002a60:	4411      	add	r1, r2
 8002a62:	e001      	b.n	8002a68 <chprintf.constprop.0+0x468>
 8002a64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8002a68:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	d1f9      	bne.n	8002a64 <chprintf.constprop.0+0x464>
 8002a70:	eba2 0c0a 	sub.w	ip, r2, sl
 8002a74:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    s = tmpbuf;
 8002a78:	4656      	mov	r6, sl
 8002a7a:	9302      	str	r3, [sp, #8]
 8002a7c:	e773      	b.n	8002966 <chprintf.constprop.0+0x366>
 8002a7e:	f895 9000 	ldrb.w	r9, [r5]
      *p++ = c;
 8002a82:	2300      	movs	r3, #0
 8002a84:	ae12      	add	r6, sp, #72	; 0x48
 8002a86:	9302      	str	r3, [sp, #8]
 8002a88:	f04f 0c01 	mov.w	ip, #1
 8002a8c:	f806 2d18 	strb.w	r2, [r6, #-24]!
 8002a90:	e769      	b.n	8002966 <chprintf.constprop.0+0x366>
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	e5c0      	b.n	8002618 <chprintf.constprop.0+0x18>
    if (width < 0) {
 8002a96:	4654      	mov	r4, sl
    while (--i >= 0) {
 8002a98:	9b02      	ldr	r3, [sp, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da86      	bge.n	80029ac <chprintf.constprop.0+0x3ac>
 8002a9e:	e798      	b.n	80029d2 <chprintf.constprop.0+0x3d2>
    switch (c) {
 8002aa0:	f04f 0c0a 	mov.w	ip, #10
 8002aa4:	f895 9000 	ldrb.w	r9, [r5]
  q = p + MAX_FILLER;
 8002aa8:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
        l = va_arg(ap, unsigned int);
 8002aac:	f8d8 2000 	ldr.w	r2, [r8]
  q = p + MAX_FILLER;
 8002ab0:	4631      	mov	r1, r6
        l = va_arg(ap, unsigned int);
 8002ab2:	f108 0804 	add.w	r8, r8, #4
 8002ab6:	e000      	b.n	8002aba <chprintf.constprop.0+0x4ba>
  } while ((ll /= radix) != 0);
 8002ab8:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8002aba:	fbb2 fefc 	udiv	lr, r2, ip
 8002abe:	fb0c 221e 	mls	r2, ip, lr, r2
    i += '0';
 8002ac2:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8002ac6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002ac8:	bfc8      	it	gt
 8002aca:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    l /= radix;
 8002ace:	4672      	mov	r2, lr
    *--q = i;
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002ad6:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d1ed      	bne.n	8002ab8 <chprintf.constprop.0+0x4b8>
  i = (int)(p + MAX_FILLER - q);
 8002adc:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8002ae0:	eba6 0c00 	sub.w	ip, r6, r0
 8002ae4:	46d6      	mov	lr, sl
 8002ae6:	4460      	add	r0, ip
 8002ae8:	e001      	b.n	8002aee <chprintf.constprop.0+0x4ee>
 8002aea:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
 8002aee:	4288      	cmp	r0, r1
    *p++ = *q++;
 8002af0:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 8002af4:	d1f9      	bne.n	8002aea <chprintf.constprop.0+0x4ea>
 8002af6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    s = tmpbuf;
 8002afa:	4656      	mov	r6, sl
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	e732      	b.n	8002966 <chprintf.constprop.0+0x366>
    switch (c) {
 8002b00:	f04f 0c08 	mov.w	ip, #8
 8002b04:	e7ce      	b.n	8002aa4 <chprintf.constprop.0+0x4a4>
 8002b06:	f04f 0c10 	mov.w	ip, #16
 8002b0a:	e7cb      	b.n	8002aa4 <chprintf.constprop.0+0x4a4>
 8002b0c:	f04f 0c08 	mov.w	ip, #8
 8002b10:	e7ca      	b.n	8002aa8 <chprintf.constprop.0+0x4a8>
 8002b12:	f04f 0c0a 	mov.w	ip, #10
 8002b16:	e7c7      	b.n	8002aa8 <chprintf.constprop.0+0x4a8>
 8002b18:	f04f 0c10 	mov.w	ip, #16
 8002b1c:	e7c4      	b.n	8002aa8 <chprintf.constprop.0+0x4a8>
      for (p = s; *p && (--precision >= 0); p++)
 8002b1e:	7833      	ldrb	r3, [r6, #0]
 8002b20:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae4c 	bne.w	80027c2 <chprintf.constprop.0+0x1c2>
    s = tmpbuf;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b2e:	2720      	movs	r7, #32
 8002b30:	9302      	str	r3, [sp, #8]
 8002b32:	e71c      	b.n	800296e <chprintf.constprop.0+0x36e>
      if (*s == '-' && filler == '0') {
 8002b34:	2f30      	cmp	r7, #48	; 0x30
 8002b36:	f47f af27 	bne.w	8002988 <chprintf.constprop.0+0x388>
        streamPut(chp, (uint8_t)*s++);
 8002b3a:	f8db 2000 	ldr.w	r2, [fp]
 8002b3e:	4658      	mov	r0, fp
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	4790      	blx	r2
        n++;
 8002b44:	9b01      	ldr	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 8002b46:	3601      	adds	r6, #1
        n++;
 8002b48:	3301      	adds	r3, #1
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	9b02      	ldr	r3, [sp, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	e719      	b.n	8002988 <chprintf.constprop.0+0x388>
 8002b54:	08002d64 	.word	0x08002d64
 8002b58:	cccccccd 	.word	0xcccccccd
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002b5c:	4e14      	ldr	r6, [pc, #80]	; (8002bb0 <chprintf.constprop.0+0x5b0>)
 8002b5e:	a312      	add	r3, pc, #72	; (adr r3, 8002ba8 <chprintf.constprop.0+0x5a8>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	9609      	str	r6, [sp, #36]	; 0x24
 8002b66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b6a:	e679      	b.n	8002860 <chprintf.constprop.0+0x260>
        *p++ = '-';
 8002b6c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002b6e:	4249      	negs	r1, r1
        *p++ = '-';
 8002b70:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002b74:	f10d 0231 	add.w	r2, sp, #49	; 0x31
 8002b78:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8002b7c:	e75b      	b.n	8002a36 <chprintf.constprop.0+0x436>
        *p++ = '-';
 8002b7e:	222d      	movs	r2, #45	; 0x2d
        f = -f;
 8002b80:	9908      	ldr	r1, [sp, #32]
        *p++ = '-';
 8002b82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        f = -f;
 8002b86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
        *p++ = '-';
 8002b8a:	f10d 0231 	add.w	r2, sp, #49	; 0x31
        f = -f;
 8002b8e:	9108      	str	r1, [sp, #32]
        *p++ = '-';
 8002b90:	9202      	str	r2, [sp, #8]
 8002b92:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8002b96:	e64a      	b.n	800282e <chprintf.constprop.0+0x22e>
      if (precision == 0)
 8002b98:	b10b      	cbz	r3, 8002b9e <chprintf.constprop.0+0x59e>
        s = "(null)";
 8002b9a:	4e06      	ldr	r6, [pc, #24]	; (8002bb4 <chprintf.constprop.0+0x5b4>)
 8002b9c:	e60d      	b.n	80027ba <chprintf.constprop.0+0x1ba>
      for (p = s; *p && (--precision >= 0); p++)
 8002b9e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
      if (precision == 0)
 8002ba2:	4e04      	ldr	r6, [pc, #16]	; (8002bb4 <chprintf.constprop.0+0x5b4>)
 8002ba4:	e60d      	b.n	80027c2 <chprintf.constprop.0+0x1c2>
 8002ba6:	bf00      	nop
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	41cdcd65 	.word	0x41cdcd65
 8002bb0:	05f5e100 	.word	0x05f5e100
 8002bb4:	08002d5c 	.word	0x08002d5c
