
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000160 <Reset_Handler>:
 8000160:	b672      	cpsid	i
 8000162:	4826      	ldr	r0, [pc, #152]	; (80001fc <endfiniloop+0x6>)
 8000164:	f380 8809 	msr	PSP, r0
 8000168:	4825      	ldr	r0, [pc, #148]	; (8000200 <endfiniloop+0xa>)
 800016a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800016e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000172:	6008      	str	r0, [r1, #0]
 8000174:	2002      	movs	r0, #2
 8000176:	f380 8814 	msr	CONTROL, r0
 800017a:	f3bf 8f6f 	isb	sy
 800017e:	f001 fe8f 	bl	8001ea0 <__core_init>
 8000182:	f001 fcb5 	bl	8001af0 <__early_init>
 8000186:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800018a:	491e      	ldr	r1, [pc, #120]	; (8000204 <endfiniloop+0xe>)
 800018c:	4a1e      	ldr	r2, [pc, #120]	; (8000208 <endfiniloop+0x12>)

0800018e <msloop>:
 800018e:	4291      	cmp	r1, r2
 8000190:	bf3c      	itt	cc
 8000192:	f841 0b04 	strcc.w	r0, [r1], #4
 8000196:	e7fa      	bcc.n	800018e <msloop>
 8000198:	491c      	ldr	r1, [pc, #112]	; (800020c <endfiniloop+0x16>)
 800019a:	4a18      	ldr	r2, [pc, #96]	; (80001fc <endfiniloop+0x6>)

0800019c <psloop>:
 800019c:	4291      	cmp	r1, r2
 800019e:	bf3c      	itt	cc
 80001a0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001a4:	e7fa      	bcc.n	800019c <psloop>
 80001a6:	491a      	ldr	r1, [pc, #104]	; (8000210 <endfiniloop+0x1a>)
 80001a8:	4a1a      	ldr	r2, [pc, #104]	; (8000214 <endfiniloop+0x1e>)
 80001aa:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <endfiniloop+0x22>)

080001ac <dloop>:
 80001ac:	429a      	cmp	r2, r3
 80001ae:	bf3e      	ittt	cc
 80001b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001b4:	f842 0b04 	strcc.w	r0, [r2], #4
 80001b8:	e7f8      	bcc.n	80001ac <dloop>
 80001ba:	2000      	movs	r0, #0
 80001bc:	4917      	ldr	r1, [pc, #92]	; (800021c <endfiniloop+0x26>)
 80001be:	4a18      	ldr	r2, [pc, #96]	; (8000220 <endfiniloop+0x2a>)

080001c0 <bloop>:
 80001c0:	4291      	cmp	r1, r2
 80001c2:	bf3c      	itt	cc
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c8:	e7fa      	bcc.n	80001c0 <bloop>
 80001ca:	f001 fe21 	bl	8001e10 <__init_ram_areas>
 80001ce:	f001 fe5f 	bl	8001e90 <__late_init>
 80001d2:	4c14      	ldr	r4, [pc, #80]	; (8000224 <endfiniloop+0x2e>)
 80001d4:	4d14      	ldr	r5, [pc, #80]	; (8000228 <endfiniloop+0x32>)

080001d6 <initloop>:
 80001d6:	42ac      	cmp	r4, r5
 80001d8:	da03      	bge.n	80001e2 <endinitloop>
 80001da:	f854 1b04 	ldr.w	r1, [r4], #4
 80001de:	4788      	blx	r1
 80001e0:	e7f9      	b.n	80001d6 <initloop>

080001e2 <endinitloop>:
 80001e2:	f001 fe9d 	bl	8001f20 <main>
 80001e6:	4c11      	ldr	r4, [pc, #68]	; (800022c <endfiniloop+0x36>)
 80001e8:	4d11      	ldr	r5, [pc, #68]	; (8000230 <endfiniloop+0x3a>)

080001ea <finiloop>:
 80001ea:	42ac      	cmp	r4, r5
 80001ec:	da03      	bge.n	80001f6 <endfiniloop>
 80001ee:	f854 1b04 	ldr.w	r1, [r4], #4
 80001f2:	4788      	blx	r1
 80001f4:	e7f9      	b.n	80001ea <finiloop>

080001f6 <endfiniloop>:
 80001f6:	f001 be43 	b.w	8001e80 <__default_exit>
 80001fa:	0000      	.short	0x0000
 80001fc:	20000800 	.word	0x20000800
 8000200:	08000000 	.word	0x08000000
 8000204:	20000000 	.word	0x20000000
 8000208:	20000400 	.word	0x20000400
 800020c:	20000400 	.word	0x20000400
 8000210:	08002934 	.word	0x08002934
 8000214:	20000800 	.word	0x20000800
 8000218:	2000081c 	.word	0x2000081c
 800021c:	20000820 	.word	0x20000820
 8000220:	20000be8 	.word	0x20000be8
 8000224:	08000160 	.word	0x08000160
 8000228:	08000160 	.word	0x08000160
 800022c:	08000160 	.word	0x08000160
 8000230:	08000160 	.word	0x08000160

08000234 <_port_switch>:
 8000234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000238:	f8c1 d00c 	str.w	sp, [r1, #12]
 800023c:	68c3      	ldr	r3, [r0, #12]
 800023e:	469d      	mov	sp, r3
 8000240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000244 <_port_thread_start>:
 8000244:	2300      	movs	r3, #0
 8000246:	f383 8811 	msr	BASEPRI, r3
 800024a:	4628      	mov	r0, r5
 800024c:	47a0      	blx	r4
 800024e:	2000      	movs	r0, #0
 8000250:	f001 fdb6 	bl	8001dc0 <chThdExit>

08000254 <_port_switch_from_isr>:
 8000254:	f001 fc9c 	bl	8001b90 <chSchDoReschedule>

08000258 <_port_exit_from_isr>:
 8000258:	df00      	svc	0
 800025a:	e7fe      	b.n	800025a <_port_exit_from_isr+0x2>

0800025c <__aeabi_drsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000260:	e002      	b.n	8000268 <__adddf3>
 8000262:	bf00      	nop

08000264 <__aeabi_dsub>:
 8000264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000268 <__adddf3>:
 8000268:	b530      	push	{r4, r5, lr}
 800026a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000272:	ea94 0f05 	teq	r4, r5
 8000276:	bf08      	it	eq
 8000278:	ea90 0f02 	teqeq	r0, r2
 800027c:	bf1f      	itttt	ne
 800027e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000282:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800028a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028e:	f000 80e2 	beq.w	8000456 <__adddf3+0x1ee>
 8000292:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800029a:	bfb8      	it	lt
 800029c:	426d      	neglt	r5, r5
 800029e:	dd0c      	ble.n	80002ba <__adddf3+0x52>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	ea82 0000 	eor.w	r0, r2, r0
 80002ae:	ea83 0101 	eor.w	r1, r3, r1
 80002b2:	ea80 0202 	eor.w	r2, r0, r2
 80002b6:	ea81 0303 	eor.w	r3, r1, r3
 80002ba:	2d36      	cmp	r5, #54	; 0x36
 80002bc:	bf88      	it	hi
 80002be:	bd30      	pophi	{r4, r5, pc}
 80002c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x70>
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x84>
 80002e6:	4252      	negs	r2, r2
 80002e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ec:	ea94 0f05 	teq	r4, r5
 80002f0:	f000 80a7 	beq.w	8000442 <__adddf3+0x1da>
 80002f4:	f1a4 0401 	sub.w	r4, r4, #1
 80002f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002fc:	db0d      	blt.n	800031a <__adddf3+0xb2>
 80002fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000302:	fa22 f205 	lsr.w	r2, r2, r5
 8000306:	1880      	adds	r0, r0, r2
 8000308:	f141 0100 	adc.w	r1, r1, #0
 800030c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000310:	1880      	adds	r0, r0, r2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	4159      	adcs	r1, r3
 8000318:	e00e      	b.n	8000338 <__adddf3+0xd0>
 800031a:	f1a5 0520 	sub.w	r5, r5, #32
 800031e:	f10e 0e20 	add.w	lr, lr, #32
 8000322:	2a01      	cmp	r2, #1
 8000324:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000328:	bf28      	it	cs
 800032a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	18c0      	adds	r0, r0, r3
 8000334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800033c:	d507      	bpl.n	800034e <__adddf3+0xe6>
 800033e:	f04f 0e00 	mov.w	lr, #0
 8000342:	f1dc 0c00 	rsbs	ip, ip, #0
 8000346:	eb7e 0000 	sbcs.w	r0, lr, r0
 800034a:	eb6e 0101 	sbc.w	r1, lr, r1
 800034e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000352:	d31b      	bcc.n	800038c <__adddf3+0x124>
 8000354:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000358:	d30c      	bcc.n	8000374 <__adddf3+0x10c>
 800035a:	0849      	lsrs	r1, r1, #1
 800035c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000360:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000364:	f104 0401 	add.w	r4, r4, #1
 8000368:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800036c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000370:	f080 809a 	bcs.w	80004a8 <__adddf3+0x240>
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	ea41 0105 	orr.w	r1, r1, r5
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000390:	4140      	adcs	r0, r0
 8000392:	eb41 0101 	adc.w	r1, r1, r1
 8000396:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039a:	f1a4 0401 	sub.w	r4, r4, #1
 800039e:	d1e9      	bne.n	8000374 <__adddf3+0x10c>
 80003a0:	f091 0f00 	teq	r1, #0
 80003a4:	bf04      	itt	eq
 80003a6:	4601      	moveq	r1, r0
 80003a8:	2000      	moveq	r0, #0
 80003aa:	fab1 f381 	clz	r3, r1
 80003ae:	bf08      	it	eq
 80003b0:	3320      	addeq	r3, #32
 80003b2:	f1a3 030b 	sub.w	r3, r3, #11
 80003b6:	f1b3 0220 	subs.w	r2, r3, #32
 80003ba:	da0c      	bge.n	80003d6 <__adddf3+0x16e>
 80003bc:	320c      	adds	r2, #12
 80003be:	dd08      	ble.n	80003d2 <__adddf3+0x16a>
 80003c0:	f102 0c14 	add.w	ip, r2, #20
 80003c4:	f1c2 020c 	rsb	r2, r2, #12
 80003c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003cc:	fa21 f102 	lsr.w	r1, r1, r2
 80003d0:	e00c      	b.n	80003ec <__adddf3+0x184>
 80003d2:	f102 0214 	add.w	r2, r2, #20
 80003d6:	bfd8      	it	le
 80003d8:	f1c2 0c20 	rsble	ip, r2, #32
 80003dc:	fa01 f102 	lsl.w	r1, r1, r2
 80003e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e4:	bfdc      	itt	le
 80003e6:	ea41 010c 	orrle.w	r1, r1, ip
 80003ea:	4090      	lslle	r0, r2
 80003ec:	1ae4      	subs	r4, r4, r3
 80003ee:	bfa2      	ittt	ge
 80003f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f4:	4329      	orrge	r1, r5
 80003f6:	bd30      	popge	{r4, r5, pc}
 80003f8:	ea6f 0404 	mvn.w	r4, r4
 80003fc:	3c1f      	subs	r4, #31
 80003fe:	da1c      	bge.n	800043a <__adddf3+0x1d2>
 8000400:	340c      	adds	r4, #12
 8000402:	dc0e      	bgt.n	8000422 <__adddf3+0x1ba>
 8000404:	f104 0414 	add.w	r4, r4, #20
 8000408:	f1c4 0220 	rsb	r2, r4, #32
 800040c:	fa20 f004 	lsr.w	r0, r0, r4
 8000410:	fa01 f302 	lsl.w	r3, r1, r2
 8000414:	ea40 0003 	orr.w	r0, r0, r3
 8000418:	fa21 f304 	lsr.w	r3, r1, r4
 800041c:	ea45 0103 	orr.w	r1, r5, r3
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	f1c4 040c 	rsb	r4, r4, #12
 8000426:	f1c4 0220 	rsb	r2, r4, #32
 800042a:	fa20 f002 	lsr.w	r0, r0, r2
 800042e:	fa01 f304 	lsl.w	r3, r1, r4
 8000432:	ea40 0003 	orr.w	r0, r0, r3
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	fa21 f004 	lsr.w	r0, r1, r4
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f094 0f00 	teq	r4, #0
 8000446:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800044a:	bf06      	itte	eq
 800044c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000450:	3401      	addeq	r4, #1
 8000452:	3d01      	subne	r5, #1
 8000454:	e74e      	b.n	80002f4 <__adddf3+0x8c>
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf18      	it	ne
 800045c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000460:	d029      	beq.n	80004b6 <__adddf3+0x24e>
 8000462:	ea94 0f05 	teq	r4, r5
 8000466:	bf08      	it	eq
 8000468:	ea90 0f02 	teqeq	r0, r2
 800046c:	d005      	beq.n	800047a <__adddf3+0x212>
 800046e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000472:	bf04      	itt	eq
 8000474:	4619      	moveq	r1, r3
 8000476:	4610      	moveq	r0, r2
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea91 0f03 	teq	r1, r3
 800047e:	bf1e      	ittt	ne
 8000480:	2100      	movne	r1, #0
 8000482:	2000      	movne	r0, #0
 8000484:	bd30      	popne	{r4, r5, pc}
 8000486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800048a:	d105      	bne.n	8000498 <__adddf3+0x230>
 800048c:	0040      	lsls	r0, r0, #1
 800048e:	4149      	adcs	r1, r1
 8000490:	bf28      	it	cs
 8000492:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000496:	bd30      	pop	{r4, r5, pc}
 8000498:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800049c:	bf3c      	itt	cc
 800049e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004a2:	bd30      	popcc	{r4, r5, pc}
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf1a      	itte	ne
 80004bc:	4619      	movne	r1, r3
 80004be:	4610      	movne	r0, r2
 80004c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c4:	bf1c      	itt	ne
 80004c6:	460b      	movne	r3, r1
 80004c8:	4602      	movne	r2, r0
 80004ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ce:	bf06      	itte	eq
 80004d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d4:	ea91 0f03 	teqeq	r1, r3
 80004d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_ui2d>:
 80004e0:	f090 0f00 	teq	r0, #0
 80004e4:	bf04      	itt	eq
 80004e6:	2100      	moveq	r1, #0
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f4:	f04f 0500 	mov.w	r5, #0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e750      	b.n	80003a0 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000518:	bf48      	it	mi
 800051a:	4240      	negmi	r0, r0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e73e      	b.n	80003a0 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_f2d>:
 8000524:	0042      	lsls	r2, r0, #1
 8000526:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800052a:	ea4f 0131 	mov.w	r1, r1, rrx
 800052e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000532:	bf1f      	itttt	ne
 8000534:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800053c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000540:	4770      	bxne	lr
 8000542:	f092 0f00 	teq	r2, #0
 8000546:	bf14      	ite	ne
 8000548:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e720      	b.n	80003a0 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aedc 	beq.w	800034e <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6c1      	b.n	800034e <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__aeabi_d2iz>:
 80009f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f8:	d215      	bcs.n	8000a26 <__aeabi_d2iz+0x36>
 80009fa:	d511      	bpl.n	8000a20 <__aeabi_d2iz+0x30>
 80009fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a04:	d912      	bls.n	8000a2c <__aeabi_d2iz+0x3c>
 8000a06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	4240      	negne	r0, r0
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d105      	bne.n	8000a38 <__aeabi_d2iz+0x48>
 8000a2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	bf08      	it	eq
 8000a32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a36:	4770      	bx	lr
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_d2f>:
 8000a40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a48:	bf24      	itt	cs
 8000a4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a52:	d90d      	bls.n	8000a70 <__aeabi_d2f+0x30>
 8000a54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a68:	bf08      	it	eq
 8000a6a:	f020 0001 	biceq.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a74:	d121      	bne.n	8000aba <__aeabi_d2f+0x7a>
 8000a76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7a:	bfbc      	itt	lt
 8000a7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	4770      	bxlt	lr
 8000a82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8a:	f1c2 0218 	rsb	r2, r2, #24
 8000a8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a96:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9a:	bf18      	it	ne
 8000a9c:	f040 0001 	orrne.w	r0, r0, #1
 8000aa0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aac:	ea40 000c 	orr.w	r0, r0, ip
 8000ab0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab8:	e7cc      	b.n	8000a54 <__aeabi_d2f+0x14>
 8000aba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000abe:	d107      	bne.n	8000ad0 <__aeabi_d2f+0x90>
 8000ac0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac4:	bf1e      	ittt	ne
 8000ac6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ace:	4770      	bxne	lr
 8000ad0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__gesf2>:
 8000ae0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae4:	e006      	b.n	8000af4 <__cmpsf2+0x4>
 8000ae6:	bf00      	nop

08000ae8 <__lesf2>:
 8000ae8:	f04f 0c01 	mov.w	ip, #1
 8000aec:	e002      	b.n	8000af4 <__cmpsf2+0x4>
 8000aee:	bf00      	nop

08000af0 <__cmpsf2>:
 8000af0:	f04f 0c01 	mov.w	ip, #1
 8000af4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d011      	beq.n	8000b30 <__cmpsf2+0x40>
 8000b0c:	b001      	add	sp, #4
 8000b0e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b12:	bf18      	it	ne
 8000b14:	ea90 0f01 	teqne	r0, r1
 8000b18:	bf58      	it	pl
 8000b1a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b1e:	bf88      	it	hi
 8000b20:	17c8      	asrhi	r0, r1, #31
 8000b22:	bf38      	it	cc
 8000b24:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b28:	bf18      	it	ne
 8000b2a:	f040 0001 	orrne.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	d102      	bne.n	8000b3c <__cmpsf2+0x4c>
 8000b36:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b3a:	d105      	bne.n	8000b48 <__cmpsf2+0x58>
 8000b3c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b40:	d1e4      	bne.n	8000b0c <__cmpsf2+0x1c>
 8000b42:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b46:	d0e1      	beq.n	8000b0c <__cmpsf2+0x1c>
 8000b48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_cfrcmple>:
 8000b50:	4684      	mov	ip, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4661      	mov	r1, ip
 8000b56:	e7ff      	b.n	8000b58 <__aeabi_cfcmpeq>

08000b58 <__aeabi_cfcmpeq>:
 8000b58:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b5a:	f7ff ffc9 	bl	8000af0 <__cmpsf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b68 <__aeabi_fcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cfcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cfcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cfcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffd2 	bl	8000b50 <__aeabi_cfrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc8 	bl	8000b50 <__aeabi_cfrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_f2iz>:
 8000bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bd4:	d30f      	bcc.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000bd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_f2iz+0x30>
 8000be0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bec:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf0:	bf18      	it	ne
 8000bf2:	4240      	negne	r0, r0
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr
 8000bfc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c00:	d101      	bne.n	8000c06 <__aeabi_f2iz+0x3a>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d105      	bne.n	8000c12 <__aeabi_f2iz+0x46>
 8000c06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c0a:	bf08      	it	eq
 8000c0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr
	...

08000c20 <icuwidthcb.lto_priv.36>:

static icucnt_t widths [40];


static void icuwidthcb(ICUDriver *icup) {
  icucnt_t width = icuGetWidthX(icup);
 8000c20:	6903      	ldr	r3, [r0, #16]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
  if(width >= DHT_START_BIT_WIDTH){
 8000c26:	2b4f      	cmp	r3, #79	; 0x4f
 8000c28:	d82f      	bhi.n	8000c8a <icuwidthcb.lto_priv.36+0x6a>
static void icuwidthcb(ICUDriver *icup) {
 8000c2a:	b430      	push	{r4, r5}
    /* starting bit resetting the bit counter */
    bit_counter = 0;
  }
  else{
    /* Recording current width. Just for fun  */
    widths[bit_counter] = width;
 8000c2c:	491c      	ldr	r1, [pc, #112]	; (8000ca0 <icuwidthcb.lto_priv.36+0x80>)
    if(width > DHT_LOW_BIT_WIDTH){
 8000c2e:	2b1c      	cmp	r3, #28
    widths[bit_counter] = width;
 8000c30:	780a      	ldrb	r2, [r1, #0]
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000c32:	ea6f 0002 	mvn.w	r0, r2
    if(width > DHT_LOW_BIT_WIDTH){
 8000c36:	d816      	bhi.n	8000c66 <icuwidthcb.lto_priv.36+0x46>
    }
    else{
      tmp &= ~(1 << (7 - (bit_counter % 8)));
 8000c38:	2501      	movs	r5, #1
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <icuwidthcb.lto_priv.36+0x84>)
 8000c3c:	f000 0007 	and.w	r0, r0, #7
 8000c40:	781c      	ldrb	r4, [r3, #0]
 8000c42:	fa05 f000 	lsl.w	r0, r5, r0
 8000c46:	ea24 0000 	bic.w	r0, r4, r0
    }
    /* When bit_counter is 7, tmp contains the bit from 0 to 7 corresponding to
       The Humidity Rate integer part (Decimal part is 0 on DHT 11) */
    if(bit_counter == 7)
 8000c4a:	2a07      	cmp	r2, #7
      tmp &= ~(1 << (7 - (bit_counter % 8)));
 8000c4c:	7018      	strb	r0, [r3, #0]
    if(bit_counter == 7)
 8000c4e:	d015      	beq.n	8000c7c <icuwidthcb.lto_priv.36+0x5c>
      HR = tmp;
    /* When bit_counter is 23, tmp contains the bit from 16 to 23 corresponding to
       The Temperature integer part (Decimal part is 0 on DHT 11) */
    if(bit_counter == 23)
 8000c50:	2a17      	cmp	r2, #23
 8000c52:	d01e      	beq.n	8000c92 <icuwidthcb.lto_priv.36+0x72>
      TEMP = tmp;
    /* When bit_counter is 39, tmp contains the bit from 32 to 39 corresponding to
       The Check sum value */
    if(bit_counter == 39)
 8000c54:	2a27      	cmp	r2, #39	; 0x27
 8000c56:	d102      	bne.n	8000c5e <icuwidthcb.lto_priv.36+0x3e>
      CHECK_SUM = tmp;
 8000c58:	7818      	ldrb	r0, [r3, #0]
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <icuwidthcb.lto_priv.36+0x88>)
 8000c5c:	7018      	strb	r0, [r3, #0]
    bit_counter++;
 8000c5e:	3201      	adds	r2, #1
 8000c60:	700a      	strb	r2, [r1, #0]
  }
}
 8000c62:	bc30      	pop	{r4, r5}
 8000c64:	4770      	bx	lr
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000c66:	2401      	movs	r4, #1
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <icuwidthcb.lto_priv.36+0x84>)
 8000c6a:	f000 0007 	and.w	r0, r0, #7
 8000c6e:	781d      	ldrb	r5, [r3, #0]
 8000c70:	fa04 f000 	lsl.w	r0, r4, r0
 8000c74:	4328      	orrs	r0, r5
    if(bit_counter == 7)
 8000c76:	2a07      	cmp	r2, #7
      tmp |= (1 << (7 - (bit_counter % 8)));
 8000c78:	7018      	strb	r0, [r3, #0]
    if(bit_counter == 7)
 8000c7a:	d1e9      	bne.n	8000c50 <icuwidthcb.lto_priv.36+0x30>
      HR = tmp;
 8000c7c:	7818      	ldrb	r0, [r3, #0]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <icuwidthcb.lto_priv.36+0x8c>)
    bit_counter++;
 8000c80:	3201      	adds	r2, #1
      HR = tmp;
 8000c82:	7018      	strb	r0, [r3, #0]
    bit_counter++;
 8000c84:	700a      	strb	r2, [r1, #0]
}
 8000c86:	bc30      	pop	{r4, r5}
 8000c88:	4770      	bx	lr
    bit_counter = 0;
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <icuwidthcb.lto_priv.36+0x80>)
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	4770      	bx	lr
      TEMP = tmp;
 8000c92:	7818      	ldrb	r0, [r3, #0]
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <icuwidthcb.lto_priv.36+0x90>)
    bit_counter++;
 8000c96:	3201      	adds	r2, #1
      TEMP = tmp;
 8000c98:	7018      	strb	r0, [r3, #0]
    bit_counter++;
 8000c9a:	700a      	strb	r2, [r1, #0]
}
 8000c9c:	bc30      	pop	{r4, r5}
 8000c9e:	4770      	bx	lr
 8000ca0:	200008a8 	.word	0x200008a8
 8000ca4:	20000af9 	.word	0x20000af9
 8000ca8:	20000820 	.word	0x20000820
 8000cac:	20000821 	.word	0x20000821
 8000cb0:	2000086c 	.word	0x2000086c
	...

08000cc0 <notify3.lto_priv.35>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8000cc0:	4a02      	ldr	r2, [pc, #8]	; (8000ccc <notify3.lto_priv.35+0xc>)
 8000cc2:	68d3      	ldr	r3, [r2, #12]
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	60d3      	str	r3, [r2, #12]
 8000cca:	4770      	bx	lr
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <_port_irq_epilogue+0x4c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000cde:	d102      	bne.n	8000ce6 <_port_irq_epilogue+0x16>
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000cea:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000cee:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
 8000cf2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 8000cf6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000cfa:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <_port_irq_epilogue+0x50>)
 8000d00:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000d02:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000d04:	6889      	ldr	r1, [r1, #8]
 8000d06:	6892      	ldr	r2, [r2, #8]
 8000d08:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000d0a:	bf8c      	ite	hi
 8000d0c:	4a05      	ldrhi	r2, [pc, #20]	; (8000d24 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000d0e:	4a06      	ldrls	r2, [pc, #24]	; (8000d28 <_port_irq_epilogue+0x58>)
 8000d10:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	20000b78 	.word	0x20000b78
 8000d24:	08000255 	.word	0x08000255
 8000d28:	08000258 	.word	0x08000258
 8000d2c:	00000000 	.word	0x00000000

08000d30 <VectorA4>:
/**
 * @brief   TIM1 compare interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000d30:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 8000d32:	4d24      	ldr	r5, [pc, #144]	; (8000dc4 <VectorA4+0x94>)
 8000d34:	68eb      	ldr	r3, [r5, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000d36:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 8000d38:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	4014      	ands	r4, r2
 8000d3e:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 8000d40:	43d2      	mvns	r2, r2
 8000d42:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8000d44:	7d0b      	ldrb	r3, [r1, #20]
 8000d46:	b993      	cbnz	r3, 8000d6e <VectorA4+0x3e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000d48:	0760      	lsls	r0, r4, #29
 8000d4a:	d52e      	bpl.n	8000daa <VectorA4+0x7a>
      _icu_isr_invoke_width_cb(icup);
 8000d4c:	782b      	ldrb	r3, [r5, #0]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d027      	beq.n	8000da2 <VectorA4+0x72>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000d52:	07a1      	lsls	r1, r4, #30
 8000d54:	d412      	bmi.n	8000d7c <VectorA4+0x4c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8000d56:	07e4      	lsls	r4, r4, #31
 8000d58:	d505      	bpl.n	8000d66 <VectorA4+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 8000d5a:	686b      	ldr	r3, [r5, #4]
 8000d5c:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <VectorA4+0x94>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	4798      	blx	r3
 8000d62:	2303      	movs	r3, #3
 8000d64:	702b      	strb	r3, [r5, #0]
}
 8000d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 8000d6a:	f7ff bfb1 	b.w	8000cd0 <_port_irq_epilogue>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000d6e:	07a2      	lsls	r2, r4, #30
 8000d70:	d50b      	bpl.n	8000d8a <VectorA4+0x5a>
      _icu_isr_invoke_width_cb(icup);
 8000d72:	782b      	ldrb	r3, [r5, #0]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d004      	beq.n	8000d82 <VectorA4+0x52>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000d78:	0763      	lsls	r3, r4, #29
 8000d7a:	d5ec      	bpl.n	8000d56 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	702b      	strb	r3, [r5, #0]
 8000d80:	e7e9      	b.n	8000d56 <VectorA4+0x26>
      _icu_isr_invoke_width_cb(icup);
 8000d82:	688b      	ldr	r3, [r1, #8]
 8000d84:	b1d3      	cbz	r3, 8000dbc <VectorA4+0x8c>
 8000d86:	4628      	mov	r0, r5
 8000d88:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000d8a:	0763      	lsls	r3, r4, #29
 8000d8c:	d5e3      	bpl.n	8000d56 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000d8e:	782b      	ldrb	r3, [r5, #0]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d1f3      	bne.n	8000d7c <VectorA4+0x4c>
 8000d94:	6869      	ldr	r1, [r5, #4]
 8000d96:	68cb      	ldr	r3, [r1, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0ef      	beq.n	8000d7c <VectorA4+0x4c>
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <VectorA4+0x94>)
 8000d9e:	4798      	blx	r3
 8000da0:	e7ec      	b.n	8000d7c <VectorA4+0x4c>
      _icu_isr_invoke_width_cb(icup);
 8000da2:	688b      	ldr	r3, [r1, #8]
 8000da4:	b13b      	cbz	r3, 8000db6 <VectorA4+0x86>
 8000da6:	4628      	mov	r0, r5
 8000da8:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000daa:	07a1      	lsls	r1, r4, #30
 8000dac:	d5d3      	bpl.n	8000d56 <VectorA4+0x26>
      _icu_isr_invoke_period_cb(icup);
 8000dae:	782b      	ldrb	r3, [r5, #0]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d1e3      	bne.n	8000d7c <VectorA4+0x4c>
 8000db4:	e7ee      	b.n	8000d94 <VectorA4+0x64>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8000db6:	07a0      	lsls	r0, r4, #30
 8000db8:	d4ed      	bmi.n	8000d96 <VectorA4+0x66>
 8000dba:	e7cc      	b.n	8000d56 <VectorA4+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8000dbc:	0762      	lsls	r2, r4, #29
 8000dbe:	d4ea      	bmi.n	8000d96 <VectorA4+0x66>
 8000dc0:	e7c9      	b.n	8000d56 <VectorA4+0x26>
 8000dc2:	bf00      	nop
 8000dc4:	20000824 	.word	0x20000824
	...

08000dd0 <VectorAC>:
 8000dd0:	f7ff bfae 	b.w	8000d30 <VectorA4>
	...

08000de0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000de4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000de8:	6923      	ldr	r3, [r4, #16]
 8000dea:	079b      	lsls	r3, r3, #30
 8000dec:	d403      	bmi.n	8000df6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8000df2:	f7ff bf6d 	b.w	8000cd0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000df6:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000df8:	2520      	movs	r5, #32
 8000dfa:	6127      	str	r7, [r4, #16]
 8000dfc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000e00:	4e1e      	ldr	r6, [pc, #120]	; (8000e7c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000e02:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000e04:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
  vtp = ch.vtlist.next;
 8000e08:	69f3      	ldr	r3, [r6, #28]
 8000e0a:	b280      	uxth	r0, r0
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000e0c:	eba0 010e 	sub.w	r1, r0, lr
 8000e10:	891a      	ldrh	r2, [r3, #8]
 8000e12:	b289      	uxth	r1, r1
 8000e14:	4291      	cmp	r1, r2
 8000e16:	f106 081c 	add.w	r8, r6, #28
 8000e1a:	d31b      	bcc.n	8000e54 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000e1c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.lasttime += vtp->delta;
 8000e1e:	4472      	add	r2, lr
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000e20:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
 8000e22:	84f2      	strh	r2, [r6, #38]	; 0x26
    fn = vtp->func;
 8000e24:	68da      	ldr	r2, [r3, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000e26:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
 8000e2a:	61f1      	str	r1, [r6, #28]
    vtp->func = NULL;
 8000e2c:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000e2e:	bf08      	it	eq
 8000e30:	60e7      	streq	r7, [r4, #12]
 8000e32:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000e36:	6918      	ldr	r0, [r3, #16]
 8000e38:	4790      	blx	r2
 8000e3a:	f385 8811 	msr	BASEPRI, r5
  return (systime_t)STM32_ST_TIM->CNT;
 8000e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000e40:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8000e44:	69f3      	ldr	r3, [r6, #28]
 8000e46:	b280      	uxth	r0, r0
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000e48:	eba0 010e 	sub.w	r1, r0, lr
 8000e4c:	891a      	ldrh	r2, [r3, #8]
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	428a      	cmp	r2, r1
 8000e52:	d9e3      	bls.n	8000e1c <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000e54:	4543      	cmp	r3, r8
 8000e56:	d00a      	beq.n	8000e6e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8000e58:	4472      	add	r2, lr
 8000e5a:	1a12      	subs	r2, r2, r0
 8000e5c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8000e5e:	2a02      	cmp	r2, #2
 8000e60:	bf2c      	ite	cs
 8000e62:	1882      	addcs	r2, r0, r2
 8000e64:	1c82      	addcc	r2, r0, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f383 8811 	msr	BASEPRI, r3
}
 8000e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
 8000e78:	f7ff bf2a 	b.w	8000cd0 <_port_irq_epilogue>
 8000e7c:	20000b78 	.word	0x20000b78

08000e80 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <Vector84+0x30>)
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <Vector84+0x34>)
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	0e09      	lsrs	r1, r1, #24
 8000e8a:	f001 010e 	and.w	r1, r1, #14
 8000e8e:	4211      	tst	r1, r2
 8000e90:	d00b      	beq.n	8000eaa <Vector84+0x2a>
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000e94:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000e96:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000e98:	060a      	lsls	r2, r1, #24
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	b10c      	cbz	r4, 8000ea2 <Vector84+0x22>
 8000e9e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000ea0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8000ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ea6:	f7ff bf13 	b.w	8000cd0 <_port_irq_epilogue>
 8000eaa:	f7ff bf11 	b.w	8000cd0 <_port_irq_epilogue>
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020080 	.word	0x40020080
 8000eb8:	20000870 	.word	0x20000870
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <Vector80>:
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <Vector80+0x30>)
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <Vector80+0x34>)
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	0d09      	lsrs	r1, r1, #20
 8000eca:	f001 010e 	and.w	r1, r1, #14
 8000ece:	4211      	tst	r1, r2
 8000ed0:	d00b      	beq.n	8000eea <Vector80+0x2a>
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000ed4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8000ed6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000ed8:	050a      	lsls	r2, r1, #20
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	b10c      	cbz	r4, 8000ee2 <Vector80+0x22>
 8000ede:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ee0:	47a0      	blx	r4
}
 8000ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000ee6:	f7ff bef3 	b.w	8000cd0 <_port_irq_epilogue>
 8000eea:	f7ff bef1 	b.w	8000cd0 <_port_irq_epilogue>
 8000eee:	bf00      	nop
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	4002006c 	.word	0x4002006c
 8000ef8:	20000870 	.word	0x20000870
 8000efc:	00000000 	.word	0x00000000

08000f00 <Vector7C>:
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <Vector7C+0x30>)
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <Vector7C+0x34>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	0c09      	lsrs	r1, r1, #16
 8000f0a:	f001 010e 	and.w	r1, r1, #14
 8000f0e:	4211      	tst	r1, r2
 8000f10:	d00b      	beq.n	8000f2a <Vector7C+0x2a>
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000f14:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000f16:	6a04      	ldr	r4, [r0, #32]
 8000f18:	040a      	lsls	r2, r1, #16
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	b10c      	cbz	r4, 8000f22 <Vector7C+0x22>
 8000f1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000f20:	47a0      	blx	r4
}
 8000f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000f26:	f7ff bed3 	b.w	8000cd0 <_port_irq_epilogue>
 8000f2a:	f7ff bed1 	b.w	8000cd0 <_port_irq_epilogue>
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020058 	.word	0x40020058
 8000f38:	20000870 	.word	0x20000870
 8000f3c:	00000000 	.word	0x00000000

08000f40 <Vector78>:
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <Vector78+0x30>)
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <Vector78+0x34>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	0b09      	lsrs	r1, r1, #12
 8000f4a:	f001 010e 	and.w	r1, r1, #14
 8000f4e:	4211      	tst	r1, r2
 8000f50:	d00b      	beq.n	8000f6a <Vector78+0x2a>
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000f54:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000f56:	6984      	ldr	r4, [r0, #24]
 8000f58:	030a      	lsls	r2, r1, #12
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	b10c      	cbz	r4, 8000f62 <Vector78+0x22>
 8000f5e:	69c0      	ldr	r0, [r0, #28]
 8000f60:	47a0      	blx	r4
}
 8000f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000f66:	f7ff beb3 	b.w	8000cd0 <_port_irq_epilogue>
 8000f6a:	f7ff beb1 	b.w	8000cd0 <_port_irq_epilogue>
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020044 	.word	0x40020044
 8000f78:	20000870 	.word	0x20000870
 8000f7c:	00000000 	.word	0x00000000

08000f80 <Vector74>:
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <Vector74+0x30>)
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <Vector74+0x34>)
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	0a09      	lsrs	r1, r1, #8
 8000f8a:	f001 010e 	and.w	r1, r1, #14
 8000f8e:	4211      	tst	r1, r2
 8000f90:	d00b      	beq.n	8000faa <Vector74+0x2a>
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000f94:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000f96:	6904      	ldr	r4, [r0, #16]
 8000f98:	020a      	lsls	r2, r1, #8
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	b10c      	cbz	r4, 8000fa2 <Vector74+0x22>
 8000f9e:	6940      	ldr	r0, [r0, #20]
 8000fa0:	47a0      	blx	r4
}
 8000fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000fa6:	f7ff be93 	b.w	8000cd0 <_port_irq_epilogue>
 8000faa:	f7ff be91 	b.w	8000cd0 <_port_irq_epilogue>
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020030 	.word	0x40020030
 8000fb8:	20000870 	.word	0x20000870
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <Vector70>:
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <Vector70+0x30>)
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <Vector70+0x34>)
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	0909      	lsrs	r1, r1, #4
 8000fca:	f001 010e 	and.w	r1, r1, #14
 8000fce:	4211      	tst	r1, r2
 8000fd0:	d00b      	beq.n	8000fea <Vector70+0x2a>
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000fd4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000fd6:	6884      	ldr	r4, [r0, #8]
 8000fd8:	010a      	lsls	r2, r1, #4
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	b10c      	cbz	r4, 8000fe2 <Vector70+0x22>
 8000fde:	68c0      	ldr	r0, [r0, #12]
 8000fe0:	47a0      	blx	r4
}
 8000fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000fe6:	f7ff be73 	b.w	8000cd0 <_port_irq_epilogue>
 8000fea:	f7ff be71 	b.w	8000cd0 <_port_irq_epilogue>
 8000fee:	bf00      	nop
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	4002001c 	.word	0x4002001c
 8000ff8:	20000870 	.word	0x20000870
 8000ffc:	00000000 	.word	0x00000000

08001000 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001000:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <Vector6C+0x28>)
 8001004:	4a09      	ldr	r2, [pc, #36]	; (800102c <Vector6C+0x2c>)
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	f001 010e 	and.w	r1, r1, #14
 800100e:	4211      	tst	r1, r2
 8001010:	d005      	beq.n	800101e <Vector6C+0x1e>
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <Vector6C+0x30>)
 8001014:	6059      	str	r1, [r3, #4]
 8001016:	6813      	ldr	r3, [r2, #0]
 8001018:	b10b      	cbz	r3, 800101e <Vector6C+0x1e>
 800101a:	6850      	ldr	r0, [r2, #4]
 800101c:	4798      	blx	r3
}
 800101e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001022:	f7ff be55 	b.w	8000cd0 <_port_irq_epilogue>
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	40020008 	.word	0x40020008
 8001030:	20000870 	.word	0x20000870
	...

08001040 <SVC_Handler>:
void SVC_Handler(void) {
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001044:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8001048:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800104a:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800104e:	2300      	movs	r3, #0
 8001050:	f383 8811 	msr	BASEPRI, r3
}
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	0000      	movs	r0, r0
	...

08001060 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8001060:	b470      	push	{r4, r5, r6}
 8001062:	2320      	movs	r3, #32
 8001064:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001068:	4c0d      	ldr	r4, [pc, #52]	; (80010a0 <chCoreAllocAlignedWithOffset+0x40>)
 800106a:	1e4d      	subs	r5, r1, #1
 800106c:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 800106e:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001070:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 8001072:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001074:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 8001076:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001078:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800107a:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 800107c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800107e:	4293      	cmp	r3, r2
 8001080:	d807      	bhi.n	8001092 <chCoreAllocAlignedWithOffset+0x32>
 8001082:	429e      	cmp	r6, r3
 8001084:	d805      	bhi.n	8001092 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800108e:	bc70      	pop	{r4, r5, r6}
 8001090:	4770      	bx	lr
    return NULL;
 8001092:	2000      	movs	r0, #0
 8001094:	2300      	movs	r3, #0
 8001096:	f383 8811 	msr	BASEPRI, r3
}
 800109a:	bc70      	pop	{r4, r5, r6}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000ad0 	.word	0x20000ad0
	...

080010b0 <wakeup>:
 80010b0:	2320      	movs	r3, #32
 80010b2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80010b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d80e      	bhi.n	80010dc <wakeup+0x2c>
 80010be:	e8df f003 	tbb	[pc, r3]
 80010c2:	0d28      	.short	0x0d28
 80010c4:	0408240d 	.word	0x0408240d
 80010c8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 80010ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80010cc:	6893      	ldr	r3, [r2, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80010d2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80010d6:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80010d8:	6802      	ldr	r2, [r0, #0]
 80010da:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 80010dc:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80010de:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80010e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80010e4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80010e8:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80010ea:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80010ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	428a      	cmp	r2, r1
 80010f4:	d2fb      	bcs.n	80010ee <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2100      	movs	r1, #0
  tp->queue.next             = cp;
 80010fa:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80010fc:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80010fe:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001100:	6058      	str	r0, [r3, #4]
 8001102:	f381 8811 	msr	BASEPRI, r1
}
 8001106:	bc10      	pop	{r4}
 8001108:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800110a:	2200      	movs	r2, #0
 800110c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e7e4      	b.n	80010dc <wakeup+0x2c>
 8001112:	2300      	movs	r3, #0
 8001114:	f383 8811 	msr	BASEPRI, r3
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000b78 	.word	0x20000b78

08001120 <_idle_thread.lto_priv.37>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001120:	e7fe      	b.n	8001120 <_idle_thread.lto_priv.37>
 8001122:	bf00      	nop
	...

08001130 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8001130:	e7fe      	b.n	8001130 <BusFault_Handler>
 8001132:	bf00      	nop
	...

08001140 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001140:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8001142:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <chSchGoSleepS+0x24>)
 8001146:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8001148:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800114a:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800114e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8001150:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8001152:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8001154:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8001158:	601c      	str	r4, [r3, #0]
}
 800115a:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800115c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800115e:	f7ff b869 	b.w	8000234 <_port_switch>
 8001162:	bf00      	nop
 8001164:	20000b78 	.word	0x20000b78
	...

08001170 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
 8001170:	f64f 73ff 	movw	r3, #65535	; 0xffff
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8001176:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001178:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800117a:	d055      	beq.n	8001228 <chSchGoSleepTimeoutS+0xb8>
    chVTDoSetI(&vt, time, wakeup, currp);
 800117c:	4c4c      	ldr	r4, [pc, #304]	; (80012b0 <chSchGoSleepTimeoutS+0x140>)
  return (systime_t)STM32_ST_TIM->CNT;
 800117e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001182:	4625      	mov	r5, r4
 8001184:	4607      	mov	r7, r0
 8001186:	f855 0f1c 	ldr.w	r0, [r5, #28]!
 800118a:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
  vtp->par = par;
 800118e:	69a6      	ldr	r6, [r4, #24]
 8001190:	2902      	cmp	r1, #2
  vtp->func = vtfunc;
 8001192:	4b48      	ldr	r3, [pc, #288]	; (80012b4 <chSchGoSleepTimeoutS+0x144>)
 8001194:	bf38      	it	cc
 8001196:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001198:	42a8      	cmp	r0, r5
  vtp->par = par;
 800119a:	9605      	str	r6, [sp, #20]
  vtp->func = vtfunc;
 800119c:	9304      	str	r3, [sp, #16]
 800119e:	b296      	uxth	r6, r2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80011a0:	d06e      	beq.n	8001280 <chSchGoSleepTimeoutS+0x110>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 80011a2:	f8b4 c026 	ldrh.w	ip, [r4, #38]	; 0x26

    if (delta < now - ch.vtlist.lasttime) {
 80011a6:	b292      	uxth	r2, r2
    delta = now - ch.vtlist.lasttime + delay;
 80011a8:	eba6 060c 	sub.w	r6, r6, ip
 80011ac:	198b      	adds	r3, r1, r6
    if (delta < now - ch.vtlist.lasttime) {
 80011ae:	eba2 020c 	sub.w	r2, r2, ip
    delta = now - ch.vtlist.lasttime + delay;
 80011b2:	b29b      	uxth	r3, r3
    if (delta < now - ch.vtlist.lasttime) {
 80011b4:	4293      	cmp	r3, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80011b6:	8902      	ldrh	r2, [r0, #8]
    if (delta < now - ch.vtlist.lasttime) {
 80011b8:	db31      	blt.n	800121e <chSchGoSleepTimeoutS+0xae>
      p = p->next;
    }
    else if (delta < p->delta) {
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d33b      	bcc.n	8001236 <chSchGoSleepTimeoutS+0xc6>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80011be:	4293      	cmp	r3, r2
 80011c0:	d905      	bls.n	80011ce <chSchGoSleepTimeoutS+0x5e>
    delta -= p->delta;
    p = p->next;
 80011c2:	6800      	ldr	r0, [r0, #0]
    delta -= p->delta;
 80011c4:	1a9b      	subs	r3, r3, r2
  while (p->delta < delta) {
 80011c6:	8902      	ldrh	r2, [r0, #8]
    delta -= p->delta;
 80011c8:	b29b      	uxth	r3, r3
  while (p->delta < delta) {
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3f9      	bcc.n	80011c2 <chSchGoSleepTimeoutS+0x52>
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
 80011ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
 80011d2:	6842      	ldr	r2, [r0, #4]
  vtp->prev->next = vtp;
 80011d4:	ae01      	add	r6, sp, #4
  vtp->prev = vtp->next->prev;
 80011d6:	9202      	str	r2, [sp, #8]
  vtp->next = p;
 80011d8:	9001      	str	r0, [sp, #4]
  vtp->prev->next = vtp;
 80011da:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
 80011dc:	6046      	str	r6, [r0, #4]
  vtp->delta = delta
 80011de:	f8ad 300c 	strh.w	r3, [sp, #12]
  p->delta -= delta;
 80011e2:	8902      	ldrh	r2, [r0, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	8103      	strh	r3, [r0, #8]
  ch.vtlist.delta = (systime_t)-1;
 80011e8:	84a1      	strh	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80011ea:	4638      	mov	r0, r7
 80011ec:	f7ff ffa8 	bl	8001140 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80011f0:	9b04      	ldr	r3, [sp, #16]
 80011f2:	b183      	cbz	r3, 8001216 <chSchGoSleepTimeoutS+0xa6>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80011f4:	69e3      	ldr	r3, [r4, #28]
 80011f6:	42b3      	cmp	r3, r6
 80011f8:	d023      	beq.n	8001242 <chSchGoSleepTimeoutS+0xd2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 80011fa:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
 80011fc:	9a02      	ldr	r2, [sp, #8]
 80011fe:	9b01      	ldr	r3, [sp, #4]
 8001200:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001202:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001204:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 8001206:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001208:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800120a:	d004      	beq.n	8001216 <chSchGoSleepTimeoutS+0xa6>
      vtp->next->delta += vtp->delta;
 800120c:	891a      	ldrh	r2, [r3, #8]
 800120e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001212:	440a      	add	r2, r1
 8001214:	811a      	strh	r2, [r3, #8]
  return currp->u.rdymsg;
 8001216:	69a3      	ldr	r3, [r4, #24]
}
 8001218:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800121a:	b007      	add	sp, #28
 800121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
 800121e:	6800      	ldr	r0, [r0, #0]
      delta -= p->delta;
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	b29b      	uxth	r3, r3
 8001224:	8902      	ldrh	r2, [r0, #8]
 8001226:	e7ca      	b.n	80011be <chSchGoSleepTimeoutS+0x4e>
    chSchGoSleepS(newstate);
 8001228:	f7ff ff8a 	bl	8001140 <chSchGoSleepS>
 800122c:	4c20      	ldr	r4, [pc, #128]	; (80012b0 <chSchGoSleepTimeoutS+0x140>)
  return currp->u.rdymsg;
 800122e:	69a3      	ldr	r3, [r4, #24]
}
 8001230:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001232:	b007      	add	sp, #28
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8001236:	eb0c 0103 	add.w	r1, ip, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800123a:	b289      	uxth	r1, r1
 800123c:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8001240:	e7bd      	b.n	80011be <chSchGoSleepTimeoutS+0x4e>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8001242:	2300      	movs	r3, #0
  ch.vtlist.next = vtp->next;
 8001244:	9e01      	ldr	r6, [sp, #4]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001246:	42ae      	cmp	r6, r5
  ch.vtlist.next = vtp->next;
 8001248:	61e6      	str	r6, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800124a:	6075      	str	r5, [r6, #4]
  vtp->func = NULL;
 800124c:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800124e:	d02a      	beq.n	80012a6 <chSchGoSleepTimeoutS+0x136>
  return (systime_t)STM32_ST_TIM->CNT;
 8001250:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001254:	6a42      	ldr	r2, [r0, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001256:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
  ch.vtlist.next->delta += vtp->delta;
 8001258:	8933      	ldrh	r3, [r6, #8]
 800125a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 800125e:	b292      	uxth	r2, r2
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001260:	1a51      	subs	r1, r2, r1
  ch.vtlist.next->delta += vtp->delta;
 8001262:	442b      	add	r3, r5
 8001264:	b29b      	uxth	r3, r3
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001266:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001268:	428b      	cmp	r3, r1
  ch.vtlist.next->delta += vtp->delta;
 800126a:	8133      	strh	r3, [r6, #8]
  if (nowdelta >= ch.vtlist.next->delta) {
 800126c:	d9d3      	bls.n	8001216 <chSchGoSleepTimeoutS+0xa6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	b29b      	uxth	r3, r3
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001272:	2b02      	cmp	r3, #2
 8001274:	bf2c      	ite	cs
 8001276:	18d3      	addcs	r3, r2, r3
 8001278:	1c93      	addcc	r3, r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800127a:	b29b      	uxth	r3, r3
 800127c:	6343      	str	r3, [r0, #52]	; 0x34
 800127e:	e7ca      	b.n	8001216 <chSchGoSleepTimeoutS+0xa6>
  STM32_ST_TIM->SR     = 0;
 8001280:	2000      	movs	r0, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001282:	2202      	movs	r2, #2
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8001284:	198b      	adds	r3, r1, r6
      ch.vtlist.lasttime = now;
 8001286:	84e6      	strh	r6, [r4, #38]	; 0x26
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001288:	b29b      	uxth	r3, r3
      ch.vtlist.next = vtp;
 800128a:	ae01      	add	r6, sp, #4
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800128c:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800128e:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 8001290:	f8ad 100c 	strh.w	r1, [sp, #12]
      ch.vtlist.next = vtp;
 8001294:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
 8001296:	6226      	str	r6, [r4, #32]
 8001298:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800129c:	f8ce 0010 	str.w	r0, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80012a0:	f8ce 200c 	str.w	r2, [lr, #12]
 80012a4:	e7a1      	b.n	80011ea <chSchGoSleepTimeoutS+0x7a>
  STM32_ST_TIM->DIER = 0;
 80012a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012aa:	60d3      	str	r3, [r2, #12]
 80012ac:	e7b3      	b.n	8001216 <chSchGoSleepTimeoutS+0xa6>
 80012ae:	bf00      	nop
 80012b0:	20000b78 	.word	0x20000b78
 80012b4:	080010b1 	.word	0x080010b1
	...

080012c0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80012c0:	b161      	cbz	r1, 80012dc <chThdEnqueueTimeoutS+0x1c>
 80012c2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80012c6:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80012c8:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 80012ca:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012cc:	2004      	movs	r0, #4
 80012ce:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 80012d2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80012d4:	6053      	str	r3, [r2, #4]
}
 80012d6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012d8:	f7ff bf4a 	b.w	8001170 <chSchGoSleepTimeoutS>
}
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000b78 	.word	0x20000b78
	...

080012f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	469a      	mov	sl, r3
 80012f6:	b083      	sub	sp, #12
 80012f8:	4604      	mov	r4, r0
 80012fa:	460d      	mov	r5, r1
 80012fc:	4616      	mov	r6, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 80012fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001302:	2320      	movs	r3, #32
 8001304:	f383 8811 	msr	BASEPRI, r3
  size_t w = 0;
 8001308:	2700      	movs	r7, #0
  return (systime_t)STM32_ST_TIM->CNT;
 800130a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800130e:	46bb      	mov	fp, r7
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001312:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8001316:	4453      	add	r3, sl
 8001318:	b29b      	uxth	r3, r3
 800131a:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800131c:	fa1f f989 	uxth.w	r9, r9
    while (oqIsFullI(oqp)) {
 8001320:	68a3      	ldr	r3, [r4, #8]
 8001322:	b1fb      	cbz	r3, 8001364 <oqWriteTimeout+0x74>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001324:	6962      	ldr	r2, [r4, #20]
    oqp->q_counter--;
 8001326:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001328:	1c51      	adds	r1, r2, #1
    oqp->q_counter--;
 800132a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800132c:	6161      	str	r1, [r4, #20]
    oqp->q_counter--;
 800132e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001330:	782b      	ldrb	r3, [r5, #0]
 8001332:	3501      	adds	r5, #1
 8001334:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	6962      	ldr	r2, [r4, #20]
 800133a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800133c:	bf24      	itt	cs
 800133e:	68e3      	ldrcs	r3, [r4, #12]
 8001340:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001342:	f1b8 0f00 	cmp.w	r8, #0
 8001346:	d001      	beq.n	800134c <oqWriteTimeout+0x5c>
      nfy(oqp);
 8001348:	4620      	mov	r0, r4
 800134a:	47c0      	blx	r8
 800134c:	f38b 8811 	msr	BASEPRI, fp

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8001350:	3e01      	subs	r6, #1
    w++;
 8001352:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 8001356:	d019      	beq.n	800138c <oqWriteTimeout+0x9c>
 8001358:	2320      	movs	r3, #32
 800135a:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
 800135e:	68a3      	ldr	r3, [r4, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1df      	bne.n	8001324 <oqWriteTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001364:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001368:	4591      	cmp	r9, r2
 800136a:	d813      	bhi.n	8001394 <oqWriteTimeout+0xa4>
 800136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001370:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001372:	9a01      	ldr	r2, [sp, #4]
 8001374:	1a51      	subs	r1, r2, r1
 8001376:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 8001378:	458a      	cmp	sl, r1
 800137a:	d305      	bcc.n	8001388 <oqWriteTimeout+0x98>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800137c:	4620      	mov	r0, r4
 800137e:	f7ff ff9f 	bl	80012c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001382:	2800      	cmp	r0, #0
 8001384:	d0cc      	beq.n	8001320 <oqWriteTimeout+0x30>
 8001386:	2300      	movs	r3, #0
 8001388:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 800138c:	4638      	mov	r0, r7
 800138e:	b003      	add	sp, #12
 8001390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001394:	4651      	mov	r1, sl
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff ff92 	bl	80012c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800139c:	2800      	cmp	r0, #0
 800139e:	d0bf      	beq.n	8001320 <oqWriteTimeout+0x30>
 80013a0:	e7f1      	b.n	8001386 <oqWriteTimeout+0x96>
 80013a2:	bf00      	nop
	...

080013b0 <_writet.lto_priv.44>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80013b0:	3030      	adds	r0, #48	; 0x30
 80013b2:	f7ff bf9d 	b.w	80012f0 <oqWriteTimeout>
 80013b6:	bf00      	nop
	...

080013c0 <_write.lto_priv.38>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80013c0:	3030      	adds	r0, #48	; 0x30
 80013c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c6:	f7ff bf93 	b.w	80012f0 <oqWriteTimeout>
 80013ca:	bf00      	nop
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	460f      	mov	r7, r1
 80013d6:	4616      	mov	r6, r2
 80013d8:	2320      	movs	r3, #32
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	e005      	b.n	80013ec <oqPutTimeout+0x1c>
 80013e0:	4631      	mov	r1, r6
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ff6c 	bl	80012c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80013e8:	2800      	cmp	r0, #0
 80013ea:	db17      	blt.n	800141c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 80013ec:	68a5      	ldr	r5, [r4, #8]
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	d0f6      	beq.n	80013e0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 80013f2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80013f4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013f6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80013f8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80013fa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80013fc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013fe:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001400:	6923      	ldr	r3, [r4, #16]
 8001402:	6962      	ldr	r2, [r4, #20]
 8001404:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001406:	bf24      	itt	cs
 8001408:	68e3      	ldrcs	r3, [r4, #12]
 800140a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800140c:	69e3      	ldr	r3, [r4, #28]
 800140e:	b10b      	cbz	r3, 8001414 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001410:	4620      	mov	r0, r4
 8001412:	4798      	blx	r3
 8001414:	2000      	movs	r0, #0
 8001416:	f380 8811 	msr	BASEPRI, r0
}
 800141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800141c:	f385 8811 	msr	BASEPRI, r5
 8001420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001422:	bf00      	nop
	...

08001430 <_putt.lto_priv.42>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001430:	3030      	adds	r0, #48	; 0x30
 8001432:	f7ff bfcd 	b.w	80013d0 <oqPutTimeout>
 8001436:	bf00      	nop
	...

08001440 <_put.lto_priv.40>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001440:	3030      	adds	r0, #48	; 0x30
 8001442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001446:	f7ff bfc3 	b.w	80013d0 <oqPutTimeout>
 800144a:	bf00      	nop
 800144c:	0000      	movs	r0, r0
	...

08001450 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	469a      	mov	sl, r3
 8001456:	b083      	sub	sp, #12
 8001458:	4604      	mov	r4, r0
 800145a:	460e      	mov	r6, r1
 800145c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
 800145e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001462:	2320      	movs	r3, #32
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 800146c:	2700      	movs	r7, #0
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001470:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8001474:	4453      	add	r3, sl
 8001476:	b29b      	uxth	r3, r3
 8001478:	9301      	str	r3, [sp, #4]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800147a:	fa1f f989 	uxth.w	r9, r9
    while (iqIsEmptyI(iqp)) {
 800147e:	68a3      	ldr	r3, [r4, #8]
 8001480:	b313      	cbz	r3, 80014c8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
 8001482:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 8001484:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001486:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 8001488:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800148a:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 800148c:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800148e:	7813      	ldrb	r3, [r2, #0]
 8001490:	f106 0b01 	add.w	fp, r6, #1
 8001494:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001496:	6923      	ldr	r3, [r4, #16]
 8001498:	69a2      	ldr	r2, [r4, #24]
 800149a:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800149c:	bf24      	itt	cs
 800149e:	68e3      	ldrcs	r3, [r4, #12]
 80014a0:	61a3      	strcs	r3, [r4, #24]
    if (nfy != NULL) {
 80014a2:	f1b8 0f00 	cmp.w	r8, #0
 80014a6:	d001      	beq.n	80014ac <iqReadTimeout+0x5c>
      nfy(iqp);
 80014a8:	4620      	mov	r0, r4
 80014aa:	47c0      	blx	r8
 80014ac:	2300      	movs	r3, #0
 80014ae:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
 80014b2:	3d01      	subs	r5, #1
    r++;
 80014b4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80014b8:	d01a      	beq.n	80014f0 <iqReadTimeout+0xa0>
 80014ba:	2320      	movs	r3, #32
 80014bc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
 80014c0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80014c2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1dc      	bne.n	8001482 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80014c8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80014cc:	4591      	cmp	r9, r2
 80014ce:	d813      	bhi.n	80014f8 <iqReadTimeout+0xa8>
 80014d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80014d6:	9a01      	ldr	r2, [sp, #4]
 80014d8:	1a51      	subs	r1, r2, r1
 80014da:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
 80014dc:	458a      	cmp	sl, r1
 80014de:	d305      	bcc.n	80014ec <iqReadTimeout+0x9c>
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff feed 	bl	80012c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d0c9      	beq.n	800147e <iqReadTimeout+0x2e>
 80014ea:	2300      	movs	r3, #0
 80014ec:	f383 8811 	msr	BASEPRI, r3
}
 80014f0:	4638      	mov	r0, r7
 80014f2:	b003      	add	sp, #12
 80014f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014f8:	4651      	mov	r1, sl
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff fee0 	bl	80012c0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001500:	2800      	cmp	r0, #0
 8001502:	d0bc      	beq.n	800147e <iqReadTimeout+0x2e>
 8001504:	e7f1      	b.n	80014ea <iqReadTimeout+0x9a>
 8001506:	bf00      	nop
	...

08001510 <_readt.lto_priv.45>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001510:	300c      	adds	r0, #12
 8001512:	f7ff bf9d 	b.w	8001450 <iqReadTimeout>
 8001516:	bf00      	nop
	...

08001520 <_read.lto_priv.39>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001520:	300c      	adds	r0, #12
 8001522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001526:	f7ff bf93 	b.w	8001450 <iqReadTimeout>
 800152a:	bf00      	nop
 800152c:	0000      	movs	r0, r0
	...

08001530 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	2320      	movs	r3, #32
 8001534:	4604      	mov	r4, r0
 8001536:	460e      	mov	r6, r1
 8001538:	f383 8811 	msr	BASEPRI, r3
 800153c:	e005      	b.n	800154a <iqGetTimeout+0x1a>
 800153e:	4631      	mov	r1, r6
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff febd 	bl	80012c0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001546:	2800      	cmp	r0, #0
 8001548:	db18      	blt.n	800157c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 800154a:	68a5      	ldr	r5, [r4, #8]
 800154c:	2d00      	cmp	r5, #0
 800154e:	d0f6      	beq.n	800153e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001550:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001552:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001554:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8001556:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8001558:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800155a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800155c:	60a3      	str	r3, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer;
 800155e:	bf28      	it	cs
 8001560:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8001562:	61a2      	str	r2, [r4, #24]
 8001564:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001566:	bf28      	it	cs
 8001568:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800156a:	69e3      	ldr	r3, [r4, #28]
 800156c:	b10b      	cbz	r3, 8001572 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800156e:	4620      	mov	r0, r4
 8001570:	4798      	blx	r3
 8001572:	2300      	movs	r3, #0
 8001574:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001578:	4628      	mov	r0, r5
}
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f385 8811 	msr	BASEPRI, r5
 8001580:	bd70      	pop	{r4, r5, r6, pc}
 8001582:	bf00      	nop
	...

08001590 <_gett.lto_priv.43>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001590:	300c      	adds	r0, #12
 8001592:	f7ff bfcd 	b.w	8001530 <iqGetTimeout>
 8001596:	bf00      	nop
	...

080015a0 <_get.lto_priv.41>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80015a0:	300c      	adds	r0, #12
 80015a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015a6:	f7ff bfc3 	b.w	8001530 <iqGetTimeout>
 80015aa:	bf00      	nop
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80015b0:	b40e      	push	{r1, r2, r3}
 80015b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	ab19      	add	r3, sp, #100	; 0x64
 80015ba:	f853 8b04 	ldr.w	r8, [r3], #4
  int n = 0;
 80015be:	2200      	movs	r2, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80015c0:	4683      	mov	fp, r0
 80015c2:	469a      	mov	sl, r3
  int n = 0;
 80015c4:	9200      	str	r2, [sp, #0]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80015c6:	9309      	str	r3, [sp, #36]	; 0x24
    c = *fmt++;
 80015c8:	f898 1000 	ldrb.w	r1, [r8]
 80015cc:	f108 0301 	add.w	r3, r8, #1
    if (c == 0)
 80015d0:	b181      	cbz	r1, 80015f4 <chprintf+0x44>
    if (c != '%') {
 80015d2:	2925      	cmp	r1, #37	; 0x25
 80015d4:	d014      	beq.n	8001600 <chprintf+0x50>
    c = *fmt++;
 80015d6:	4698      	mov	r8, r3
      n++;
 80015d8:	9c00      	ldr	r4, [sp, #0]
      streamPut(chp, (uint8_t)c);
 80015da:	f8db 2000 	ldr.w	r2, [fp]
 80015de:	4658      	mov	r0, fp
 80015e0:	6892      	ldr	r2, [r2, #8]
      n++;
 80015e2:	3401      	adds	r4, #1
 80015e4:	9400      	str	r4, [sp, #0]
      streamPut(chp, (uint8_t)c);
 80015e6:	4790      	blx	r2
    c = *fmt++;
 80015e8:	f898 1000 	ldrb.w	r1, [r8]
 80015ec:	f108 0301 	add.w	r3, r8, #1
    if (c == 0)
 80015f0:	2900      	cmp	r1, #0
 80015f2:	d1ee      	bne.n	80015d2 <chprintf+0x22>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80015f4:	9800      	ldr	r0, [sp, #0]
 80015f6:	b010      	add	sp, #64	; 0x40
 80015f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015fc:	b003      	add	sp, #12
 80015fe:	4770      	bx	lr
    if (*fmt == '-') {
 8001600:	f898 2001 	ldrb.w	r2, [r8, #1]
    width = 0;
 8001604:	2400      	movs	r4, #0
    if (*fmt == '-') {
 8001606:	2a2d      	cmp	r2, #45	; 0x2d
 8001608:	bf03      	ittte	eq
 800160a:	f898 2002 	ldrbeq.w	r2, [r8, #2]
      fmt++;
 800160e:	f108 0302 	addeq.w	r3, r8, #2
      left_align = TRUE;
 8001612:	f04f 0901 	moveq.w	r9, #1
    left_align = FALSE;
 8001616:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '0') {
 800161a:	2a30      	cmp	r2, #48	; 0x30
 800161c:	bf03      	ittte	eq
 800161e:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001620:	3301      	addeq	r3, #1
      filler = '0';
 8001622:	2630      	moveq	r6, #48	; 0x30
    filler = ' ';
 8001624:	2620      	movne	r6, #32
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	e007      	b.n	800163a <chprintf+0x8a>
        c = va_arg(ap, int);
 800162a:	f89a 3000 	ldrb.w	r3, [sl]
 800162e:	f10a 0a04 	add.w	sl, sl, #4
 8001632:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8001636:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 800163a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b09      	cmp	r3, #9
      c = *fmt++;
 8001642:	4688      	mov	r8, r1
      width = width * 10 + c;
 8001644:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8001648:	d9f3      	bls.n	8001632 <chprintf+0x82>
      else if (c == '*')
 800164a:	2a2a      	cmp	r2, #42	; 0x2a
 800164c:	d0ed      	beq.n	800162a <chprintf+0x7a>
    if (c == '.') {
 800164e:	2a2e      	cmp	r2, #46	; 0x2e
 8001650:	f04f 0700 	mov.w	r7, #0
 8001654:	d045      	beq.n	80016e2 <chprintf+0x132>
    if (c == 'l' || c == 'L') {
 8001656:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 800165a:	2b4c      	cmp	r3, #76	; 0x4c
 800165c:	d050      	beq.n	8001700 <chprintf+0x150>
    switch (c) {
 800165e:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8001662:	2934      	cmp	r1, #52	; 0x34
 8001664:	f200 81f3 	bhi.w	8001a4e <chprintf+0x49e>
 8001668:	e8df f011 	tbh	[pc, r1, lsl #1]
 800166c:	01f10100 	.word	0x01f10100
 8001670:	01f101f1 	.word	0x01f101f1
 8001674:	010001f1 	.word	0x010001f1
 8001678:	01f101f1 	.word	0x01f101f1
 800167c:	01f101f1 	.word	0x01f101f1
 8001680:	00fd01f1 	.word	0x00fd01f1
 8001684:	01f101f1 	.word	0x01f101f1
 8001688:	01f101f1 	.word	0x01f101f1
 800168c:	008c01f1 	.word	0x008c01f1
 8001690:	01f101f1 	.word	0x01f101f1
 8001694:	01f10149 	.word	0x01f10149
 8001698:	01f101f1 	.word	0x01f101f1
 800169c:	01f101f1 	.word	0x01f101f1
 80016a0:	01f101f1 	.word	0x01f101f1
 80016a4:	01f101f1 	.word	0x01f101f1
 80016a8:	01e501f1 	.word	0x01e501f1
 80016ac:	01f10100 	.word	0x01f10100
 80016b0:	01f1014c 	.word	0x01f1014c
 80016b4:	010001f1 	.word	0x010001f1
 80016b8:	01f101f1 	.word	0x01f101f1
 80016bc:	01f101f1 	.word	0x01f101f1
 80016c0:	00fd01f1 	.word	0x00fd01f1
 80016c4:	01f101f1 	.word	0x01f101f1
 80016c8:	012b01f1 	.word	0x012b01f1
 80016cc:	008c01f1 	.word	0x008c01f1
 80016d0:	01f101f1 	.word	0x01f101f1
 80016d4:	0149      	.short	0x0149
          c = va_arg(ap, int);
 80016d6:	f89a 3000 	ldrb.w	r3, [sl]
 80016da:	f10a 0a04 	add.w	sl, sl, #4
        precision += c;
 80016de:	eb03 0741 	add.w	r7, r3, r1, lsl #1
        c = *fmt++;
 80016e2:	f818 2b01 	ldrb.w	r2, [r8], #1
        precision *= 10;
 80016e6:	eb07 0187 	add.w	r1, r7, r7, lsl #2
        if (c >= '0' && c <= '9')
 80016ea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d9f4      	bls.n	80016de <chprintf+0x12e>
        else if (c == '*')
 80016f4:	2a2a      	cmp	r2, #42	; 0x2a
 80016f6:	d0ee      	beq.n	80016d6 <chprintf+0x126>
    if (c == 'l' || c == 'L') {
 80016f8:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80016fc:	2b4c      	cmp	r3, #76	; 0x4c
 80016fe:	d1ae      	bne.n	800165e <chprintf+0xae>
      if (*fmt)
 8001700:	f898 3000 	ldrb.w	r3, [r8]
 8001704:	b113      	cbz	r3, 800170c <chprintf+0x15c>
        c = *fmt++;
 8001706:	461a      	mov	r2, r3
 8001708:	f108 0801 	add.w	r8, r8, #1
    switch (c) {
 800170c:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8001710:	2b34      	cmp	r3, #52	; 0x34
 8001712:	f200 819c 	bhi.w	8001a4e <chprintf+0x49e>
 8001716:	e8df f013 	tbh	[pc, r3, lsl #1]
 800171a:	00a9      	.short	0x00a9
 800171c:	019a019a 	.word	0x019a019a
 8001720:	019a019a 	.word	0x019a019a
 8001724:	019a00a9 	.word	0x019a00a9
 8001728:	019a019a 	.word	0x019a019a
 800172c:	019a019a 	.word	0x019a019a
 8001730:	019a00a6 	.word	0x019a00a6
 8001734:	019a019a 	.word	0x019a019a
 8001738:	019a019a 	.word	0x019a019a
 800173c:	019a0035 	.word	0x019a0035
 8001740:	00f2019a 	.word	0x00f2019a
 8001744:	019a019a 	.word	0x019a019a
 8001748:	019a019a 	.word	0x019a019a
 800174c:	019a019a 	.word	0x019a019a
 8001750:	019a019a 	.word	0x019a019a
 8001754:	019a019a 	.word	0x019a019a
 8001758:	00a9018e 	.word	0x00a9018e
 800175c:	00f5019a 	.word	0x00f5019a
 8001760:	019a019a 	.word	0x019a019a
 8001764:	019a00a9 	.word	0x019a00a9
 8001768:	019a019a 	.word	0x019a019a
 800176c:	019a019a 	.word	0x019a019a
 8001770:	019a00a6 	.word	0x019a00a6
 8001774:	019a019a 	.word	0x019a019a
 8001778:	019a00d4 	.word	0x019a00d4
 800177c:	019a0035 	.word	0x019a0035
 8001780:	00f2019a 	.word	0x00f2019a
 8001784:	f04f 0e0a 	mov.w	lr, #10
  q = p + MAX_FILLER;
 8001788:	f10d 0733 	add.w	r7, sp, #51	; 0x33
        l = va_arg(ap, unsigned int);
 800178c:	f8da 2000 	ldr.w	r2, [sl]
  q = p + MAX_FILLER;
 8001790:	4639      	mov	r1, r7
        l = va_arg(ap, unsigned int);
 8001792:	f10a 0a04 	add.w	sl, sl, #4
 8001796:	e000      	b.n	800179a <chprintf+0x1ea>
  } while ((ll /= radix) != 0);
 8001798:	4601      	mov	r1, r0
    i = (int)(l % radix);
 800179a:	fbb2 f5fe 	udiv	r5, r2, lr
 800179e:	fb0e 2215 	mls	r2, lr, r5, r2
    i += '0';
 80017a2:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 80017a6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80017a8:	bfc8      	it	gt
 80017aa:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80017b4:	1e48      	subs	r0, r1, #1
    l /= radix;
 80017b6:	462a      	mov	r2, r5
  } while ((ll /= radix) != 0);
 80017b8:	2d00      	cmp	r5, #0
 80017ba:	d1ed      	bne.n	8001798 <chprintf+0x1e8>
  i = (int)(p + MAX_FILLER - q);
 80017bc:	ad0a      	add	r5, sp, #40	; 0x28
 80017be:	eba7 0c00 	sub.w	ip, r7, r0
 80017c2:	46ae      	mov	lr, r5
 80017c4:	4460      	add	r0, ip
 80017c6:	e001      	b.n	80017cc <chprintf+0x21c>
 80017c8:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
 80017cc:	4288      	cmp	r0, r1
    *p++ = *q++;
 80017ce:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 80017d2:	d1f9      	bne.n	80017c8 <chprintf+0x218>
 80017d4:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
    if ((width -= i) < 0)
 80017d8:	ebb4 040c 	subs.w	r4, r4, ip
 80017dc:	d43e      	bmi.n	800185c <chprintf+0x2ac>
    if (left_align == FALSE)
 80017de:	f1b9 0f00 	cmp.w	r9, #0
 80017e2:	f040 813c 	bne.w	8001a5e <chprintf+0x4ae>
 80017e6:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 80017ea:	2c00      	cmp	r4, #0
 80017ec:	f000 8136 	beq.w	8001a5c <chprintf+0x4ac>
      if (*s == '-' && filler == '0') {
 80017f0:	7829      	ldrb	r1, [r5, #0]
 80017f2:	292d      	cmp	r1, #45	; 0x2d
 80017f4:	f000 813a 	beq.w	8001a6c <chprintf+0x4bc>
        streamPut(chp, (uint8_t)filler);
 80017f8:	f8db 3000 	ldr.w	r3, [fp]
 80017fc:	4631      	mov	r1, r6
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4658      	mov	r0, fp
 8001802:	4798      	blx	r3
      } while (++width != 0);
 8001804:	f119 0901 	adds.w	r9, r9, #1
 8001808:	d1f6      	bne.n	80017f8 <chprintf+0x248>
 800180a:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
 800180c:	2f00      	cmp	r7, #0
 800180e:	4423      	add	r3, r4
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	bfa8      	it	ge
 8001814:	464c      	movge	r4, r9
 8001816:	f6ff aed7 	blt.w	80015c8 <chprintf+0x18>
 800181a:	46b9      	mov	r9, r7
      streamPut(chp, (uint8_t)*s++);
 800181c:	f8db 3000 	ldr.w	r3, [fp]
    while (--i >= 0) {
 8001820:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f815 1b01 	ldrb.w	r1, [r5], #1
 800182a:	4658      	mov	r0, fp
 800182c:	4798      	blx	r3
    while (--i >= 0) {
 800182e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8001832:	d1f3      	bne.n	800181c <chprintf+0x26c>
 8001834:	9b00      	ldr	r3, [sp, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	443b      	add	r3, r7
 800183a:	9300      	str	r3, [sp, #0]
    while (width) {
 800183c:	2c00      	cmp	r4, #0
 800183e:	f43f aec3 	beq.w	80015c8 <chprintf+0x18>
 8001842:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 8001844:	f8db 3000 	ldr.w	r3, [fp]
 8001848:	4631      	mov	r1, r6
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4658      	mov	r0, fp
 800184e:	4798      	blx	r3
    while (width) {
 8001850:	3d01      	subs	r5, #1
 8001852:	d1f7      	bne.n	8001844 <chprintf+0x294>
 8001854:	9b00      	ldr	r3, [sp, #0]
 8001856:	4423      	add	r3, r4
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	e6b5      	b.n	80015c8 <chprintf+0x18>
    while (--i >= 0) {
 800185c:	2f00      	cmp	r7, #0
      width = 0;
 800185e:	bfa8      	it	ge
 8001860:	2400      	movge	r4, #0
    while (--i >= 0) {
 8001862:	dada      	bge.n	800181a <chprintf+0x26a>
 8001864:	e6b0      	b.n	80015c8 <chprintf+0x18>
    switch (c) {
 8001866:	f04f 0e08 	mov.w	lr, #8
 800186a:	e78d      	b.n	8001788 <chprintf+0x1d8>
        l = va_arg(ap, int);
 800186c:	f8da 1000 	ldr.w	r1, [sl]
 8001870:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8001874:	2900      	cmp	r1, #0
 8001876:	f2c0 810f 	blt.w	8001a98 <chprintf+0x4e8>
    p = tmpbuf;
 800187a:	ad0a      	add	r5, sp, #40	; 0x28
 800187c:	462a      	mov	r2, r5
  q = p + MAX_FILLER;
 800187e:	f102 0e0b 	add.w	lr, r2, #11
 8001882:	4670      	mov	r0, lr
    i = (int)(l % radix);
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <chprintf+0x530>)
 8001886:	fba3 7301 	umull	r7, r3, r3, r1
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	461f      	mov	r7, r3
 800188e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001892:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    i += '0';
 8001896:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 800189e:	4639      	mov	r1, r7
 80018a0:	2f00      	cmp	r7, #0
 80018a2:	d1ef      	bne.n	8001884 <chprintf+0x2d4>
  i = (int)(p + MAX_FILLER - q);
 80018a4:	ebae 0100 	sub.w	r1, lr, r0
 80018a8:	4411      	add	r1, r2
 80018aa:	e001      	b.n	80018b0 <chprintf+0x300>
 80018ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 80018b0:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80018b4:	428a      	cmp	r2, r1
 80018b6:	d1f9      	bne.n	80018ac <chprintf+0x2fc>
 80018b8:	eba2 0c05 	sub.w	ip, r2, r5
 80018bc:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 80018c0:	e78a      	b.n	80017d8 <chprintf+0x228>
      if ((s = va_arg(ap, char *)) == 0)
 80018c2:	f8da 5000 	ldr.w	r5, [sl]
 80018c6:	f10a 0a04 	add.w	sl, sl, #4
 80018ca:	2d00      	cmp	r5, #0
 80018cc:	f000 80f8 	beq.w	8001ac0 <chprintf+0x510>
      for (p = s; *p && (--precision >= 0); p++)
 80018d0:	782b      	ldrb	r3, [r5, #0]
      if (precision == 0)
 80018d2:	2f00      	cmp	r7, #0
 80018d4:	f040 80c7 	bne.w	8001a66 <chprintf+0x4b6>
      for (p = s; *p && (--precision >= 0); p++)
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80f6 	beq.w	8001aca <chprintf+0x51a>
 80018de:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80018e2:	462a      	mov	r2, r5
 80018e4:	e001      	b.n	80018ea <chprintf+0x33a>
 80018e6:	3b01      	subs	r3, #1
 80018e8:	d403      	bmi.n	80018f2 <chprintf+0x342>
 80018ea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80018ee:	2900      	cmp	r1, #0
 80018f0:	d1f9      	bne.n	80018e6 <chprintf+0x336>
 80018f2:	eba2 0c05 	sub.w	ip, r2, r5
 80018f6:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
      filler = ' ';
 80018fa:	2620      	movs	r6, #32
 80018fc:	e76c      	b.n	80017d8 <chprintf+0x228>
    switch (c) {
 80018fe:	f04f 0e10 	mov.w	lr, #16
 8001902:	e741      	b.n	8001788 <chprintf+0x1d8>
      f = (float) va_arg(ap, double);
 8001904:	f10a 0a07 	add.w	sl, sl, #7
 8001908:	f02a 0a07 	bic.w	sl, sl, #7
 800190c:	e9da 0100 	ldrd	r0, r1, [sl]
 8001910:	f7ff f896 	bl	8000a40 <__aeabi_d2f>
      if (f < 0) {
 8001914:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
 8001916:	f10a 0a08 	add.w	sl, sl, #8
 800191a:	9006      	str	r0, [sp, #24]
      if (f < 0) {
 800191c:	f7ff f92e 	bl	8000b7c <__aeabi_fcmplt>
 8001920:	2800      	cmp	r0, #0
 8001922:	f040 80c1 	bne.w	8001aa8 <chprintf+0x4f8>
    p = tmpbuf;
 8001926:	ad0a      	add	r5, sp, #40	; 0x28
 8001928:	9501      	str	r5, [sp, #4]
      p = ftoa(p, f, precision);
 800192a:	9806      	ldr	r0, [sp, #24]
 800192c:	f7fe fdfa 	bl	8000524 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001930:	3f01      	subs	r7, #1
 8001932:	2f08      	cmp	r7, #8
      p = ftoa(p, f, precision);
 8001934:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001938:	f200 80a6 	bhi.w	8001a88 <chprintf+0x4d8>
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <chprintf+0x534>)
 800193e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001942:	4638      	mov	r0, r7
 8001944:	f7fe fdcc 	bl	80004e0 <__aeabi_ui2d>
 8001948:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <chprintf+0x530>)
 800194a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800194e:	fba3 3707 	umull	r3, r7, r3, r7
 8001952:	08fb      	lsrs	r3, r7, #3
 8001954:	461f      	mov	r7, r3
 8001956:	9307      	str	r3, [sp, #28]
  l = (long)num;
 8001958:	9806      	ldr	r0, [sp, #24]
 800195a:	f7ff f937 	bl	8000bcc <__aeabi_f2iz>
  q = p + MAX_FILLER;
 800195e:	9b01      	ldr	r3, [sp, #4]
  l = num;
 8001960:	4602      	mov	r2, r0
  q = p + MAX_FILLER;
 8001962:	f103 0c0b 	add.w	ip, r3, #11
 8001966:	46e6      	mov	lr, ip
    i = (int)(l % radix);
 8001968:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <chprintf+0x530>)
 800196a:	fba3 1302 	umull	r1, r3, r3, r2
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	4619      	mov	r1, r3
 8001972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001976:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    i += '0';
 800197a:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f80e 3d01 	strb.w	r3, [lr, #-1]!
  } while ((ll /= radix) != 0);
 8001982:	460a      	mov	r2, r1
 8001984:	2900      	cmp	r1, #0
 8001986:	d1ef      	bne.n	8001968 <chprintf+0x3b8>
 8001988:	9306      	str	r3, [sp, #24]
  i = (int)(p + MAX_FILLER - q);
 800198a:	9b01      	ldr	r3, [sp, #4]
 800198c:	ebac 0c0e 	sub.w	ip, ip, lr
 8001990:	4671      	mov	r1, lr
 8001992:	461a      	mov	r2, r3
 8001994:	eb03 0e0c 	add.w	lr, r3, ip
 8001998:	9b06      	ldr	r3, [sp, #24]
 800199a:	e001      	b.n	80019a0 <chprintf+0x3f0>
 800199c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 80019a0:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 80019a4:	4572      	cmp	r2, lr
 80019a6:	d1f9      	bne.n	800199c <chprintf+0x3ec>
  *p++ = '.';
 80019a8:	232e      	movs	r3, #46	; 0x2e
 80019aa:	9901      	ldr	r1, [sp, #4]
 80019ac:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80019b0:	4461      	add	r1, ip
 80019b2:	7013      	strb	r3, [r2, #0]
 80019b4:	9101      	str	r1, [sp, #4]
  l = (long)((num - l) * precision);
 80019b6:	f7fe fda3 	bl	8000500 <__aeabi_i2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80019c2:	f7fe fc4f 	bl	8000264 <__aeabi_dsub>
 80019c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80019ca:	f7fe fdff 	bl	80005cc <__aeabi_dmul>
 80019ce:	f7ff f80f 	bl	80009f0 <__aeabi_d2iz>
  q = p + MAX_FILLER;
 80019d2:	9901      	ldr	r1, [sp, #4]
    ll = num;
 80019d4:	9b07      	ldr	r3, [sp, #28]
  q = p + MAX_FILLER;
 80019d6:	f101 0e0d 	add.w	lr, r1, #13
    ll = num;
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf08      	it	eq
 80019de:	4607      	moveq	r7, r0
  *p++ = '.';
 80019e0:	f101 0c02 	add.w	ip, r1, #2
  q = p + MAX_FILLER;
 80019e4:	4672      	mov	r2, lr
 80019e6:	e000      	b.n	80019ea <chprintf+0x43a>
  } while ((ll /= radix) != 0);
 80019e8:	460a      	mov	r2, r1
    i = (int)(l % radix);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <chprintf+0x530>)
 80019ec:	fba3 1300 	umull	r1, r3, r3, r0
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	4619      	mov	r1, r3
  } while ((ll /= radix) != 0);
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <chprintf+0x530>)
 80019f6:	fba3 3707 	umull	r3, r7, r3, r7
    i = (int)(l % radix);
 80019fa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80019fe:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    i += '0';
 8001a02:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001a04:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001a06:	08ff      	lsrs	r7, r7, #3
    l /= radix;
 8001a08:	4608      	mov	r0, r1
    *--q = i;
 8001a0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a0e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
  } while ((ll /= radix) != 0);
 8001a12:	d1e9      	bne.n	80019e8 <chprintf+0x438>
  i = (int)(p + MAX_FILLER - q);
 8001a14:	ebae 0e01 	sub.w	lr, lr, r1
 8001a18:	4660      	mov	r0, ip
 8001a1a:	4471      	add	r1, lr
 8001a1c:	e001      	b.n	8001a22 <chprintf+0x472>
 8001a1e:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
 8001a22:	4291      	cmp	r1, r2
    *p++ = *q++;
 8001a24:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8001a28:	d1f9      	bne.n	8001a1e <chprintf+0x46e>
 8001a2a:	44e6      	add	lr, ip
 8001a2c:	ebae 0c05 	sub.w	ip, lr, r5
 8001a30:	f10c 37ff 	add.w	r7, ip, #4294967295	; 0xffffffff
 8001a34:	e6d0      	b.n	80017d8 <chprintf+0x228>
      *p++ = va_arg(ap, int);
 8001a36:	f8da 3000 	ldr.w	r3, [sl]
 8001a3a:	ad10      	add	r5, sp, #64	; 0x40
 8001a3c:	2700      	movs	r7, #0
 8001a3e:	f805 3d18 	strb.w	r3, [r5, #-24]!
 8001a42:	f10a 0a04 	add.w	sl, sl, #4
 8001a46:	f04f 0c01 	mov.w	ip, #1
      filler = ' ';
 8001a4a:	2620      	movs	r6, #32
 8001a4c:	e6c4      	b.n	80017d8 <chprintf+0x228>
      *p++ = c;
 8001a4e:	ad10      	add	r5, sp, #64	; 0x40
 8001a50:	2700      	movs	r7, #0
 8001a52:	f04f 0c01 	mov.w	ip, #1
 8001a56:	f805 2d18 	strb.w	r2, [r5, #-24]!
 8001a5a:	e6bd      	b.n	80017d8 <chprintf+0x228>
    if (width < 0) {
 8001a5c:	464c      	mov	r4, r9
    while (--i >= 0) {
 8001a5e:	2f00      	cmp	r7, #0
 8001a60:	f6bf aedb 	bge.w	800181a <chprintf+0x26a>
 8001a64:	e6ea      	b.n	800183c <chprintf+0x28c>
      for (p = s; *p && (--precision >= 0); p++)
 8001a66:	b383      	cbz	r3, 8001aca <chprintf+0x51a>
 8001a68:	1e7b      	subs	r3, r7, #1
 8001a6a:	e73a      	b.n	80018e2 <chprintf+0x332>
      if (*s == '-' && filler == '0') {
 8001a6c:	2e30      	cmp	r6, #48	; 0x30
 8001a6e:	f47f aec3 	bne.w	80017f8 <chprintf+0x248>
        streamPut(chp, (uint8_t)*s++);
 8001a72:	f8db 3000 	ldr.w	r3, [fp]
 8001a76:	4658      	mov	r0, fp
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4798      	blx	r3
        n++;
 8001a7c:	9b00      	ldr	r3, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
 8001a7e:	3501      	adds	r5, #1
        n++;
 8001a80:	3301      	adds	r3, #1
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	3f01      	subs	r7, #1
 8001a86:	e6b7      	b.n	80017f8 <chprintf+0x248>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001a88:	4f17      	ldr	r7, [pc, #92]	; (8001ae8 <chprintf+0x538>)
 8001a8a:	a313      	add	r3, pc, #76	; (adr r3, 8001ad8 <chprintf+0x528>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	9707      	str	r7, [sp, #28]
 8001a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a96:	e75f      	b.n	8001958 <chprintf+0x3a8>
        *p++ = '-';
 8001a98:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001a9a:	4249      	negs	r1, r1
        *p++ = '-';
 8001a9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001aa0:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8001aa4:	ad0a      	add	r5, sp, #40	; 0x28
 8001aa6:	e6ea      	b.n	800187e <chprintf+0x2ce>
        *p++ = '-';
 8001aa8:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 8001aaa:	9a06      	ldr	r2, [sp, #24]
        *p++ = '-';
 8001aac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        f = -f;
 8001ab0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
        *p++ = '-';
 8001ab4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
        f = -f;
 8001ab8:	9206      	str	r2, [sp, #24]
        *p++ = '-';
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	ad0a      	add	r5, sp, #40	; 0x28
 8001abe:	e734      	b.n	800192a <chprintf+0x37a>
      if (precision == 0)
 8001ac0:	b90f      	cbnz	r7, 8001ac6 <chprintf+0x516>
        precision = 32767;
 8001ac2:	f647 77ff 	movw	r7, #32767	; 0x7fff
        s = "(null)";
 8001ac6:	4d09      	ldr	r5, [pc, #36]	; (8001aec <chprintf+0x53c>)
 8001ac8:	e7ce      	b.n	8001a68 <chprintf+0x4b8>
      for (p = s; *p && (--precision >= 0); p++)
 8001aca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ace:	2620      	movs	r6, #32
 8001ad0:	e685      	b.n	80017de <chprintf+0x22e>
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	41cdcd65 	.word	0x41cdcd65
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	08002744 	.word	0x08002744
 8001ae8:	05f5e100 	.word	0x05f5e100
 8001aec:	0800273c 	.word	0x0800273c

08001af0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <__early_init+0x74>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001af2:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	f041 0101 	orr.w	r1, r1, #1
 8001afa:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	0798      	lsls	r0, r3, #30
 8001b00:	d5fc      	bpl.n	8001afc <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001b02:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001b04:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b06:	4917      	ldr	r1, [pc, #92]	; (8001b64 <__early_init+0x74>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001b08:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8001b0c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001b0e:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b10:	684b      	ldr	r3, [r1, #4]
 8001b12:	f013 0f0c 	tst.w	r3, #12
 8001b16:	d1fb      	bne.n	8001b10 <__early_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001b18:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <__early_init+0x74>)
  RCC->CR |= RCC_CR_HSEON;
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	0399      	lsls	r1, r3, #14
 8001b26:	d5fc      	bpl.n	8001b22 <__early_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001b28:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <__early_init+0x74>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b38:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001b3a:	680b      	ldr	r3, [r1, #0]
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	d5fc      	bpl.n	8001b3a <__early_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001b40:	2210      	movs	r2, #16
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8001b42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  FLASH->ACR = STM32_FLASHBITS;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8001b48:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001b4c:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <__early_init+0x74>)
  RCC->CFGR |= STM32_SW;
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001b56:	6853      	ldr	r3, [r2, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d1fa      	bne.n	8001b56 <__early_init+0x66>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	00000000 	.word	0x00000000

08001b70 <chThdSleep>:
void chThdSleep(systime_t time) {
 8001b70:	b508      	push	{r3, lr}
 8001b72:	4601      	mov	r1, r0
 8001b74:	2320      	movs	r3, #32
 8001b76:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001b7a:	2008      	movs	r0, #8
 8001b7c:	f7ff faf8 	bl	8001170 <chSchGoSleepTimeoutS>
 8001b80:	2300      	movs	r3, #0
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	bd08      	pop	{r3, pc}
	...

08001b90 <chSchDoReschedule>:
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001b90:	2101      	movs	r1, #1
void chSchDoReschedule(void) {
 8001b92:	b430      	push	{r4, r5}
  tp->state = CH_STATE_READY;
 8001b94:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8001b96:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8001b98:	6810      	ldr	r0, [r2, #0]
 8001b9a:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 8001b9c:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001b9e:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8001ba0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8001ba4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8001ba6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001ba8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8001baa:	f884 5020 	strb.w	r5, [r4, #32]
 8001bae:	e000      	b.n	8001bb2 <chSchDoReschedule+0x22>
 8001bb0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4291      	cmp	r1, r2
 8001bb6:	d3fb      	bcc.n	8001bb0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8001bb8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001bba:	4621      	mov	r1, r4
  tp->queue.next             = cp;
 8001bbc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001bbe:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001bc0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001bc2:	605c      	str	r4, [r3, #4]
}
 8001bc4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8001bc6:	f7fe bb35 	b.w	8000234 <_port_switch>
 8001bca:	bf00      	nop
 8001bcc:	20000b78 	.word	0x20000b78

08001bd0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001bd0:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
 8001bd2:	b410      	push	{r4}
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <chSchReadyI+0x28>)
  tp->state = CH_STATE_READY;
 8001bda:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8001bde:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	428a      	cmp	r2, r1
 8001be4:	d2fb      	bcs.n	8001bde <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
 8001be6:	685a      	ldr	r2, [r3, #4]
}
 8001be8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
 8001bea:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001bec:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001bee:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001bf0:	605c      	str	r4, [r3, #4]
}
 8001bf2:	bc10      	pop	{r4}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000b78 	.word	0x20000b78
 8001bfc:	00000000 	.word	0x00000000

08001c00 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 8001c04:	4d69      	ldr	r5, [pc, #420]	; (8001dac <VectorDC+0x1ac>)
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8001c06:	b083      	sub	sp, #12
  USART_TypeDef *u = sdp->usart;
 8001c08:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001c0a:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8001c0e:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8001c10:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8001c12:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001c14:	f100 8082 	bmi.w	8001d1c <VectorDC+0x11c>
 8001c18:	2320      	movs	r3, #32
 8001c1a:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001c1e:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001c22:	d049      	beq.n	8001cb8 <VectorDC+0xb8>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001c24:	f04f 0800 	mov.w	r8, #0
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001c28:	4f61      	ldr	r7, [pc, #388]	; (8001db0 <VectorDC+0x1b0>)
 8001c2a:	e007      	b.n	8001c3c <VectorDC+0x3c>
    if (sr & USART_SR_RXNE)
 8001c2c:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001c2e:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001c30:	d41c      	bmi.n	8001c6c <VectorDC+0x6c>
    sr = u->SR;
 8001c32:	6834      	ldr	r4, [r6, #0]
 8001c34:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001c36:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001c3a:	d03d      	beq.n	8001cb8 <VectorDC+0xb8>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001c3c:	0723      	lsls	r3, r4, #28
 8001c3e:	d0f5      	beq.n	8001c2c <VectorDC+0x2c>
    sts |= SD_OVERRUN_ERROR;
 8001c40:	f014 0f08 	tst.w	r4, #8
 8001c44:	bf0c      	ite	eq
 8001c46:	2000      	moveq	r0, #0
 8001c48:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8001c4a:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 8001c4c:	bf48      	it	mi
 8001c4e:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8001c52:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001c54:	bf48      	it	mi
 8001c56:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8001c5a:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001c5c:	bf48      	it	mi
 8001c5e:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001c62:	f000 fcfd 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
    if (sr & USART_SR_RXNE)
 8001c66:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001c68:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001c6a:	d5e2      	bpl.n	8001c32 <VectorDC+0x32>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001c6c:	696a      	ldr	r2, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001c6e:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	d041      	beq.n	8001cfa <VectorDC+0xfa>
  if (iqIsFullI(iqp)) {
 8001c76:	6a2a      	ldr	r2, [r5, #32]
 8001c78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d046      	beq.n	8001d0c <VectorDC+0x10c>
  iqp->q_counter++;
 8001c7e:	6969      	ldr	r1, [r5, #20]
 8001c80:	4023      	ands	r3, r4
  *iqp->q_wrptr++ = b;
 8001c82:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 8001c84:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8001c86:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8001c88:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001c8a:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001c8c:	6a2a      	ldr	r2, [r5, #32]
 8001c8e:	69eb      	ldr	r3, [r5, #28]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d301      	bcc.n	8001c98 <VectorDC+0x98>
    iqp->q_wrptr = iqp->q_buffer;
 8001c94:	69ab      	ldr	r3, [r5, #24]
 8001c96:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001c98:	68eb      	ldr	r3, [r5, #12]
 8001c9a:	42bb      	cmp	r3, r7
 8001c9c:	d0c9      	beq.n	8001c32 <VectorDC+0x32>
  tqp->next             = tp->queue.next;
 8001c9e:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001ca4:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 8001ca6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001caa:	f7ff ff91 	bl	8001bd0 <chSchReadyI>
    sr = u->SR;
 8001cae:	6834      	ldr	r4, [r6, #0]
 8001cb0:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001cb2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001cb6:	d1c1      	bne.n	8001c3c <VectorDC+0x3c>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001cbe:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001cc2:	d001      	beq.n	8001cc8 <VectorDC+0xc8>
 8001cc4:	0622      	lsls	r2, r4, #24
 8001cc6:	d437      	bmi.n	8001d38 <VectorDC+0x138>
  if (sr & USART_SR_TC) {
 8001cc8:	0663      	lsls	r3, r4, #25
 8001cca:	d511      	bpl.n	8001cf0 <VectorDC+0xf0>
 8001ccc:	2320      	movs	r3, #32
 8001cce:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 8001cd2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001cd4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d053      	beq.n	8001d82 <VectorDC+0x182>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001cda:	f64f 73bf 	movw	r3, #65471	; 0xffbf
    u->SR = ~USART_SR_TC;
 8001cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001ce2:	ea09 0303 	and.w	r3, r9, r3
 8001ce6:	60f3      	str	r3, [r6, #12]
 8001ce8:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001cea:	6032      	str	r2, [r6, #0]
 8001cec:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 8001cf0:	b003      	add	sp, #12
 8001cf2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8001cf6:	f7fe bfeb 	b.w	8000cd0 <_port_irq_epilogue>
 8001cfa:	2004      	movs	r0, #4
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f000 fcaf 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
  if (iqIsFullI(iqp)) {
 8001d02:	6a2a      	ldr	r2, [r5, #32]
 8001d04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	428a      	cmp	r2, r1
 8001d0a:	d1b8      	bne.n	8001c7e <VectorDC+0x7e>
 8001d0c:	6969      	ldr	r1, [r5, #20]
 8001d0e:	2900      	cmp	r1, #0
 8001d10:	d0b5      	beq.n	8001c7e <VectorDC+0x7e>
 8001d12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d16:	f000 fca3 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
 8001d1a:	e78a      	b.n	8001c32 <VectorDC+0x32>
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d26:	f000 fc9b 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
    u->SR = ~USART_SR_LBD;
 8001d2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6032      	str	r2, [r6, #0]
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	e76f      	b.n	8001c18 <VectorDC+0x18>
 8001d38:	2320      	movs	r3, #32
 8001d3a:	f383 8811 	msr	BASEPRI, r3
  if (oqIsEmptyI(oqp)) {
 8001d3e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001d40:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d024      	beq.n	8001d90 <VectorDC+0x190>
  oqp->q_counter++;
 8001d46:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (oqp->q_rdptr >= oqp->q_top) {
 8001d48:	6c28      	ldr	r0, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 8001d4a:	1c59      	adds	r1, r3, #1
  oqp->q_counter++;
 8001d4c:	3201      	adds	r2, #1
 8001d4e:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001d50:	64a9      	str	r1, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8001d52:	4281      	cmp	r1, r0
  b = *oqp->q_rdptr++;
 8001d54:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8001d56:	d301      	bcc.n	8001d5c <VectorDC+0x15c>
    oqp->q_rdptr = oqp->q_buffer;
 8001d58:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001d5a:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001d5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <VectorDC+0x1b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d009      	beq.n	8001d78 <VectorDC+0x178>
  tp->u.rdymsg = msg;
 8001d64:	f04f 0e00 	mov.w	lr, #0
  tqp->next             = tp->queue.next;
 8001d68:	6819      	ldr	r1, [r3, #0]
  (void) chSchReadyI(tp);
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	6329      	str	r1, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8001d6e:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
 8001d70:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001d74:	f7ff ff2c 	bl	8001bd0 <chSchReadyI>
      u->DR = b;
 8001d78:	6077      	str	r7, [r6, #4]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	e7a2      	b.n	8001cc8 <VectorDC+0xc8>
    if (oqIsEmptyI(&sdp->oqueue))
 8001d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0a8      	beq.n	8001cda <VectorDC+0xda>
 8001d88:	2010      	movs	r0, #16
 8001d8a:	f000 fc69 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
 8001d8e:	e7a4      	b.n	8001cda <VectorDC+0xda>
  if (oqIsEmptyI(oqp)) {
 8001d90:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d0d7      	beq.n	8001d46 <VectorDC+0x146>
 8001d96:	2008      	movs	r0, #8
 8001d98:	f000 fc62 	bl	8002660 <chEvtBroadcastFlagsI.constprop.27>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001d9c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001da0:	ea09 0303 	and.w	r3, r9, r3
 8001da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da8:	60f3      	str	r3, [r6, #12]
 8001daa:	e7e6      	b.n	8001d7a <VectorDC+0x17a>
 8001dac:	20000afc 	.word	0x20000afc
 8001db0:	20000b08 	.word	0x20000b08
 8001db4:	20000b2c 	.word	0x20000b2c
	...

08001dc0 <chThdExit>:
void chThdExit(msg_t msg) {
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <chThdExit+0x4c>)
 8001dcc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8001dce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001dd0:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001dd4:	4285      	cmp	r5, r0
  tp->u.exitcode = msg;
 8001dd6:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001dd8:	d006      	beq.n	8001de8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8001dda:	6803      	ldr	r3, [r0, #0]
 8001ddc:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001dde:	f7ff fef7 	bl	8001bd0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001de2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001de4:	42a8      	cmp	r0, r5
 8001de6:	d1f8      	bne.n	8001dda <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8001de8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001dec:	b943      	cbnz	r3, 8001e00 <chThdExit+0x40>
 8001dee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001df2:	079b      	lsls	r3, r3, #30
 8001df4:	d104      	bne.n	8001e00 <chThdExit+0x40>
    REG_REMOVE(tp);
 8001df6:	6922      	ldr	r2, [r4, #16]
 8001df8:	6963      	ldr	r3, [r4, #20]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	6922      	ldr	r2, [r4, #16]
 8001dfe:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001e00:	200f      	movs	r0, #15
}
 8001e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8001e06:	f7ff b99b 	b.w	8001140 <chSchGoSleepS>
 8001e0a:	bf00      	nop
 8001e0c:	20000b78 	.word	0x20000b78

08001e10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001e12:	2600      	movs	r6, #0
 8001e14:	4f12      	ldr	r7, [pc, #72]	; (8001e60 <__init_ram_areas+0x50>)
void __init_ram_areas(void) {
 8001e16:	4d13      	ldr	r5, [pc, #76]	; (8001e64 <__init_ram_areas+0x54>)
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <__init_ram_areas+0x58>)
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <__init_ram_areas+0x5c>)
 8001e1c:	4914      	ldr	r1, [pc, #80]	; (8001e70 <__init_ram_areas+0x60>)
 8001e1e:	f107 0e70 	add.w	lr, r7, #112	; 0x70
    while (p < rap->clear_area) {
 8001e22:	429c      	cmp	r4, r3
 8001e24:	d911      	bls.n	8001e4a <__init_ram_areas+0x3a>
 8001e26:	461a      	mov	r2, r3
 8001e28:	3904      	subs	r1, #4
      *p = *tp;
 8001e2a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001e2e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001e32:	4294      	cmp	r4, r2
 8001e34:	d8f9      	bhi.n	8001e2a <__init_ram_areas+0x1a>
 8001e36:	43da      	mvns	r2, r3
 8001e38:	4414      	add	r4, r2
 8001e3a:	f024 0403 	bic.w	r4, r4, #3
 8001e3e:	3404      	adds	r4, #4
 8001e40:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001e42:	429d      	cmp	r5, r3
 8001e44:	d903      	bls.n	8001e4e <__init_ram_areas+0x3e>
      *p = 0;
 8001e46:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8001e4a:	429d      	cmp	r5, r3
 8001e4c:	d8fb      	bhi.n	8001e46 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001e4e:	4577      	cmp	r7, lr
 8001e50:	d004      	beq.n	8001e5c <__init_ram_areas+0x4c>
 8001e52:	f107 0110 	add.w	r1, r7, #16
 8001e56:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 8001e58:	3710      	adds	r7, #16
 8001e5a:	e7e2      	b.n	8001e22 <__init_ram_areas+0x12>
 8001e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	08002768 	.word	0x08002768
 8001e64:	20000be8 	.word	0x20000be8
 8001e68:	20000be8 	.word	0x20000be8
 8001e6c:	20000be8 	.word	0x20000be8
 8001e70:	08002950 	.word	0x08002950
	...

08001e80 <__default_exit>:
void __default_exit(void) {
 8001e80:	e7fe      	b.n	8001e80 <__default_exit>
 8001e82:	bf00      	nop
	...

08001e90 <__late_init>:
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
	...

08001ea0 <__core_init>:
void __core_init(void) {
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
	...

08001eb0 <Thread1>:

  (void)arg;

  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, 2);
 8001eb0:	f04f 0804 	mov.w	r8, #4
static THD_FUNCTION(Thread1, arg) {
 8001eb4:	b580      	push	{r7, lr}
    palSetPad(GPIOD, 2);
 8001eb6:	46c1      	mov	r9, r8
    chThdSleepMilliseconds(delay);
 8001eb8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <Thread1+0x50>)
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <Thread1+0x54>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4e11      	ldr	r6, [pc, #68]	; (8001f08 <Thread1+0x58>)
    palSetPad(GPIOD, 2);
 8001ec4:	4d11      	ldr	r5, [pc, #68]	; (8001f0c <Thread1+0x5c>)
    chThdSleepMilliseconds(delay);
 8001ec6:	4c12      	ldr	r4, [pc, #72]	; (8001f10 <Thread1+0x60>)
 8001ec8:	619a      	str	r2, [r3, #24]
    palSetPad(GPIOD, 2);
 8001eca:	f8c5 9010 	str.w	r9, [r5, #16]
    chThdSleepMilliseconds(delay);
 8001ece:	7830      	ldrb	r0, [r6, #0]
 8001ed0:	fb07 f000 	mul.w	r0, r7, r0
 8001ed4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 8001ed8:	fba4 3000 	umull	r3, r0, r4, r0
 8001edc:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8001ee0:	f7ff fe46 	bl	8001b70 <chThdSleep>
    palClearPad(GPIOD, 2);
 8001ee4:	f8c5 8014 	str.w	r8, [r5, #20]
    chThdSleepMilliseconds(delay);
 8001ee8:	7830      	ldrb	r0, [r6, #0]
 8001eea:	fb07 f000 	mul.w	r0, r7, r0
 8001eee:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 8001ef2:	fba4 3000 	umull	r3, r0, r4, r0
 8001ef6:	f3c0 108f 	ubfx	r0, r0, #6, #16
 8001efa:	f7ff fe39 	bl	8001b70 <chThdSleep>
 8001efe:	e7e4      	b.n	8001eca <Thread1+0x1a>
 8001f00:	20000b78 	.word	0x20000b78
 8001f04:	080027e8 	.word	0x080027e8
 8001f08:	20000af8 	.word	0x20000af8
 8001f0c:	40011400 	.word	0x40011400
 8001f10:	10624dd3 	.word	0x10624dd3
	...

08001f20 <main>:
  rccResetAPB1(0xFFFFFFFF);
 8001f20:	2100      	movs	r1, #0
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <main+0x40>)
  }
}

int main(void) {
 8001f28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001f2c:	691e      	ldr	r6, [r3, #16]
 8001f2e:	6118      	str	r0, [r3, #16]
 8001f30:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001f32:	68de      	ldr	r6, [r3, #12]
 8001f34:	60d8      	str	r0, [r3, #12]
 8001f36:	60d9      	str	r1, [r3, #12]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001f38:	460a      	mov	r2, r1
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001f3a:	460c      	mov	r4, r1
  rccEnablePWRInterface(FALSE);
 8001f3c:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001f3e:	4d09      	ldr	r5, [pc, #36]	; (8001f64 <main+0x44>)
  rccEnablePWRInterface(FALSE);
 8001f40:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f44:	61d9      	str	r1, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8001f46:	69d9      	ldr	r1, [r3, #28]
 8001f48:	b083      	sub	sp, #12
 8001f4a:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8001f4e:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <main+0x48>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	4e04      	ldr	r6, [pc, #16]	; (8001f6c <main+0x4c>)
 8001f5a:	4905      	ldr	r1, [pc, #20]	; (8001f70 <main+0x50>)
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	e00b      	b.n	8001f78 <main+0x58>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	08002808 	.word	0x08002808
 8001f6c:	40020008 	.word	0x40020008
 8001f70:	20000870 	.word	0x20000870
 8001f74:	f850 6c14 	ldr.w	r6, [r0, #-20]
 8001f78:	6034      	str	r4, [r6, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001f7a:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001f7e:	3201      	adds	r2, #1
 8001f80:	2a07      	cmp	r2, #7
 8001f82:	f100 0014 	add.w	r0, r0, #20
 8001f86:	d1f5      	bne.n	8001f74 <main+0x54>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001f88:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001f8c:	2101      	movs	r1, #1
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8001f8e:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  GPIOC->ODR = config->PCData.odr;
 8001f92:	f46f 7840 	mvn.w	r8, #768	; 0x300
  sdp->vmt = &vmt;
 8001f96:	4ec9      	ldr	r6, [pc, #804]	; (80022bc <main+0x39c>)
  oqp->q_counter = size;
 8001f98:	f04f 0c10 	mov.w	ip, #16
 8001f9c:	4630      	mov	r0, r6
 8001f9e:	4dc8      	ldr	r5, [pc, #800]	; (80022c0 <main+0x3a0>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001fa0:	f8df 9380 	ldr.w	r9, [pc, #896]	; 8002324 <main+0x404>
 8001fa4:	f8c5 e004 	str.w	lr, [r5, #4]
 8001fa8:	f8d9 7018 	ldr.w	r7, [r9, #24]
  GPIOA->ODR = config->PAData.odr;
 8001fac:	f5a5 4578 	sub.w	r5, r5, #63488	; 0xf800
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001fb0:	f047 077d 	orr.w	r7, r7, #125	; 0x7d
 8001fb4:	f8c9 7018 	str.w	r7, [r9, #24]
  GPIOA->CRH = config->PAData.crh;
 8001fb8:	4fc2      	ldr	r7, [pc, #776]	; (80022c4 <main+0x3a4>)
  GPIOA->ODR = config->PAData.odr;
 8001fba:	f8c5 e00c 	str.w	lr, [r5, #12]
  GPIOA->CRH = config->PAData.crh;
 8001fbe:	606f      	str	r7, [r5, #4]
  GPIOA->CRL = config->PAData.crl;
 8001fc0:	3f77      	subs	r7, #119	; 0x77
  iqp->q_notify  = infy;
 8001fc2:	62b4      	str	r4, [r6, #40]	; 0x28
 8001fc4:	602f      	str	r7, [r5, #0]
  GPIOB->CRH = config->PBData.crh;
 8001fc6:	f107 5730 	add.w	r7, r7, #738197504	; 0x2c000000
 8001fca:	f507 172c 	add.w	r7, r7, #2818048	; 0x2b0000
 8001fce:	3744      	adds	r7, #68	; 0x44
  GPIOB->ODR = config->PBData.odr;
 8001fd0:	f8c5 e40c 	str.w	lr, [r5, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 8001fd4:	f8c5 7404 	str.w	r7, [r5, #1028]	; 0x404
  GPIOC->CRH = config->PCData.crh;
 8001fd8:	4fbb      	ldr	r7, [pc, #748]	; (80022c8 <main+0x3a8>)
  GPIOB->CRL = config->PBData.crl;
 8001fda:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  sdp->state = SD_STOP;
 8001fde:	7231      	strb	r1, [r6, #8]
  GPIOC->ODR = config->PCData.odr;
 8001fe0:	f8c5 880c 	str.w	r8, [r5, #2060]	; 0x80c
  GPIOC->CRH = config->PCData.crh;
 8001fe4:	f8c5 7804 	str.w	r7, [r5, #2052]	; 0x804
  GPIOC->CRL = config->PCData.crl;
 8001fe8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001fec:	f105 4591 	add.w	r5, r5, #1216348160	; 0x48800000
  GPIOD->ODR = config->PDData.odr;
 8001ff0:	4fb6      	ldr	r7, [pc, #728]	; (80022cc <main+0x3ac>)
  GPIOD->CRL = config->PDData.crl;
 8001ff2:	f505 25ef 	add.w	r5, r5, #489472	; 0x77800
 8001ff6:	f505 7551 	add.w	r5, r5, #836	; 0x344
  GPIOD->ODR = config->PDData.odr;
 8001ffa:	f8c7 e00c 	str.w	lr, [r7, #12]
  GPIOD->CRH = config->PDData.crh;
 8001ffe:	607b      	str	r3, [r7, #4]
  GPIOD->CRL = config->PDData.crl;
 8002000:	603d      	str	r5, [r7, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002002:	4db3      	ldr	r5, [pc, #716]	; (80022d0 <main+0x3b0>)
  sdp->vmt = &vmt;
 8002004:	4fb3      	ldr	r7, [pc, #716]	; (80022d4 <main+0x3b4>)
 8002006:	f8c5 e00c 	str.w	lr, [r5, #12]
  GPIOE->CRH = config->PEData.crh;
 800200a:	606b      	str	r3, [r5, #4]
  GPIOE->CRL = config->PEData.crl;
 800200c:	602b      	str	r3, [r5, #0]
 800200e:	f840 7b04 	str.w	r7, [r0], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002012:	6070      	str	r0, [r6, #4]
  tqp->next = (thread_t *)tqp;
 8002014:	f106 000c 	add.w	r0, r6, #12
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002018:	4baf      	ldr	r3, [pc, #700]	; (80022d8 <main+0x3b8>)
 800201a:	4db0      	ldr	r5, [pc, #704]	; (80022dc <main+0x3bc>)
 800201c:	60f0      	str	r0, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 800201e:	6130      	str	r0, [r6, #16]
  ICUD1.tim = STM32_TIM1;
 8002020:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8002328 <main+0x408>
  iqp->q_buffer  = bp;
 8002024:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8002028:	61b0      	str	r0, [r6, #24]
  iqp->q_rdptr   = bp;
 800202a:	6270      	str	r0, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800202c:	6230      	str	r0, [r6, #32]
  iqp->q_top     = bp + size;
 800202e:	f106 0064 	add.w	r0, r6, #100	; 0x64
 8002032:	61f0      	str	r0, [r6, #28]
 8002034:	f8c5 800c 	str.w	r8, [r5, #12]
  iqp->q_counter = 0;
 8002038:	6174      	str	r4, [r6, #20]
/*
 * Board-specific initialization code.
 */
void boardInit(void) {

	AFIO -> MAPR |= AFIO_MAPR_USART3_REMAP_PARTIALREMAP;
 800203a:	f5a8 5830 	sub.w	r8, r8, #11264	; 0x2c00
 800203e:	7029      	strb	r1, [r5, #0]
  icup->config = NULL;
 8002040:	606c      	str	r4, [r5, #4]
  iqp->q_link    = link;
 8002042:	62f6      	str	r6, [r6, #44]	; 0x2c
 8002044:	7019      	strb	r1, [r3, #0]
  oqp->q_counter = size;
 8002046:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38
 800204a:	f8d8 7004 	ldr.w	r7, [r8, #4]
  oqp->q_buffer  = bp;
 800204e:	63f0      	str	r0, [r6, #60]	; 0x3c
 8002050:	ea47 070c 	orr.w	r7, r7, ip
 8002054:	f8c8 7004 	str.w	r7, [r8, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002058:	f8d9 701c 	ldr.w	r7, [r9, #28]
  oqp->q_rdptr   = bp;
 800205c:	64b0      	str	r0, [r6, #72]	; 0x48
 800205e:	430f      	orrs	r7, r1
 8002060:	f8c9 701c 	str.w	r7, [r9, #28]
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8002064:	f241 070a 	movw	r7, #4106	; 0x100a
 8002068:	629f      	str	r7, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800206a:	f241 0718 	movw	r7, #4120	; 0x1018
  oqp->q_wrptr   = bp;
 800206e:	6470      	str	r0, [r6, #68]	; 0x44
  oqp->q_top     = bp + size;
 8002070:	f106 0074 	add.w	r0, r6, #116	; 0x74
 8002074:	6430      	str	r0, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 8002076:	489a      	ldr	r0, [pc, #616]	; (80022e0 <main+0x3c0>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002078:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 800232c <main+0x40c>
 800207c:	64f0      	str	r0, [r6, #76]	; 0x4c
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 800207e:	4899      	ldr	r0, [pc, #612]	; (80022e4 <main+0x3c4>)
 8002080:	62df      	str	r7, [r3, #44]	; 0x2c
 8002082:	6770      	str	r0, [r6, #116]	; 0x74
  SPID1.spi       = SPI1;
 8002084:	f500 4068 	add.w	r0, r0, #59392	; 0xe800
 8002088:	61d8      	str	r0, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800208a:	4897      	ldr	r0, [pc, #604]	; (80022e8 <main+0x3c8>)
 800208c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8002090:	6218      	str	r0, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8002092:	3014      	adds	r0, #20

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002098:	6258      	str	r0, [r3, #36]	; 0x24
 800209a:	f645 50bf 	movw	r0, #23999	; 0x5dbf
  ST_ENABLE_STOP();
 800209e:	f447 6700 	orr.w	r7, r7, #2048	; 0x800
  spip->config = NULL;
 80020a2:	605c      	str	r4, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80020a4:	609c      	str	r4, [r3, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80020a6:	615c      	str	r4, [r3, #20]
  oqp->q_link    = link;
 80020a8:	6536      	str	r6, [r6, #80]	; 0x50
 80020aa:	f8c8 7004 	str.w	r7, [r8, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80020ae:	6290      	str	r0, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80020b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  tqp->next = (thread_t *)tqp;
 80020b4:	4f8d      	ldr	r7, [pc, #564]	; (80022ec <main+0x3cc>)
 80020b6:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80020ba:	62d0      	str	r0, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80020bc:	6194      	str	r4, [r2, #24]
 80020be:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
  STM32_ST_TIM->CCR[0] = 0;
 80020c2:	6354      	str	r4, [r2, #52]	; 0x34
  tqp->prev = (thread_t *)tqp;
 80020c4:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
  tqp->next = (thread_t *)tqp;
 80020c8:	f103 080c 	add.w	r8, r3, #12
  STM32_ST_TIM->DIER   = 0;
 80020cc:	60d4      	str	r4, [r2, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80020ce:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80020d2:	f8c3 800c 	str.w	r8, [r3, #12]
  tqp->prev = (thread_t *)tqp;
 80020d6:	f8c3 8010 	str.w	r8, [r3, #16]
  STM32_ST_TIM->CR2    = 0;
 80020da:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80020dc:	6151      	str	r1, [r2, #20]
  ch.vtlist.delta = (systime_t)-1;
 80020de:	f8a7 e024 	strh.w	lr, [r7, #36]	; 0x24
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80020e2:	6011      	str	r1, [r2, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	f04f 0b20 	mov.w	fp, #32
  tp->name      = name;
 80020ec:	4b80      	ldr	r3, [pc, #512]	; (80022f0 <main+0x3d0>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80020ee:	4881      	ldr	r0, [pc, #516]	; (80022f4 <main+0x3d4>)
 80020f0:	647b      	str	r3, [r7, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80020f2:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8002330 <main+0x410>
  tlp->next = (thread_t *)tlp;
 80020f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020fa:	657b      	str	r3, [r7, #84]	; 0x54
  ch_memcore.nextmem = __heap_base__;
 80020fc:	f8df e234 	ldr.w	lr, [pc, #564]	; 8002334 <main+0x414>
 8002100:	4b7d      	ldr	r3, [pc, #500]	; (80022f8 <main+0x3d8>)
  tqp->prev = (thread_t *)tqp;
 8002102:	607f      	str	r7, [r7, #4]
  ch.rlist.prio = NOPRIO;
 8002104:	60bc      	str	r4, [r7, #8]
  ch.vtlist.lasttime = (systime_t)0;
 8002106:	84fc      	strh	r4, [r7, #38]	; 0x26
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002108:	f887 404d 	strb.w	r4, [r7, #77]	; 0x4d
  tp->mtxlist   = NULL;
 800210c:	667c      	str	r4, [r7, #100]	; 0x64
  tp->epending  = (eventmask_t)0;
 800210e:	663c      	str	r4, [r7, #96]	; 0x60
  tp->refs      = (trefs_t)1;
 8002110:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
  REG_INSERT(tp);
 8002114:	63ff      	str	r7, [r7, #60]	; 0x3c
 8002116:	643f      	str	r7, [r7, #64]	; 0x40
  tp->prio      = prio;
 8002118:	f8c7 a034 	str.w	sl, [r7, #52]	; 0x34
  tp->realprio  = prio;
 800211c:	f8c7 a068 	str.w	sl, [r7, #104]	; 0x68
 8002120:	f888 a31c 	strb.w	sl, [r8, #796]	; 0x31c
  H_NEXT(&default_heap.header) = NULL;
 8002124:	6084      	str	r4, [r0, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002126:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
  H_PAGES(&default_heap.header) = 0;
 800212a:	60c4      	str	r4, [r0, #12]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800212c:	f8c8 2000 	str.w	r2, [r8]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002130:	4a72      	ldr	r2, [pc, #456]	; (80022fc <main+0x3dc>)
 8002132:	f8c3 e000 	str.w	lr, [r3]
  ch_memcore.endmem  = __heap_end__;
 8002136:	f8df e200 	ldr.w	lr, [pc, #512]	; 8002338 <main+0x418>
 800213a:	6002      	str	r2, [r0, #0]
  tqp->next = (thread_t *)tqp;
 800213c:	eb00 020c 	add.w	r2, r0, ip
 8002140:	6102      	str	r2, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 8002142:	6142      	str	r2, [r0, #20]
 8002144:	f8c3 e004 	str.w	lr, [r3, #4]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002148:	f107 021c 	add.w	r2, r7, #28
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <main+0x3e0>)
 800214e:	6184      	str	r4, [r0, #24]
 8002150:	61fa      	str	r2, [r7, #28]
  tqp->next = (thread_t *)tqp;
 8002152:	f107 0058 	add.w	r0, r7, #88	; 0x58
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002156:	623a      	str	r2, [r7, #32]
  REG_INSERT(tp);
 8002158:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800215c:	613a      	str	r2, [r7, #16]
 800215e:	617a      	str	r2, [r7, #20]
 8002160:	603f      	str	r7, [r7, #0]
 8002162:	65b8      	str	r0, [r7, #88]	; 0x58
 8002164:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  tqp->prev = (thread_t *)tqp;
 8002168:	65f8      	str	r0, [r7, #92]	; 0x5c
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	f42e 6ee0 	bic.w	lr, lr, #1792	; 0x700
 800216e:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
  reg_value  =  (reg_value                                   |
 8002172:	4864      	ldr	r0, [pc, #400]	; (8002304 <main+0x3e4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002174:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
  reg_value  =  (reg_value                                   |
 8002178:	ea4e 0000 	orr.w	r0, lr, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800217c:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 800233c <main+0x41c>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002180:	61ba      	str	r2, [r7, #24]
  SCB->AIRCR =  reg_value;
 8002182:	60d8      	str	r0, [r3, #12]
 8002184:	f8de 200c 	ldr.w	r2, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002188:	485f      	ldr	r0, [pc, #380]	; (8002308 <main+0x3e8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800218a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800218e:	f8ce 200c 	str.w	r2, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002192:	6802      	ldr	r2, [r0, #0]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002194:	64bc      	str	r4, [r7, #72]	; 0x48
 8002196:	430a      	orrs	r2, r1
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002198:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 800219c:	6002      	str	r2, [r0, #0]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	f883 c01f 	strb.w	ip, [r3, #31]
 80021a2:	f883 b022 	strb.w	fp, [r3, #34]	; 0x22
 80021a6:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 80021aa:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80021ac:	f38b 8811 	msr	BASEPRI, fp
  tp->state     = CH_STATE_WTSTART;
 80021b0:	f04f 0c02 	mov.w	ip, #2
  tp->wabase = tdp->wbase;
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <main+0x3ec>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021b6:	4a56      	ldr	r2, [pc, #344]	; (8002310 <main+0x3f0>)
  tp->prio      = prio;
 80021b8:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  tp->realprio  = prio;
 80021bc:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
  tp->refs      = (trefs_t)1;
 80021c0:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021c4:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  REG_INSERT(tp);
 80021c8:	f8d7 e014 	ldr.w	lr, [r7, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021cc:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  tp->name      = name;
 80021d0:	4850      	ldr	r0, [pc, #320]	; (8002314 <main+0x3f4>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021d2:	4951      	ldr	r1, [pc, #324]	; (8002318 <main+0x3f8>)
 80021d4:	66da      	str	r2, [r3, #108]	; 0x6c
  REG_INSERT(tp);
 80021d6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80021da:	f8c3 e0a4 	str.w	lr, [r3, #164]	; 0xa4
  tp->state     = CH_STATE_WTSTART;
 80021de:	f883 c0b0 	strb.w	ip, [r3, #176]	; 0xb0
  tp->name      = name;
 80021e2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021e6:	671c      	str	r4, [r3, #112]	; 0x70
  tp->flags     = CH_FLAG_MODE_STATIC;
 80021e8:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->mtxlist   = NULL;
 80021ec:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
 80021f0:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  REG_INSERT(tp);
 80021f4:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 80021f8:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80021fc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  tlp->next = (thread_t *)tlp;
 8002200:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  REG_INSERT(tp);
 8002204:	f8ce 2010 	str.w	r2, [lr, #16]
  tqp->next = (thread_t *)tqp;
 8002208:	f103 0ebc 	add.w	lr, r3, #188	; 0xbc
  chSchWakeupS(tp, MSG_OK);
 800220c:	4610      	mov	r0, r2
  tlp->next = (thread_t *)tlp;
 800220e:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
 8002212:	f8c3 e0bc 	str.w	lr, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 8002216:	f8c3 e0c0 	str.w	lr, [r3, #192]	; 0xc0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800221a:	9101      	str	r1, [sp, #4]
  REG_INSERT(tp);
 800221c:	617a      	str	r2, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 800221e:	f000 f9ef 	bl	8002600 <chSchWakeupS.constprop.34>
 8002222:	f384 8811 	msr	BASEPRI, r4

	halInit();
	chSysInit();
	
	delay =50;
 8002226:	2232      	movs	r2, #50	; 0x32
 8002228:	4b3c      	ldr	r3, [pc, #240]	; (800231c <main+0x3fc>)
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002230:	7a33      	ldrb	r3, [r6, #8]
 8002232:	9901      	ldr	r1, [sp, #4]
 8002234:	2b01      	cmp	r3, #1
 8002236:	f000 81b0 	beq.w	800259a <main+0x67a>
    u->BRR = STM32_PCLK2 / config->speed;
 800223a:	22d0      	movs	r2, #208	; 0xd0
  USART_TypeDef *u = sdp->usart;
 800223c:	6f73      	ldr	r3, [r6, #116]	; 0x74
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800223e:	f04f 0e40 	mov.w	lr, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002242:	f04f 0c01 	mov.w	ip, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002246:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 800224a:	2400      	movs	r4, #0
    u->BRR = STM32_PCLK2 / config->speed;
 800224c:	609a      	str	r2, [r3, #8]
  sdp->state = SD_READY;
 800224e:	f04f 0802 	mov.w	r8, #2
    sdp->rxmask = 0xFF;
 8002252:	22ff      	movs	r2, #255	; 0xff
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002254:	f8c3 e010 	str.w	lr, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002258:	f8c3 c014 	str.w	ip, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800225c:	60d8      	str	r0, [r3, #12]
  u->SR = 0;
 800225e:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002260:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002262:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002264:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
 8002268:	f886 8008 	strb.w	r8, [r6, #8]
 800226c:	f384 8811 	msr	BASEPRI, r4
 8002270:	2620      	movs	r6, #32
 8002272:	f386 8811 	msr	BASEPRI, r6
  tp->prio      = prio;
 8002276:	2081      	movs	r0, #129	; 0x81
  tp->wabase = (stkalign_t *)wsp;
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <main+0x400>)
  REG_INSERT(tp);
 800227a:	f8d7 e014 	ldr.w	lr, [r7, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800227e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002340 <main+0x420>
  tp->name      = name;
 8002282:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002344 <main+0x424>
  REG_INSERT(tp);
 8002286:	f503 7280 	add.w	r2, r3, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800228a:	f103 0bdc 	add.w	fp, r3, #220	; 0xdc
 800228e:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
  REG_INSERT(tp);
 8002292:	f8c3 e114 	str.w	lr, [r3, #276]	; 0x114
  tp->prio      = prio;
 8002296:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  tp->realprio  = prio;
 800229a:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
  tqp->next = (thread_t *)tqp;
 800229e:	f503 7196 	add.w	r1, r3, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80022a2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
  tp->state     = CH_STATE_WTSTART;
 80022a6:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 80022aa:	f883 4121 	strb.w	r4, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
 80022ae:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 80022b2:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
  tp->refs      = (trefs_t)1;
 80022b6:	f883 c122 	strb.w	ip, [r3, #290]	; 0x122
 80022ba:	e045      	b.n	8002348 <main+0x428>
 80022bc:	20000afc 	.word	0x20000afc
 80022c0:	40020000 	.word	0x40020000
 80022c4:	888888bb 	.word	0x888888bb
 80022c8:	88884b43 	.word	0x88884b43
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40011800 	.word	0x40011800
 80022d4:	08002900 	.word	0x08002900
 80022d8:	2000083c 	.word	0x2000083c
 80022dc:	20000824 	.word	0x20000824
 80022e0:	08000cc1 	.word	0x08000cc1
 80022e4:	40004800 	.word	0x40004800
 80022e8:	08002804 	.word	0x08002804
 80022ec:	20000b78 	.word	0x20000b78
 80022f0:	0800287c 	.word	0x0800287c
 80022f4:	20000ad8 	.word	0x20000ad8
 80022f8:	20000ad0 	.word	0x20000ad0
 80022fc:	08001061 	.word	0x08001061
 8002300:	e000ed00 	.word	0xe000ed00
 8002304:	05fa0300 	.word	0x05fa0300
 8002308:	e0001000 	.word	0xe0001000
 800230c:	200009f8 	.word	0x200009f8
 8002310:	08001121 	.word	0x08001121
 8002314:	08002894 	.word	0x08002894
 8002318:	08000245 	.word	0x08000245
 800231c:	20000af8 	.word	0x20000af8
 8002320:	200008b0 	.word	0x200008b0
 8002324:	40021000 	.word	0x40021000
 8002328:	40012c00 	.word	0x40012c00
 800232c:	e0042000 	.word	0xe0042000
 8002330:	e000e100 	.word	0xe000e100
 8002334:	20000be8 	.word	0x20000be8
 8002338:	20002000 	.word	0x20002000
 800233c:	e000edf0 	.word	0xe000edf0
 8002340:	08001eb1 	.word	0x08001eb1
 8002344:	0800289c 	.word	0x0800289c
  REG_INSERT(tp);
 8002348:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 800234c:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002350:	f8c3 b10c 	str.w	fp, [r3, #268]	; 0x10c
 8002354:	f8c3 a0dc 	str.w	sl, [r3, #220]	; 0xdc
  tp->name      = name;
 8002358:	f8c3 9118 	str.w	r9, [r3, #280]	; 0x118
  REG_INSERT(tp);
 800235c:	f8ce 2010 	str.w	r2, [lr, #16]
  tlp->next = (thread_t *)tlp;
 8002360:	f503 7e94 	add.w	lr, r3, #296	; 0x128
  chSchWakeupS(tp, MSG_OK);
 8002364:	4610      	mov	r0, r2
 8002366:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 800236a:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 800236e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  REG_INSERT(tp);
 8002372:	617a      	str	r2, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 8002374:	f000 f944 	bl	8002600 <chSchWakeupS.constprop.34>
 8002378:	f384 8811 	msr	BASEPRI, r4
 800237c:	f8df a264 	ldr.w	sl, [pc, #612]	; 80025e4 <main+0x6c4>
 8002380:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80025e8 <main+0x6c8>
 8002384:	4f8c      	ldr	r7, [pc, #560]	; (80025b8 <main+0x698>)
      rccEnableTIM1(FALSE);
 8002386:	f8df b264 	ldr.w	fp, [pc, #612]	; 80025ec <main+0x6cc>
	    	icuStartCapture(&ICUD1);
	    	icuEnableNotifications(&ICUD1);
	    	chThdSleepMilliseconds(700);
		
		//#if ANSI_ESCAPE_CODE_ALLOWED
    		chprintf(chp3, "\033[2J\033[1;1H");
 800238a:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80025f0 <main+0x6d0>
 800238e:	e08a      	b.n	80024a6 <main+0x586>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8002390:	f240 2201 	movw	r2, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8002394:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8002396:	619a      	str	r2, [r3, #24]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002398:	783a      	ldrb	r2, [r7, #0]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800239a:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800239c:	2a00      	cmp	r2, #0
 800239e:	f040 80f3 	bne.w	8002588 <main+0x668>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 80023a2:	2231      	movs	r2, #49	; 0x31
 80023a4:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 80023a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 80023aa:	3334      	adds	r3, #52	; 0x34
    icup->wccrp = &icup->tim->CCR[1];
 80023ac:	612a      	str	r2, [r5, #16]
    icup->pccrp = &icup->tim->CCR[0];
 80023ae:	616b      	str	r3, [r5, #20]
  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
  icu_lld_start(icup);
  icup->state = ICU_READY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	702b      	strb	r3, [r5, #0]
 80023b4:	f384 8811 	msr	BASEPRI, r4
 80023b8:	f386 8811 	msr	BASEPRI, r6
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80023bc:	2105      	movs	r1, #5
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 80023be:	68eb      	ldr	r3, [r5, #12]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
 80023c8:	611c      	str	r4, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 80023ca:	6019      	str	r1, [r3, #0]

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
 80023cc:	f04f 0303 	mov.w	r3, #3
 80023d0:	702b      	strb	r3, [r5, #0]
 80023d2:	f384 8811 	msr	BASEPRI, r4
 80023d6:	f386 8811 	msr	BASEPRI, r6
  uint32_t dier = icup->tim->DIER;
 80023da:	68ea      	ldr	r2, [r5, #12]
 80023dc:	68d3      	ldr	r3, [r2, #12]
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 80023de:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 80023e2:	d110      	bne.n	8002406 <main+0x4e6>
    if (icup->config->channel == ICU_CHANNEL_1) {
 80023e4:	6869      	ldr	r1, [r5, #4]
    icup->tim->SR = 0;
 80023e6:	6110      	str	r0, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 80023e8:	7d08      	ldrb	r0, [r1, #20]
 80023ea:	2800      	cmp	r0, #0
 80023ec:	f040 80a2 	bne.w	8002534 <main+0x614>
      if (icup->config->width_cb != NULL)
 80023f0:	6888      	ldr	r0, [r1, #8]
 80023f2:	2800      	cmp	r0, #0
 80023f4:	f000 80ce 	beq.w	8002594 <main+0x674>
        dier |= STM32_TIM_DIER_CC1IE;
 80023f8:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
 80023fc:	6909      	ldr	r1, [r1, #16]
 80023fe:	b109      	cbz	r1, 8002404 <main+0x4e4>
      dier |= STM32_TIM_DIER_UIE;
 8002400:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
 8002404:	60d3      	str	r3, [r2, #12]
 8002406:	f384 8811 	msr	BASEPRI, r4
	    	chThdSleepMilliseconds(700);
 800240a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800240e:	f7ff fbaf 	bl	8001b70 <chThdSleep>
    		chprintf(chp3, "\033[2J\033[1;1H");
 8002412:	4640      	mov	r0, r8
 8002414:	4969      	ldr	r1, [pc, #420]	; (80025bc <main+0x69c>)
 8002416:	f7ff f8cb 	bl	80015b0 <chprintf>
 800241a:	f386 8811 	msr	BASEPRI, r6

  osalSysLock();
  osalDbgAssert((icup->state == ICU_READY) || (icup->state == ICU_WAITING) ||
                (icup->state == ICU_ACTIVE),
                "invalid state");
  icuStopCaptureI(icup);
 800241e:	2102      	movs	r1, #2
  icup->tim->CR1   = 0;
 8002420:	68eb      	ldr	r3, [r5, #12]
 8002422:	601c      	str	r4, [r3, #0]
  icup->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	7029      	strb	r1, [r5, #0]
 8002428:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	f384 8811 	msr	BASEPRI, r4
 8002432:	f386 8811 	msr	BASEPRI, r6
  if (icup->state == ICU_READY) {
 8002436:	782b      	ldrb	r3, [r5, #0]
 8002438:	428b      	cmp	r3, r1
 800243a:	d116      	bne.n	800246a <main+0x54a>
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800243c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 8002444:	68ea      	ldr	r2, [r5, #12]
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <main+0x6a0>)
 8002448:	6014      	str	r4, [r2, #0]
    icup->tim->DIER = 0;                    /* All IRQs disabled.           */
 800244a:	60d4      	str	r4, [r2, #12]
    icup->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 800244c:	6114      	str	r4, [r2, #16]
 800244e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002452:	f883 4319 	strb.w	r4, [r3, #793]	; 0x319
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002456:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->IP[n] = 0U;
 800245a:	f883 431b 	strb.w	r4, [r3, #795]	; 0x31b
      rccDisableTIM1(FALSE);
 800245e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002466:	f8cb 3018 	str.w	r3, [fp, #24]
  icup->state  = ICU_STOP;
 800246a:	2301      	movs	r3, #1
  icup->config = NULL;
 800246c:	606c      	str	r4, [r5, #4]
  icup->state  = ICU_STOP;
 800246e:	702b      	strb	r3, [r5, #0]
 8002470:	f384 8811 	msr	BASEPRI, r4
		//#endif
    		icuStopCapture(&ICUD1);
    		icuStop(&ICUD1);

		chprintf(chp3, "Temperature: %d C, Humidity Rate: %d %% \n\r", TEMP, HR);
 8002474:	4953      	ldr	r1, [pc, #332]	; (80025c4 <main+0x6a4>)
 8002476:	f89a 3000 	ldrb.w	r3, [sl]
 800247a:	f899 2000 	ldrb.w	r2, [r9]
 800247e:	4640      	mov	r0, r8
 8002480:	f7ff f896 	bl	80015b0 <chprintf>
		if(CHECK_SUM == (TEMP + HR)){
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <main+0x6a8>)
 8002486:	f89a 1000 	ldrb.w	r1, [sl]
 800248a:	f899 3000 	ldrb.w	r3, [r9]
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	440b      	add	r3, r1
 8002492:	429a      	cmp	r2, r3
      			chprintf(chp3, "Checksum OK!\n\r");
 8002494:	bf0c      	ite	eq
 8002496:	494d      	ldreq	r1, [pc, #308]	; (80025cc <main+0x6ac>)
    		}
    		else{
      			chprintf(chp3, "Checksum FAILED!\n\r");
 8002498:	494d      	ldrne	r1, [pc, #308]	; (80025d0 <main+0x6b0>)
 800249a:	4640      	mov	r0, r8
 800249c:	f7ff f888 	bl	80015b0 <chprintf>
    		}
        chThdSleepMilliseconds(100);
 80024a0:	2064      	movs	r0, #100	; 0x64
 80024a2:	f7ff fb65 	bl	8001b70 <chThdSleep>
    TEMP =  HR =  CHECK_SUM =  tmp =  bit_counter = 0;
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <main+0x6b4>)
	    	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 80024a8:	2006      	movs	r0, #6
    TEMP =  HR =  CHECK_SUM =  tmp =  bit_counter = 0;
 80024aa:	701c      	strb	r4, [r3, #0]
 80024ac:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <main+0x6b8>)
 80024ae:	f88a 4000 	strb.w	r4, [sl]
 80024b2:	701c      	strb	r4, [r3, #0]
 80024b4:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <main+0x6a8>)
 80024b6:	f889 4000 	strb.w	r4, [r9]
 80024ba:	701c      	strb	r4, [r3, #0]
	    	palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 80024bc:	f000 f908 	bl	80026d0 <_pal_lld_setgroupmode.constprop.4>
	    	palWritePad(GPIOA, 8, PAL_LOW);
 80024c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <main+0x6bc>)
	    	chThdSleepMicroseconds(18000);
 80024c6:	2012      	movs	r0, #18
	    	palWritePad(GPIOA, 8, PAL_LOW);
 80024c8:	6113      	str	r3, [r2, #16]
	    	chThdSleepMicroseconds(18000);
 80024ca:	f7ff fb51 	bl	8001b70 <chThdSleep>
	    	palWritePad(GPIOA, 8, PAL_HIGH);
 80024ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d2:	4a42      	ldr	r2, [pc, #264]	; (80025dc <main+0x6bc>)
	     	palSetPadMode(GPIOA, 8, PAL_MODE_INPUT_PULLUP);
 80024d4:	2003      	movs	r0, #3
	    	palWritePad(GPIOA, 8, PAL_HIGH);
 80024d6:	6113      	str	r3, [r2, #16]
	     	palSetPadMode(GPIOA, 8, PAL_MODE_INPUT_PULLUP);
 80024d8:	f000 f8fa 	bl	80026d0 <_pal_lld_setgroupmode.constprop.4>
 80024dc:	f386 8811 	msr	BASEPRI, r6
  if (icup->state == ICU_STOP) {
 80024e0:	782b      	ldrb	r3, [r5, #0]
  icup->config = config;
 80024e2:	606f      	str	r7, [r5, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d02c      	beq.n	8002542 <main+0x622>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 80024e8:	68eb      	ldr	r3, [r5, #12]
 80024ea:	68aa      	ldr	r2, [r5, #8]
 80024ec:	601c      	str	r4, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80024ee:	635c      	str	r4, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80024f0:	639c      	str	r4, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 80024f2:	625c      	str	r4, [r3, #36]	; 0x24
  psc = (icup->clock / icup->config->frequency) - 1;
 80024f4:	6879      	ldr	r1, [r7, #4]
  icup->tim->ARR  = 0xFFFF;
 80024f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
 80024fa:	fbb2 f2f1 	udiv	r2, r2, r1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80024fe:	69b9      	ldr	r1, [r7, #24]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 8002500:	611c      	str	r4, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 8002502:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002506:	60d9      	str	r1, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002508:	7d39      	ldrb	r1, [r7, #20]
  psc = (icup->clock / icup->config->frequency) - 1;
 800250a:	3a01      	subs	r2, #1
  icup->tim->PSC  = psc;
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
 800250e:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002510:	2900      	cmp	r1, #0
 8002512:	f43f af3d 	beq.w	8002390 <main+0x470>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8002516:	f44f 7281 	mov.w	r2, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800251a:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 800251c:	619a      	str	r2, [r3, #24]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 800251e:	783a      	ldrb	r2, [r7, #0]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002520:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002522:	bba2      	cbnz	r2, 800258e <main+0x66e>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002524:	2213      	movs	r2, #19
 8002526:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 8002528:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 800252c:	3338      	adds	r3, #56	; 0x38
    icup->wccrp = &icup->tim->CCR[0];
 800252e:	612a      	str	r2, [r5, #16]
    icup->pccrp = &icup->tim->CCR[1];
 8002530:	616b      	str	r3, [r5, #20]
 8002532:	e73d      	b.n	80023b0 <main+0x490>
      if (icup->config->width_cb != NULL)
 8002534:	6888      	ldr	r0, [r1, #8]
 8002536:	2800      	cmp	r0, #0
 8002538:	f47f af5e 	bne.w	80023f8 <main+0x4d8>
      dier |= STM32_TIM_DIER_CC2IE;
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	e75c      	b.n	80023fc <main+0x4dc>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002542:	2070      	movs	r0, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002544:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8002548:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
      rccEnableTIM1(FALSE);
 800254c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002554:	f8cb 3018 	str.w	r3, [fp, #24]
      rccResetTIM1();
 8002558:	f8db 200c 	ldr.w	r2, [fp, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <main+0x6a0>)
 800255e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002562:	f8cb 200c 	str.w	r2, [fp, #12]
      icup->clock = STM32_TIMCLK2;
 8002566:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <main+0x6c0>)
      rccResetTIM1();
 8002568:	f8cb 400c 	str.w	r4, [fp, #12]
      icup->clock = STM32_TIMCLK2;
 800256c:	60aa      	str	r2, [r5, #8]
 800256e:	f883 0319 	strb.w	r0, [r3, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002572:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002576:	f8c3 e000 	str.w	lr, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800257a:	f883 031b 	strb.w	r0, [r3, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800257e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002582:	6019      	str	r1, [r3, #0]
 8002584:	68eb      	ldr	r3, [r5, #12]
 8002586:	e7b5      	b.n	80024f4 <main+0x5d4>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002588:	2213      	movs	r2, #19
 800258a:	621a      	str	r2, [r3, #32]
 800258c:	e70b      	b.n	80023a6 <main+0x486>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800258e:	2231      	movs	r2, #49	; 0x31
 8002590:	621a      	str	r2, [r3, #32]
 8002592:	e7c9      	b.n	8002528 <main+0x608>
      dier |= STM32_TIM_DIER_CC1IE;
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	e730      	b.n	80023fc <main+0x4dc>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800259a:	22c0      	movs	r2, #192	; 0xc0
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 800259c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80025a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a4:	f8c9 301c 	str.w	r3, [r9, #28]
 80025a8:	f888 2327 	strb.w	r2, [r8, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80025ac:	f8c8 a184 	str.w	sl, [r8, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80025b0:	f8c8 a004 	str.w	sl, [r8, #4]
 80025b4:	e641      	b.n	800223a <main+0x31a>
 80025b6:	bf00      	nop
 80025b8:	20000800 	.word	0x20000800
 80025bc:	080028a4 	.word	0x080028a4
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	080028b0 	.word	0x080028b0
 80025c8:	20000820 	.word	0x20000820
 80025cc:	080028dc 	.word	0x080028dc
 80025d0:	080028ec 	.word	0x080028ec
 80025d4:	200008a8 	.word	0x200008a8
 80025d8:	20000af9 	.word	0x20000af9
 80025dc:	40010800 	.word	0x40010800
 80025e0:	016e3600 	.word	0x016e3600
 80025e4:	20000821 	.word	0x20000821
 80025e8:	2000086c 	.word	0x2000086c
 80025ec:	40021000 	.word	0x40021000
 80025f0:	20000afc 	.word	0x20000afc
	...

08002600 <chSchWakeupS.constprop.34>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002600:	b470      	push	{r4, r5, r6}
  ntp->u.rdymsg = msg;
 8002602:	2600      	movs	r6, #0
  thread_t *otp = currp;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <chSchWakeupS.constprop.34+0x58>)
  ntp->u.rdymsg = msg;
 8002606:	6246      	str	r6, [r0, #36]	; 0x24
  thread_t *otp = currp;
 8002608:	699d      	ldr	r5, [r3, #24]
  if (ntp->prio <= otp->prio) {
 800260a:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800260c:	4604      	mov	r4, r0
  if (ntp->prio <= otp->prio) {
 800260e:	68a8      	ldr	r0, [r5, #8]
 8002610:	4281      	cmp	r1, r0
 8002612:	d80c      	bhi.n	800262e <chSchWakeupS.constprop.34+0x2e>
  tp->state = CH_STATE_READY;
 8002614:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
 8002618:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4291      	cmp	r1, r2
 800261e:	d9fb      	bls.n	8002618 <chSchWakeupS.constprop.34+0x18>
  tp->queue.prev             = cp->queue.prev;
 8002620:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8002622:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8002624:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8002626:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002628:	605c      	str	r4, [r3, #4]
}
 800262a:	bc70      	pop	{r4, r5, r6}
 800262c:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
 800262e:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 8002630:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
 8002634:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002636:	6891      	ldr	r1, [r2, #8]
 8002638:	4288      	cmp	r0, r1
 800263a:	d9fb      	bls.n	8002634 <chSchWakeupS.constprop.34+0x34>
    ntp->state = CH_STATE_CURRENT;
 800263c:	2601      	movs	r6, #1
  tp->queue.prev             = cp->queue.prev;
 800263e:	6850      	ldr	r0, [r2, #4]
  tp->queue.next             = cp;
 8002640:	602a      	str	r2, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8002642:	6068      	str	r0, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8002644:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8002646:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002648:	f884 6020 	strb.w	r6, [r4, #32]
    chSysSwitch(ntp, otp);
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
    currp = ntp;
 8002650:	619c      	str	r4, [r3, #24]
}
 8002652:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8002654:	f7fd bdee 	b.w	8000234 <_port_switch>
 8002658:	20000b78 	.word	0x20000b78
 800265c:	00000000 	.word	0x00000000

08002660 <chEvtBroadcastFlagsI.constprop.27>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8002662:	4f17      	ldr	r7, [pc, #92]	; (80026c0 <chEvtBroadcastFlagsI.constprop.27+0x60>)
 8002664:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002668:	42bc      	cmp	r4, r7
 800266a:	d021      	beq.n	80026b0 <chEvtBroadcastFlagsI.constprop.27+0x50>
 800266c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800266e:	2600      	movs	r6, #0
 8002670:	e002      	b.n	8002678 <chEvtBroadcastFlagsI.constprop.27+0x18>
    elp = elp->next;
 8002672:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8002674:	42bc      	cmp	r4, r7
 8002676:	d01b      	beq.n	80026b0 <chEvtBroadcastFlagsI.constprop.27+0x50>
    elp->flags |= flags;
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	432b      	orrs	r3, r5
 800267c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800267e:	b115      	cbz	r5, 8002686 <chEvtBroadcastFlagsI.constprop.27+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8002680:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8002682:	4213      	tst	r3, r2
 8002684:	d0f5      	beq.n	8002672 <chEvtBroadcastFlagsI.constprop.27+0x12>
      chEvtSignalI(elp->listener, elp->events);
 8002686:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8002688:	68a3      	ldr	r3, [r4, #8]
 800268a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800268c:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8002690:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002692:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8002694:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002696:	d00c      	beq.n	80026b2 <chEvtBroadcastFlagsI.constprop.27+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002698:	2a0b      	cmp	r2, #11
 800269a:	d1ea      	bne.n	8002672 <chEvtBroadcastFlagsI.constprop.27+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800269c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 800269e:	ea32 0303 	bics.w	r3, r2, r3
 80026a2:	d1e6      	bne.n	8002672 <chEvtBroadcastFlagsI.constprop.27+0x12>
    tp->u.rdymsg = MSG_OK;
 80026a4:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80026a6:	f7ff fa93 	bl	8001bd0 <chSchReadyI>
    elp = elp->next;
 80026aa:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80026ac:	42bc      	cmp	r4, r7
 80026ae:	d1e3      	bne.n	8002678 <chEvtBroadcastFlagsI.constprop.27+0x18>
 80026b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80026b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80026b4:	4213      	tst	r3, r2
 80026b6:	d0dc      	beq.n	8002672 <chEvtBroadcastFlagsI.constprop.27+0x12>
    tp->u.rdymsg = MSG_OK;
 80026b8:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80026ba:	f7ff fa89 	bl	8001bd0 <chSchReadyI>
 80026be:	e7f4      	b.n	80026aa <chEvtBroadcastFlagsI.constprop.27+0x4a>
 80026c0:	20000afc 	.word	0x20000afc
	...

080026d0 <_pal_lld_setgroupmode.constprop.4>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 80026d0:	2803      	cmp	r0, #3
void _pal_lld_setgroupmode(ioportid_t port,
 80026d2:	b470      	push	{r4, r5, r6}
  if (mode == PAL_MODE_INPUT_PULLUP)
 80026d4:	d024      	beq.n	8002720 <_pal_lld_setgroupmode.constprop.4+0x50>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 80026d6:	2804      	cmp	r0, #4
 80026d8:	d027      	beq.n	800272a <_pal_lld_setgroupmode.constprop.4+0x5a>
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80026da:	2200      	movs	r2, #0
  cfg = cfgtab[mode];
 80026dc:	2508      	movs	r5, #8
  mh = ml = crh = crl = 0;
 80026de:	4611      	mov	r1, r2
 80026e0:	4613      	mov	r3, r2
  cfg = cfgtab[mode];
 80026e2:	f44f 7480 	mov.w	r4, #256	; 0x100
 80026e6:	4e13      	ldr	r6, [pc, #76]	; (8002734 <_pal_lld_setgroupmode.constprop.4+0x64>)
 80026e8:	5c30      	ldrb	r0, [r6, r0]
    crh <<= 4;
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
    else
      crl |= cfg;
    if ((mask & 0x8000) == 0)
 80026ea:	0426      	lsls	r6, r4, #16
    mh <<= 4;
 80026ec:	ea4f 1101 	mov.w	r1, r1, lsl #4
    crh <<= 4;
 80026f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    ml <<= 4;
 80026f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
      mh |= 0xf;
 80026f8:	bf54      	ite	pl
 80026fa:	f041 010f 	orrpl.w	r1, r1, #15
    else
      crh |= cfg;
 80026fe:	4302      	orrmi	r2, r0
  for (i = 0; i < 8; i++) {
 8002700:	3d01      	subs	r5, #1
      ml |= 0xf;
 8002702:	f043 030f 	orr.w	r3, r3, #15
    mask <<= 1;
 8002706:	ea4f 0444 	mov.w	r4, r4, lsl #1
  for (i = 0; i < 8; i++) {
 800270a:	d1ee      	bne.n	80026ea <_pal_lld_setgroupmode.constprop.4+0x1a>
  }
  port->CRH = (port->CRH & mh) | crh;
 800270c:	4c0a      	ldr	r4, [pc, #40]	; (8002738 <_pal_lld_setgroupmode.constprop.4+0x68>)
 800270e:	6860      	ldr	r0, [r4, #4]
 8002710:	4001      	ands	r1, r0
 8002712:	430a      	orrs	r2, r1
 8002714:	6062      	str	r2, [r4, #4]
  port->CRL = (port->CRL & ml) | crl;
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	4013      	ands	r3, r2
 800271a:	6023      	str	r3, [r4, #0]
}
 800271c:	bc70      	pop	{r4, r5, r6}
 800271e:	4770      	bx	lr
    port->BSRR = mask;
 8002720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <_pal_lld_setgroupmode.constprop.4+0x68>)
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	e7d7      	b.n	80026da <_pal_lld_setgroupmode.constprop.4+0xa>
    port->BRR = mask;
 800272a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272e:	4b02      	ldr	r3, [pc, #8]	; (8002738 <_pal_lld_setgroupmode.constprop.4+0x68>)
 8002730:	615a      	str	r2, [r3, #20]
 8002732:	e7d2      	b.n	80026da <_pal_lld_setgroupmode.constprop.4+0xa>
 8002734:	08002920 	.word	0x08002920
 8002738:	40010800 	.word	0x40010800
